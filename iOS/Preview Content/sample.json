{
    "posts": [
      {
        "id": 41373,
        "title": "Protocol-Oriented Themes for iOS Apps",
        "slug": "protocol-oriented-themes-for-ios-apps",
        "type": "post",
        "excerpt": "Themes are usually downplayed as an after-thought instead of being an integral part of the development process. How many times have you inherited a codebase where the design team wants to tweak it, or business wants you to clone the app with a whole different theme. In this post, I'm going to show you the native way of theming an iOS app as intended by Apple that is often overlooked.",
        "content": "<p>Themes are usually downplayed as an after-thought instead of being an integral part of the development process. How many times have you inherited a codebase where the design team wants to tweak it, or business wants you to clone the app with a whole different theme.\u00a0Then you look at the code&#8230;</p>\n<p><em>Color and font changes are sprinkled all over storyboards and views!!</em></p>\n<p>Ok you wish they had a bit more foresight when they were making the app the first time, but then they wouldn&#8217;t have reached out to you now right? In this post, I&#8217;m going to show you the native way of theming an iOS app as intended by Apple. It&#8217;s often overlooked, well because&#8230;</p>\n<h2>UIAppearance Sucks</h2>\n<p>I&#8217;m sure most of you have toyed with <a href=\"https://developer.apple.com/documentation/uikit/uiappearance\" target=\"_blank\" rel=\"noopener noreferrer\"><em>UIAppearance</em></a> and quickly gave up on it because of its limitations, especially if you&#8217;ve been spoiled with CSS stylesheets for web development or theme resources for Android apps. Apple&#8217;s way of theming is quite awkward, but it&#8217;s what we got and I urge you not to roll out your own or use yet another dependency.</p>\n<p>In a nutshell, <code>UIAppearance</code> allows you to style <em>UIKit</em> controls globally using a proxy, or a class that stands in as a placeholder which applies itself to the control when it gets added to the window hierarchy. For example, you can globally change labels to red text like this:</p>\n<pre class=\"lang:swift decode:true\">UILabel.appearance().textColor = .red</pre>\n<p>It&#8217;s like a static function that gets applied to all future instances. Though, it&#8217;s like a sledge hammer for a nail because it applies to <em>ALL</em> labels in the app, even in places you didn&#8217;t even know labels existed! This is where most people give up on <code>UIAppearance</code>.</p>\n<h2>UIAppearance Sucks&#8230; Well Kinda&#8230;</h2>\n<p>Apple&#8217;s answer to styles and themes is for you to subclass your <em>UIKit</em> controls and use <code>UIAppearance</code> on those custom controls like this:</p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance().textColor = .red</pre>\n<p>That&#8217;s the awkward part, Apple wants you to use object-oriented programming to theme your apps. I don&#8217;t think they understood that a CSS-<em>class</em> isn&#8217;t really a <em>class</em> \ud83d\ude44.</p>\n<p>You can take it one step further though:</p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance(whenContainedInInstancesOf: [MyCustomView.self]).textColor = .red</pre>\n<p>This will change the appearance of all <em>AppLabel&#8217;s</em>\u00a0only contained in <em>MyCustomView&#8217;s</em>. So that&#8217;s your other option &#8211; to change your UI hierarchy to accommodate styling \ud83e\udd26\u200d\u2642\ufe0f.\u00a0Why couldn&#8217;t they just add a new space-delimited string property called styles that gets realized by its children??</p>\n<p>Anyways, surprisingly things become really powerful when you start feeding <code>whenContainedInInstancesOf</code> an array of classes, which defines the hierarchy chain of the control. The specificity let&#8217;s you zero in on controls.</p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance(whenContainedInInstancesOf: [MyViewController.self]).textColor = .blue\nAppLabel.appearance(whenContainedInInstancesOf: [MyCustomView.self]).textColor = .red\nAppLabel.appearance(whenContainedInInstancesOf: [MyCustomView.self, MyViewController.self]).textColor = .yellow</pre>\n<p>Another Apple awkwardness is that the outer most parent wins (unlike CSS and the rest of the world). So in the above example, <code>[MyViewController.self]</code> wins over <code>[MyCustomView.self]</code>, even though <code>MyCustomView</code> is the closest parent.</p>\n<p>The way it works is the selector starts from top-to-bottom of the hierarchy, which means when it first hits\u00a0<code>MyViewController</code>\u00a0it stops. The label will be blue, not red, even if it&#8217;s contained in a <code>MyCustomView</code>. Fortunately though, the longer your array is (the more specific it is), the higher priority it is. In this case, the labels in <code>MyCustomView</code>\u00a0will be yellow if it is on the <code>MyViewController</code>\u00a0screen.</p>\n<p>Once you understand and toy around with these quirks, it becomes a full-fledged styling framework!</p>\n<h2>Styleable Controls</h2>\n<p>First thing we must do is subclass all the controls we want to style in our app. Not the best use of object-oriented programming, but it&#8217;s native theming (<em>see rant above</em>). Here&#8217;s what I got:</p>\n<p><em>AppLabel.swift:</em></p>\n<pre class=\"lang:swift decode:true\">class AppLabel: UILabel {\n    \n}\n\nclass AppHeadline: UILabel {\n    \n}\n\nclass AppSubhead: UILabel {\n    \n}\n\nclass AppFootnote: UILabel {\n    \n}</pre>\n<p><em>AppButton.swift:</em></p>\n<pre class=\"lang:swift decode:true\">class AppButton: UIButton {\n    \n}\n\nclass AppDangerButton: UIButton {\n    \n}</pre>\n<p><em>AppSwitch.swift:</em></p>\n<pre class=\"lang:swift decode:true \">class AppSwitch: UISwitch {\n    \n}</pre>\n<p><em>AppView.swift:</em></p>\n<pre class=\"lang:swift decode:true\">class AppView: UIView {\n    \n}\n\nclass AppSeparator: UIView {\n    \n}</pre>\n<p>In our storyboard, we will now use these custom classes:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class-500x281.png\" alt=\"\" width=\"500\" height=\"281\" class=\"aligncenter size-medium wp-image-41382\" srcset=\"https://basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class-500x281.png 500w, https://basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class-768x432.png 768w, https://basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class.png 854w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>However, we will not change colors in the storyboard.. leave them all on the defaults! Nor will we style and theme the custom controls in the <code>awakeFromNib()</code> event!</p>\n<p>Instead we will style our controls like this:</p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance().textColor = .red\nAppSubhead.appearance().textColor = .purple\nAppFootnote.appearance().textColor = .orange\n\nAppButton.appearance().setTitleColor(.green, for: .normal)\nAppButton.appearance().borderColor = .green\nAppButton.appearance().borderWidth = 1\nAppButton.appearance().cornerRadius = 3\n</pre>\n<p>This should take place in the <code>AppDelegate.willFinishLaunchingWithOptions</code> event so it can be ready before any controls are loaded into your app. You can call the <code>UIAppearance</code>\u00a0proxy later to change your styles, but it will only apply to newly added controls to the window. All existing controls need to be removed and added back to have the new styles take effect (yes more quirks, but I have a helper below I will mention).</p>\n<h2>The Theme Protocol</h2>\n<p>We need swappable themes for our app right? Even if you only have one theme, designing it in such a way will allow you to maintain the styles much more easily and add different themes later.</p>\n<p>Here&#8217;s a protocol for the themes we can use:</p>\n<pre class=\"lang:swift decode:true \">protocol Theme {\n    var tint: UIColor { get }\n    var secondaryTint: UIColor { get }\n    \n    var backgroundColor: UIColor { get }\n    var separatorColor: UIColor { get }\n    var selectionColor: UIColor { get }\n    \n    var labelColor: UIColor { get }\n    var secondaryLabelColor: UIColor { get }\n    var subtleLabelColor: UIColor { get }\n    \n    var barStyle: UIBarStyle { get }\n}</pre>\n<p>Then we can extend the protocol to change the appearance for controls using the above properties which themes will conform to. The extension can look something like:</p>\n<pre class=\"lang:swift decode:true\">extension Theme {\n    \n    func apply(for application: UIApplication) {\n        application.keyWindow?.tintColor = tint\n        \n        UITabBar.appearance().barStyle = barStyle\n        \n        UINavigationBar.appearance().barStyle = barStyle\n        UINavigationBar.appearance().tintColor = tint\n        UINavigationBar.appearance().titleTextAttributes = [\n            .foregroundColor: labelColor\n        ]\n        \n        if #available(iOS 11.0, *) {\n            UINavigationBar.appearance().largeTitleTextAttributes = [\n                .foregroundColor: labelColor\n            ]\n        }\n        \n        UICollectionView.appearance().backgroundColor = backgroundColor\n        UITableView.appearance().backgroundColor = backgroundColor\n        UITableView.appearance().separatorColor = separatorColor\n        UITableViewCell.appearance().backgroundColor = .clear\n        UITableViewCell.appearance().selectionColor = selectionColor\n        \n        UIView.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .backgroundColor = selectionColor\n        \n        UILabel.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .textColor = secondaryLabelColor\n        \n        AppLabel.appearance().textColor = labelColor\n        AppSubhead.appearance().textColor = secondaryLabelColor\n        AppFootnote.appearance().textColor = subtleLabelColor\n        \n        AppButton.appearance().borderColor = tint\n        AppButton.appearance().setTitleColor(tint, for: .normal)\n        AppButton.appearance().borderWidth = 1\n        AppButton.appearance().cornerRadius = 3\n        \n        AppDangerButton.appearance().borderWidth = 0\n        AppDangerButton.appearance().setTitleColor(labelColor, for: .normal)\n        AppDangerButton.appearance().backgroundColor = tint\n        \n        AppSwitch.appearance().tintColor = tint\n        \n        AppView.appearance().backgroundColor = backgroundColor\n        AppSeparator.appearance().backgroundColor = separatorColor\n        AppSeparator.appearance().alpha = 0.5\n    }\n}</pre>\n<p>And the themes that conform would only have to fill in the property values:</p>\n<pre class=\"lang:swift decode:true\">struct DarkTheme: Theme {\n    let tint: UIColor = .yellow\n    let secondaryTint: UIColor = .green\n    \n    let backgroundColor: UIColor = .black\n    let separatorColor: UIColor = .lightGray\n    let selectionColor: UIColor = .init(red: 38/255, green: 38/255, blue: 40/255, alpha: 1)\n    \n    let labelColor: UIColor = .white\n    let secondaryLabelColor: UIColor = .lightGray\n    let subtleLabelColor: UIColor = .darkGray\n    \n    let barStyle: UIBarStyle = .black\n}</pre>\n<p>Here&#8217;s what another theme would look like:</p>\n<pre class=\"lang:swift decode:true\">struct LightTheme: Theme {\n    let tint: UIColor = .blue\n    let secondaryTint: UIColor = .orange\n    \n    let backgroundColor: UIColor = .white\n    let separatorColor: UIColor = .lightGray\n    let selectionColor: UIColor = .init(red: 236/255, green: 236/255, blue: 236/255, alpha: 1)\n    \n    let labelColor: UIColor = .black\n    let secondaryLabelColor: UIColor = .darkGray\n    let subtleLabelColor: UIColor = .lightGray\n    \n    let barStyle: UIBarStyle = .default\n}</pre>\n<p>Finally you call the theme early in the app lifecycle:</p>\n<pre class=\"lang:swift decode:true \">@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    private let theme = DarkTheme()\n    \n    var window: UIWindow?\n\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -&gt; Bool {\n        theme.apply(for: application)\n        return true\n    }\n}</pre>\n<p>There you have it &#8211; native, simple theming for your iOS app.. no dependency, magic, or singleton!</p>\n<h2>Extending Themes</h2>\n<p>What if one of your custom themes wants to add extra styling? Implementing the <code>func apply(for application: UIApplication)</code> on the theme will wipe out existing logic which is not what we want, so instead I can add a\u00a0<code>func extend()</code>\u00a0to the protocol and call it within the <code>apply(for:)</code>\u00a0extension:</p>\n<pre class=\"lang:swift decode:true \">protocol Theme {\n    ...\n    func apply(for application: UIApplication)\n    func extend()\n}\n\nextension Theme {\n    \n    func apply(for application: UIApplication) {\n        ...\n        extend()\n    }\n    \n    func extend() {\n        // Optionally extend theme\n    }\n}</pre>\n<p>You see how <code>apply(for:)</code>\u00a0calls <code>extend()</code>\u00a0right in the protocol extension? Now the themes that conform can simply put their extended styling logic in <code>extend()</code>:</p>\n<pre class=\"lang:swift decode:true \">struct LightTheme: Theme {\n    ...\n}\n\nextension LightTheme {\n    \n    func extend() {\n        let proxy1 = UIImageView.appearance(whenContainedInInstancesOf: [UITableViewCell.self])\n        proxy1.borderColor = separatorColor\n        proxy1.borderWidth = 1\n        \n        let proxy2 = UIImageView.appearance(whenContainedInInstancesOf: [UIButton.self, UITableViewCell.self])\n        proxy2.borderWidth = 0\n    }\n}</pre>\n<h2>Changing Themes</h2>\n<p>Another reason why most people abandon <code>UIAppearance</code>\u00a0is you can&#8217;t change styles for existing controls that are already loaded. Apple makes it clear in the <a href=\"https://developer.apple.com/documentation/uikit/uiappearance\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>:</p>\n<blockquote><p>iOS applies appearance changes when a view enters a window, it doesn\u2019t change the appearance of a view that\u2019s already in a window. To change the appearance of a view that\u2019s currently in a window, remove the view from the view hierarchy and then put it back.</p></blockquote>\n<p>It&#8217;s pretty ridiculous that every single control has to be removed and added again to realize the new styles. After changing <code>UIAppearance</code>\u00a0values, you have to traverse through the entire\u00a0<code>UIWindow</code>\u00a0hierarchy and remove/add \u00a0controls:</p>\n<pre class=\"lang:swift decode:true \">UIApplication.shared.windows.forEach { window in\n    window.subviews.forEach { view in\n        view.removeFromSuperview()\n        window.addSubview(view)\n    }\n}\n</pre>\n<p>It makes my stomach turn, but I guess users shouldn&#8217;t be changing themes often &#8211; plus it&#8217;s still native theming right?</p>\n<p>Take it one step further and turn it into an extension:</p>\n<pre class=\"lang:swift decode:true\">public extension UIWindow {\n    \n    /// Unload all views and add back.\n    /// Useful for applying `UIAppearance` changes to existing views.\n    func reload() {\n        subviews.forEach { view in\n            view.removeFromSuperview()\n            addSubview(view)\n        }\n    }\n}\n\npublic extension Array where Element == UIWindow {\n    \n    /// Unload all views for each `UIWindow` and add back.\n    /// Useful for applying `UIAppearance` changes to existing views.\n    func reload() {\n        forEach { $0.reload() }\n    }\n}</pre>\n<p>Now in your original <code>Theme</code>\u00a0protocol, you can abstract it away:</p>\n<pre class=\"lang:swift decode:true\">protocol Theme {\n    ...\n}\n\nextension Theme {\n    \n    func apply(for application: UIApplication) {\n        ...\n        \n        // Ensure existing views render with new theme\n        application.windows.reload()\n    }</pre>\n<p>Note that the first time the theme gets applied in <code>AppDelegate.willFinishLaunchingWithOptions</code>, the \u00a0<code>window</code>\u00a0object won&#8217;t have any subviews in it so it will just be ignored. The <code>reload</code>\u00a0will only run if called after <code>AppDelegate.willFinishLaunchingWithOptions</code>.</p>\n<h2>Beyond Colors</h2>\n<p>So far I&#8217;ve only emphasized colors, but you can style fonts with <code>UIAppearance</code>, but I prefer to only use the built-in ones in storyboard because it respects dynamic font sizes. If your designer insists, you&#8217;ll want to support accessibility which is a whole other topic.</p>\n<p>But did you know you can use <code>UIAppearance</code>\u00a0on just about any property? You can even change text properties for all <code>UILabel</code>\u00a0controls!\u00a0Of course this would be obnoxious to do, but it&#8217;s possible:</p>\n<pre class=\"lang:swift decode:true \">UILabel.appearance().text = \"Hello World!\"</pre>\n<p>You could, however, add your own custom properties and set them via\u00a0<code>UIAppearance</code>\u00a0as well! Let&#8217;s take the selected highlight color for <code>UITableViewCell</code>. This is not a native property from <code>UIKit</code>\u00a0unfortunately, so you&#8217;d have to do something like this:</p>\n<pre class=\"lang:swift decode:true \">let selectedView = UIView()\nselectedView.backgroundColor = .lightGray\n\nmyTableViewCell.selectedBackgroundView = selectedView</pre>\n<p>You could take it one step further and turn it into an extension:</p>\n<pre class=\"lang:swift decode:true \">extension UITableViewCell {\n    \n    /// The color of the cell when it is selected.\n    var selectionColor: UIColor? {\n        get { return selectedBackgroundView?.backgroundColor }\n        set {\n            guard selectionStyle != .none else { return }\n            selectedBackgroundView = UIView().with {\n                $0.backgroundColor = newValue\n            }\n        }\n    }\n}</pre>\n<p>When you try to update this property via <code>UIAppearance</code>, you&#8217;ll notice it doesn&#8217;t do anything. To expose your custom properties to <code>UIAppearance</code>, you have to add the <code>dynamic</code>\u00a0keyword to the property to\u00a0force the <em>Swift</em> compiler to use an\u00a0<em>Objective-C</em> message that <code>UIAppearance</code> relies on:</p>\n<pre class=\"lang:swift decode:true \">extension UITableViewCell {\n    \n    /// The color of the cell when it is selected.\n    @objc dynamic var selectionColor: UIColor? {\n        get { return selectedBackgroundView?.backgroundColor }\n        set {\n            guard selectionStyle != .none else { return }\n            selectedBackgroundView = UIView().with {\n                $0.backgroundColor = newValue\n            }\n        }\n    }\n}</pre>\n<p>Now you can do this:</p>\n<pre class=\"lang:swift decode:true \">UITableViewCell.appearance().selectionColor = .init(red: 38/255, green: 38/255, blue: 40/255, alpha: 1)</pre>\n<p>At this point, we got everything we need.</p>\n<h2>Demo Time!</h2>\n<p>I put together a sample project with a segmented control to switch between themes:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-500x354.png\" alt=\"\" width=\"500\" height=\"354\" class=\"aligncenter size-medium wp-image-41397\" srcset=\"https://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-500x354.png 500w, https://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-768x544.png 768w, https://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-1024x725.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>The <code>Theme</code>\u00a0protocol that does the heavy lifting looks like this:</p>\n<pre class=\"lang:swift decode:true \">protocol Theme {\n    var tint: UIColor { get }\n    var secondaryTint: UIColor { get }\n    \n    var backgroundColor: UIColor { get }\n    var separatorColor: UIColor { get }\n    var selectionColor: UIColor { get }\n    \n    var labelColor: UIColor { get }\n    var secondaryLabelColor: UIColor { get }\n    var subtleLabelColor: UIColor { get }\n    \n    var barStyle: UIBarStyle { get }\n    \n    func apply(for application: UIApplication)\n    func extend()\n}\n\nextension Theme {\n    \n    func apply(for application: UIApplication) {\n        application.keyWindow?.tintColor = tint\n        \n        UITabBar.appearance().with {\n            $0.barStyle = barStyle\n            $0.tintColor = tint\n        }\n        \n        UINavigationBar.appearance().with {\n            $0.barStyle = barStyle\n            $0.tintColor = tint\n            $0.titleTextAttributes = [\n                .foregroundColor: labelColor\n            ]\n            \n            if #available(iOS 11.0, *) {\n                $0.largeTitleTextAttributes = [\n                    .foregroundColor: labelColor\n                ]\n            }\n        }\n        \n        UICollectionView.appearance().backgroundColor = backgroundColor\n        \n        UITableView.appearance().with {\n            $0.backgroundColor = backgroundColor\n            $0.separatorColor = separatorColor\n        }\n        \n        UITableViewCell.appearance().with {\n            $0.backgroundColor = .clear\n            $0.selectionColor = selectionColor\n        }\n        \n        UIView.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .backgroundColor = selectionColor\n        \n        UILabel.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .textColor = secondaryLabelColor\n        \n        AppLabel.appearance().textColor = labelColor\n        AppHeadline.appearance().textColor = secondaryTint\n        AppSubhead.appearance().textColor = secondaryLabelColor\n        AppFootnote.appearance().textColor = subtleLabelColor\n        \n        AppButton.appearance().with {\n            $0.setTitleColor(tint, for: .normal)\n            $0.borderColor = tint\n            $0.borderWidth = 1\n            $0.cornerRadius = 3\n        }\n        \n        AppDangerButton.appearance().with {\n            $0.setTitleColor(backgroundColor, for: .normal)\n            $0.backgroundColor = tint\n            $0.cornerRadius = 3\n        }\n        \n        AppSwitch.appearance().with {\n            $0.tintColor = tint\n            $0.onTintColor = tint\n        }\n        \n        AppStepper.appearance().tintColor = tint\n        \n        AppSlider.appearance().tintColor = tint\n        \n        AppSegmentedControl.appearance().tintColor = tint\n        \n        AppView.appearance().backgroundColor = backgroundColor\n        \n        AppSeparator.appearance().with {\n            $0.backgroundColor = separatorColor\n            $0.alpha = 0.5\n        }\n        \n        AppView.appearance(whenContainedInInstancesOf: [AppView.self]).with {\n            $0.backgroundColor = selectionColor\n            $0.cornerRadius = 10\n        }\n        \n        // Style differently when inside a special container\n        \n        AppLabel.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = subtleLabelColor\n        AppHeadline.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = secondaryLabelColor\n        AppSubhead.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = secondaryTint\n        AppFootnote.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = labelColor\n        \n        AppButton.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).with {\n            $0.setTitleColor(labelColor, for: .normal)\n            $0.borderColor = labelColor\n        }\n        \n        AppDangerButton.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).with {\n            $0.setTitleColor(subtleLabelColor, for: .normal)\n            $0.backgroundColor = labelColor\n        }\n        \n        AppSwitch.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).with {\n            $0.tintColor = secondaryTint\n            $0.onTintColor = secondaryTint\n        }\n        \n        extend()\n        \n        // Ensure existing views render with new theme\n        // https://developer.apple.com/documentation/uikit/uiappearance\n        application.windows.reload()\n    }\n    \n    func extend() {\n        // Optionally extend theme\n    }\n}</pre>\n<p>Then you can add as many themes as you want:</p>\n<pre class=\"lang:swift decode:true\">struct OceanTheme: Theme {\n    let tint: UIColor = .blue\n    let secondaryTint: UIColor = .orange\n    \n    let backgroundColor: UIColor = .cyan\n    let separatorColor: UIColor = .lightGray\n    let selectionColor: UIColor = .init(red: 38/255, green: 38/255, blue: 40/255, alpha: 1)\n    \n    let labelColor: UIColor = .magenta\n    let secondaryLabelColor: UIColor = .lightGray\n    let subtleLabelColor: UIColor = .darkGray\n    \n    let barStyle: UIBarStyle = .default\n}</pre>\n<p>Finally in my segmented control change event, I can simply change themes like this:</p>\n<pre class=\"lang:swift decode:true \">@IBAction func themeSegmentedControlChanged(_ sender: UISegmentedControl) {\n    let theme: Theme\n        \n    switch sender.selectedSegmentIndex {\n    case 1: theme = LightTheme()\n    case 2: theme = OceanTheme()\n    default: theme = DarkTheme()\n    }\n        \n    theme.apply(for: UIApplication.shared)\n}</pre>\n<p>The complete source code can be\u00a0<a href=\"https://github.com/basememara/ThemeKit\" target=\"_blank\" rel=\"noopener noreferrer\">downloaded and run here</a>.</p>\n<h2>Conclusion</h2>\n<p><code>UIAppearance</code>\u00a0has been around since iOS 5, but it is often overlooked and underestimated. Apple uses this framework to style its own apps, such as <em>Find Friends</em> and many other apps. Sticking with native functionality is always a good idea and hopefully I&#8217;ve given you a newfound appreciation for the built-in theming framework.</p>\n<p>To learn more about <code>UIAppearance</code>, check out these resources:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2011/114/\" target=\"_blank\" rel=\"noopener noreferrer\">WWDC 2011:\u00a0Customizing the Appearance of UIKit Controls</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2012/216/\" target=\"_blank\" rel=\"noopener noreferrer\">WWDC 2012:\u00a0Advanced Appearance Customization on iOS</a></li>\n<li><a href=\"https://spin.atomicobject.com/2017/08/16/uiappearance-container-hierarchies/\" target=\"_blank\" rel=\"noopener noreferrer\">Understanding UIAppearance Container Hierarchies</a></li>\n</ul>\n<p><em><strong>Happy Coding!!</strong></em></p>\n<p>[contentblock id=4 img=gcb.png]</p>\n",
        "link": "https://basememara.com/protocol-oriented-themes-for-ios-apps/",
        "comment_count": 9,
        "author": 2,
        "featured_media": 41397,
        "terms": [
          53,
          62,
          55,
          81
        ],
        "meta": null,
        "created": "2018-09-29T17:12:15",
        "modified": "2020-05-20T00:12:19"
      }
    ],
    "authors": [
      {
        "id": 2,
        "name": "Basem Emara",
        "link": "https://basememara.com",
        "avatar": "https://secure.gravatar.com/avatar/8def0d36f56d3e6720a44e41bf6f9a71?s=96&d=mm&r=g",
        "description": "Basem is a mobile and software IT professional with over 15 years of experience as an architect, developer, and consultant for dozens of projects that span over various industries for Fortune 500 enterprises, government agencies, and startups. In 2014, Swift was released and Basem brought his vast knowledge and experiences to help pioneer the language to build scalable enterprise iOS &amp; watchOS apps, later mentoring teams worldwide.",
        "created": "2015-02-02T03:39:52",
        "modified": "2020-03-19T04:50:01"
      }
    ],
    "media": [
      {
        "id": 41397,
        "link": "https://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot.png",
        "width": 2194,
        "height": 1554,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-500x354.png",
        "thumbnail_width": 500,
        "thumbnail_height": 354
      },
      {
        "id": 41626,
        "link": "https://basememara.com/wp-content/uploads/2019/10/locks-1.jpeg",
        "width": 500,
        "height": 225,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2019/10/locks-1-500x225.jpeg",
        "thumbnail_width": 500,
        "thumbnail_height": 225
      },
      {
        "id": 5281,
        "link": "https://basememara.com/wp-content/uploads/2017/02/gcd_barrier.png",
        "width": 1907,
        "height": 619,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2017/02/gcd_barrier-500x162.png",
        "thumbnail_width": 500,
        "thumbnail_height": 162
      },
      {
        "id": 554,
        "link": "https://basememara.com/wp-content/uploads/2015/08/Internet1.jpg",
        "width": 1600,
        "height": 1288,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2015/08/Internet1-500x403.jpg",
        "thumbnail_width": 500,
        "thumbnail_height": 403
      },
      {
        "id": 41346,
        "link": "https://basememara.com/wp-content/uploads/2018/04/Clean-Architecture-Cycle-2.png",
        "width": 500,
        "height": 518,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2018/04/Clean-Architecture-Cycle-2-500x518.png",
        "thumbnail_width": 500,
        "thumbnail_height": 518
      },
      {
        "id": 41648,
        "link": "https://basememara.com/wp-content/uploads/2019/11/SwiftUI-Architecture.png",
        "width": 1151,
        "height": 1520,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2019/11/SwiftUI-Architecture-500x660.png",
        "thumbnail_width": 500,
        "thumbnail_height": 660
      },
      {
        "id": 675,
        "link": "https://basememara.com/wp-content/uploads/2016/03/CapturFiles_330.png",
        "width": 1218,
        "height": 512,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2016/03/CapturFiles_330-500x210.png",
        "thumbnail_width": 500,
        "thumbnail_height": 210
      },
      {
        "id": 777,
        "link": "https://basememara.com/wp-content/uploads/2016/05/CapturFiles_349.png",
        "width": 1428,
        "height": 1060,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2016/05/CapturFiles_349-500x371.png",
        "thumbnail_width": 500,
        "thumbnail_height": 371
      },
      {
        "id": 1739,
        "link": "https://basememara.com/wp-content/uploads/2017/01/CapturFiles_125.png",
        "width": 391,
        "height": 508,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2017/01/CapturFiles_125.png",
        "thumbnail_width": 391,
        "thumbnail_height": 508
      },
      {
        "id": 41545,
        "link": "https://basememara.com/wp-content/uploads/2019/09/image.png",
        "width": 1560,
        "height": 1168,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2019/09/image-500x374.png",
        "thumbnail_width": 500,
        "thumbnail_height": 374
      },
      {
        "id": 41287,
        "link": "https://basememara.com/wp-content/uploads/2018/04/swift-dependency-injection.jpg",
        "width": 3569,
        "height": 2899,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2018/04/swift-dependency-injection-500x406.jpg",
        "thumbnail_width": 500,
        "thumbnail_height": 406
      },
      {
        "id": 41514,
        "link": "https://basememara.com/wp-content/uploads/2019/08/wwdc2019.jpg",
        "width": 753,
        "height": 595,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2019/08/wwdc2019-500x395.jpg",
        "thumbnail_width": 500,
        "thumbnail_height": 395
      },
      {
        "id": 20745,
        "link": "https://basememara.com/wp-content/uploads/2017/07/localization.jpg",
        "width": 300,
        "height": 284,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2017/07/localization.jpg",
        "thumbnail_width": 300,
        "thumbnail_height": 284
      },
      {
        "id": 41258,
        "link": "https://basememara.com/wp-content/uploads/2018/04/AppDelegate-Responsibilties.png",
        "width": 414,
        "height": 306,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2018/04/AppDelegate-Responsibilties.png",
        "thumbnail_width": 414,
        "thumbnail_height": 306
      },
      {
        "id": 166,
        "link": "https://basememara.com/wp-content/uploads/2015/03/CapturFiles_35.png",
        "width": 438,
        "height": 162,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2015/03/CapturFiles_35-300x111.png",
        "thumbnail_width": 300,
        "thumbnail_height": 111
      },
      {
        "id": 161,
        "link": "https://basememara.com/wp-content/uploads/2015/03/kendo-mobile-geo-170x300.png",
        "width": 170,
        "height": 300,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2015/03/kendo-mobile-geo-170x300-170x300.png",
        "thumbnail_width": 170,
        "thumbnail_height": 300
      },
      {
        "id": 141,
        "link": "https://basememara.com/wp-content/uploads/2015/03/kendo-media-player-169x300.png",
        "width": 169,
        "height": 300,
        "thumbnail_link": "https://basememara.com/wp-content/uploads/2015/03/kendo-media-player-169x300-169x300.png",
        "thumbnail_width": 169,
        "thumbnail_height": 300
      }
    ],
    "terms": [
      {
        "id": 53,
        "parent": 0,
        "name": "ios",
        "slug": "ios",
        "taxonomy": "post_tag",
        "count": 19
      },
      {
        "id": 62,
        "parent": 0,
        "name": "protocol-oriented-programming",
        "slug": "protocol-oriented-programming",
        "taxonomy": "post_tag",
        "count": 9
      },
      {
        "id": 55,
        "parent": 0,
        "name": "Swift",
        "slug": "swift",
        "taxonomy": "category",
        "count": 34
      },
      {
        "id": 81,
        "parent": 0,
        "name": "uikit",
        "slug": "uikit",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 88,
        "parent": 0,
        "name": "concurrency",
        "slug": "concurrency",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 70,
        "parent": 0,
        "name": "gcd",
        "slug": "gcd",
        "taxonomy": "post_tag",
        "count": 4
      },
      {
        "id": 50,
        "parent": 0,
        "name": "swift",
        "slug": "swift",
        "taxonomy": "post_tag",
        "count": 39
      },
      {
        "id": 73,
        "parent": 0,
        "name": "threads",
        "slug": "threads",
        "taxonomy": "post_tag",
        "count": 5
      },
      {
        "id": 58,
        "parent": 0,
        "name": "universal-links",
        "slug": "universal-links",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 79,
        "parent": 0,
        "name": "clean-architecture",
        "slug": "clean-architecture",
        "taxonomy": "post_tag",
        "count": 3
      },
      {
        "id": 14,
        "parent": 0,
        "name": "mvvm",
        "slug": "mvvm",
        "taxonomy": "post_tag",
        "count": 7
      },
      {
        "id": 86,
        "parent": 0,
        "name": "architecture",
        "slug": "architecture",
        "taxonomy": "post_tag",
        "count": 2
      },
      {
        "id": 89,
        "parent": 0,
        "name": "redux",
        "slug": "redux",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 82,
        "parent": 0,
        "name": "swiftui",
        "slug": "swiftui",
        "taxonomy": "post_tag",
        "count": 2
      },
      {
        "id": 61,
        "parent": 0,
        "name": "carthage",
        "slug": "carthage",
        "taxonomy": "post_tag",
        "count": 4
      },
      {
        "id": 52,
        "parent": 0,
        "name": "cocoapods",
        "slug": "cocoapods",
        "taxonomy": "post_tag",
        "count": 4
      },
      {
        "id": 64,
        "parent": 0,
        "name": "Featured",
        "slug": "featured",
        "taxonomy": "category",
        "count": 6
      },
      {
        "id": 47,
        "parent": 0,
        "name": "xcode",
        "slug": "xcode",
        "taxonomy": "post_tag",
        "count": 18
      },
      {
        "id": 66,
        "parent": 0,
        "name": "memory",
        "slug": "memory",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 72,
        "parent": 0,
        "name": "wordpress",
        "slug": "wordpress",
        "taxonomy": "post_tag",
        "count": 2
      },
      {
        "id": 85,
        "parent": 0,
        "name": "dependency-injection",
        "slug": "dependency-injection",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 87,
        "parent": 0,
        "name": "property-wrapper",
        "slug": "property-wrapper",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 83,
        "parent": 0,
        "name": "combine",
        "slug": "combine",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 84,
        "parent": 0,
        "name": "reactive-programming",
        "slug": "reactive-programming",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 77,
        "parent": 0,
        "name": "localization",
        "slug": "localization",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 56,
        "parent": 0,
        "name": "android",
        "slug": "android",
        "taxonomy": "post_tag",
        "count": 5
      },
      {
        "id": 26,
        "parent": 0,
        "name": "geolocation",
        "slug": "geolocation",
        "taxonomy": "post_tag",
        "count": 4
      },
      {
        "id": 12,
        "parent": 0,
        "name": "google-map",
        "slug": "google-map",
        "taxonomy": "post_tag",
        "count": 3
      },
      {
        "id": 4,
        "parent": 0,
        "name": "Mobile",
        "slug": "mobile",
        "taxonomy": "category",
        "count": 36
      }
    ]
  }
  
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  JSON Pretty Print - Privacy Policy
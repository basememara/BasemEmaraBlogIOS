{"posts":[{"id":5251,"title":"Creating Thread-Safe Arrays in Swift","slug":"creating-thread-safe-arrays-in-swift","type":"post","excerpt":"Thread-safe resources in Swift can be achieved with Grand Central Dispatch. Using a concurrent queue and the barrier flag, reads can occur in parallel while writes are given mutual exclusivity for safety and optimization.","content":"<p>Thread-safety is a tricky territory, especially in languages like Swift where there is no built-in concurrency support. Instead, we have to go through <a href=\"https:\/\/developer.apple.com\/reference\/dispatch\" target=\"_blank\" rel=\"noopener noreferrer\">Grand Central Dispatch<\/a>. And where we\u00a0get concurrency is where we can find\u00a0thread-safety, so let&#8217;s\u00a0repurpose queues for achieving thread-safety.<\/p>\n<h2>Serial Queue Method<\/h2>\n<p>By\u00a0leveraging serial queues, we can enforce\u00a0mutual exclusion on\u00a0a\u00a0resource. With a serial queue, only one process can run at a time,\u00a0so if many processes are stuffed in a queue to modify the array, the serial queue will only let one process execute at a time; the array is safe from concurrent processes by design.<\/p>\n<pre class=\"lang:swift decode:true\">let queue = DispatchQueue(label: \"MyArrayQueue\")\r\n\r\nqueue.async() {\r\n  \/\/ Manipulate the array here\r\n}\r\n\r\nqueue.sync() {\r\n  \/\/ Read array here\r\n}\r\n<\/pre>\n<p>Dispatch queues are\u00a0serial by default. We use this queue&#8217;s async method to write to the array\u00a0and not worry about the result; we asynchronously set it and forget it.\u00a0When reading from the array, we can use the sync method and get the results instantly.<\/p>\n<p>We can still do better though. The reads are not optimized because multiple read requests have to wait for each other in a queue. However, reads should be able to happen concurrently, as long as there isn&#8217;t a write happening at the same time.<\/p>\n<h2>Concurrent Queue Method<\/h2>\n<p>This technique is more elegant and uses a\u00a0<a href=\"https:\/\/en.wikipedia.org\/wiki\/Readers\u2013writer_lock\" target=\"_blank\" rel=\"noopener noreferrer\">shared exclusion lock<\/a>\u00a0on the array. We will still use Grand Central Dispatch, but this time with a concurrent queue instead of a serial one.\u00a0That might work for concurrent reads, but we must disallow all concurrency when\u00a0writing. This can be achieved with the <code>barrier<\/code>\u00a0flag for the dispatch queue:<\/p>\n<pre class=\"lang:swift decode:true \">let queue = DispatchQueue(label: \"MyArrayQueue\", attributes: .concurrent)\r\n\r\nqueue.async(flags: .barrier) {\r\n  \/\/ Mutate array here\r\n}\r\n\r\nqueue.sync() {\r\n  \/\/ Read array here\r\n}<\/pre>\n<p>Notice the <code>async<\/code>\u00a0method has the <code>barrier<\/code>\u00a0flag set for writes. This means no other blocks may be scheduled from the queue while the async\/barrier process\u00a0runs. We continue to use the\u00a0<code>sync<\/code>\u00a0method for reads, but all readers will\u00a0run in parallel this time because of the concurrent queue attribute.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/02\/gcd_barrier-500x162.png\" alt=\"\" width=\"500\" height=\"162\" class=\"aligncenter size-medium wp-image-5281\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/02\/gcd_barrier-500x162.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/02\/gcd_barrier-768x249.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/02\/gcd_barrier-1024x332.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Readers will still be blocked when a <code>barrier<\/code>\u00a0process is running though. Even\u00a0if there are several\u00a0reader blocks already running in parallel, the <code>barrier<\/code> process will wait for all readers to finish before beginning the\u00a0write. Once the\u00a0<code>barrier<\/code> process\u00a0is\u00a0complete, then the readers behind it can run in parallel again. Sweet! \ud83d\ude42<\/p>\n<h2>Where&#8217;s the Proof?<\/h2>\n<p>Concurrency is a difficult thing to test since it is non-deterministic, so how do we test if this even works?<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/03\/60850702-500x375.jpg\" width=\"350\" height=\"263\" class=\"aligncenter wp-image-5419\" \/><\/p>\n<p>Here&#8217;s\u00a0a little script that shows thread-safety issues when modifying arrays concurrently. What we can do is modify the array in flight and create a race condition:<\/p>\n<pre class=\"lang:swift decode:true\">var array = [Int]()\r\n\r\nDispatchQueue.concurrentPerform(iterations: 1000) { index in\r\n    let last = array.last ?? 0\r\n    array.append(last + 1)\r\n}<\/pre>\n<p>This is launching 1000 parallel processes to modify the same array. It is taking the last element, incrementing it by one, and appending to the array.<\/p>\n<p>The race condition occurs during the\u00a0<code>append<\/code>\u00a0statement. Swift uses a copy-to-write technique for\u00a0value types\u00a0as soon as it\u00a0starts mutating it.\u00a0During the copy-to-write process,\u00a0the array\u00a0could have been\u00a0changed\u00a0by another parallel task\u00a0in that\u00a0microsecond.\u00a0So work would be done on an older snapshot of the array which results in data loss.<\/p>\n<p>If we were to run and print several\u00a0results of this,\u00a0it would look random like this:<\/p>\n<pre class=\"lang:js decode:true\">Unsafe loop count: 989.\r\nUnsafe loop count: 992.\r\nUnsafe loop count: 986.\r\nUnsafe loop count: 998.<\/pre>\n<p>This is where the problem is:\u00a0it should always end up with a 1000 elements!<\/p>\n<h2>Where&#8217;s the Goods?<\/h2>\n<p>Let&#8217;s encapsulate everything we learned\u00a0into a nifty, thread-safe array called `SynchronizedArray`. That way, we can use it in our code where we need\u00a0a shared array accessible by multiple threads. Here it goes:<\/p>\n<pre class=\"lang:swift decode:true \">\/\/\/ A thread-safe array.\r\npublic class SynchronizedArray&lt;Element&gt; {\r\n    fileprivate let queue = DispatchQueue(label: \"io.zamzam.ZamzamKit.SynchronizedArray\", attributes: .concurrent)\r\n    fileprivate var array = [Element]()\r\n}\r\n\r\n\/\/ MARK: - Properties\r\npublic extension SynchronizedArray {\r\n\r\n    \/\/\/ The first element of the collection.\r\n    var first: Element? {\r\n        var result: Element?\r\n        queue.sync { result = self.array.first }\r\n        return result\r\n    }\r\n\r\n    \/\/\/ The last element of the collection.\r\n    var last: Element? {\r\n        var result: Element?\r\n        queue.sync { result = self.array.last }\r\n        return result\r\n    }\r\n\r\n    \/\/\/ The number of elements in the array.\r\n    var count: Int {\r\n        var result = 0\r\n        queue.sync { result = self.array.count }\r\n        return result\r\n    }\r\n\r\n    \/\/\/ A Boolean value indicating whether the collection is empty.\r\n    var isEmpty: Bool {\r\n        var result = false\r\n        queue.sync { result = self.array.isEmpty }\r\n        return result\r\n    }\r\n\r\n    \/\/\/ A textual representation of the array and its elements.\r\n    var description: String {\r\n        var result = \"\"\r\n        queue.sync { result = self.array.description }\r\n        return result\r\n    }\r\n}\r\n\r\n\/\/ MARK: - Immutable\r\npublic extension SynchronizedArray {\r\n    \/\/\/ Returns the first element of the sequence that satisfies the given predicate or nil if no such element is found.\r\n    \/\/\/\r\n    \/\/\/ - Parameter predicate: A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\r\n    \/\/\/ - Returns: The first match or nil if there was no match.\r\n    func first(where predicate: (Element) -&gt; Bool) -&gt; Element? {\r\n        var result: Element?\r\n        queue.sync { result = self.array.first(where: predicate) }\r\n        return result\r\n    }\r\n    \r\n    \/\/\/ Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.\r\n    \/\/\/\r\n    \/\/\/ - Parameter isIncluded: A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\r\n    \/\/\/ - Returns: An array of the elements that includeElement allowed.\r\n    func filter(_ isIncluded: (Element) -&gt; Bool) -&gt; [Element] {\r\n        var result = [Element]()\r\n        queue.sync { result = self.array.filter(isIncluded) }\r\n        return result\r\n    }\r\n    \r\n    \/\/\/ Returns the first index in which an element of the collection satisfies the given predicate.\r\n    \/\/\/\r\n    \/\/\/ - Parameter predicate: A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.\r\n    \/\/\/ - Returns: The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil.\r\n    func index(where predicate: (Element) -&gt; Bool) -&gt; Int? {\r\n        var result: Int?\r\n        queue.sync { result = self.array.index(where: predicate) }\r\n        return result\r\n    }\r\n    \r\n    \/\/\/ Returns the elements of the collection, sorted using the given predicate as the comparison between elements.\r\n    \/\/\/\r\n    \/\/\/ - Parameter areInIncreasingOrder: A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\r\n    \/\/\/ - Returns: A sorted array of the collection\u2019s elements.\r\n    func sorted(by areInIncreasingOrder: (Element, Element) -&gt; Bool) -&gt; [Element] {\r\n        var result = [Element]()\r\n        queue.sync { result = self.array.sorted(by: areInIncreasingOrder) }\r\n        return result\r\n    }\r\n    \r\n    \/\/\/ Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.\r\n    \/\/\/\r\n    \/\/\/ - Parameter transform: A closure that accepts an element of this sequence as its argument and returns an optional value.\r\n    \/\/\/ - Returns: An array of the non-nil results of calling transform with each element of the sequence.\r\n    func flatMap&lt;ElementOfResult&gt;(_ transform: (Element) -&gt; ElementOfResult?) -&gt; [ElementOfResult] {\r\n        var result = [ElementOfResult]()\r\n        queue.sync { result = self.array.flatMap(transform) }\r\n        return result\r\n    }\r\n\r\n    \/\/\/ Calls the given closure on each element in the sequence in the same order as a for-in loop.\r\n    \/\/\/\r\n    \/\/\/ - Parameter body: A closure that takes an element of the sequence as a parameter.\r\n    func forEach(_ body: (Element) -&gt; Void) {\r\n        queue.sync { self.array.forEach(body) }\r\n    }\r\n    \r\n    \/\/\/ Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\r\n    \/\/\/\r\n    \/\/\/ - Parameter predicate: A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\r\n    \/\/\/ - Returns: true if the sequence contains an element that satisfies predicate; otherwise, false.\r\n    func contains(where predicate: (Element) -&gt; Bool) -&gt; Bool {\r\n        var result = false\r\n        queue.sync { result = self.array.contains(where: predicate) }\r\n        return result\r\n    }\r\n}\r\n\r\n\/\/ MARK: - Mutable\r\npublic extension SynchronizedArray {\r\n\r\n    \/\/\/ Adds a new element at the end of the array.\r\n    \/\/\/\r\n    \/\/\/ - Parameter element: The element to append to the array.\r\n    func append( _ element: Element) {\r\n        queue.async(flags: .barrier) {\r\n            self.array.append(element)\r\n        }\r\n    }\r\n\r\n    \/\/\/ Adds a new element at the end of the array.\r\n    \/\/\/\r\n    \/\/\/ - Parameter element: The element to append to the array.\r\n    func append( _ elements: [Element]) {\r\n        queue.async(flags: .barrier) {\r\n            self.array += elements\r\n        }\r\n    }\r\n\r\n    \/\/\/ Inserts a new element at the specified position.\r\n    \/\/\/\r\n    \/\/\/ - Parameters:\r\n    \/\/\/   - element: The new element to insert into the array.\r\n    \/\/\/   - index: The position at which to insert the new element.\r\n    func insert( _ element: Element, at index: Int) {\r\n        queue.async(flags: .barrier) {\r\n            self.array.insert(element, at: index)\r\n        }\r\n    }\r\n\r\n    \/\/\/ Removes and returns the element at the specified position.\r\n    \/\/\/\r\n    \/\/\/ - Parameters:\r\n    \/\/\/   - index: The position of the element to remove.\r\n    \/\/\/   - completion: The handler with the removed element.\r\n    func remove(at index: Int, completion: ((Element) -&gt; Void)? = nil) {\r\n        queue.async(flags: .barrier) {\r\n            let element = self.array.remove(at: index)\r\n            \r\n            DispatchQueue.main.async {\r\n                completion?(element)\r\n            }\r\n        }\r\n    }\r\n    \r\n    \/\/\/ Removes and returns the element at the specified position.\r\n    \/\/\/\r\n    \/\/\/ - Parameters:\r\n    \/\/\/   - predicate: A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\r\n    \/\/\/   - completion: The handler with the removed element.\r\n    func remove(where predicate: @escaping (Element) -&gt; Bool, completion: ((Element) -&gt; Void)? = nil) {\r\n        queue.async(flags: .barrier) {\r\n            guard let index = self.array.index(where: predicate) else { return }\r\n            let element = self.array.remove(at: index)\r\n            \r\n            DispatchQueue.main.async {\r\n                completion?(element)\r\n            }\r\n        }\r\n    }\r\n\r\n    \/\/\/ Removes all elements from the array.\r\n    \/\/\/\r\n    \/\/\/ - Parameter completion: The handler with the removed elements.\r\n    func removeAll(completion: (([Element]) -&gt; Void)? = nil) {\r\n        queue.async(flags: .barrier) {\r\n            let elements = self.array\r\n            self.array.removeAll()\r\n            \r\n            DispatchQueue.main.async {\r\n                completion?(elements)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npublic extension SynchronizedArray {\r\n    \r\n    \/\/\/ Accesses the element at the specified position if it exists.\r\n\t\/\/\/\r\n\t\/\/\/ - Parameter index: The position of the element to access.\r\n\t\/\/\/ - Returns: optional element if it exists.\r\n    subscript(index: Int) -&gt; Element? {\r\n        get {\r\n            var result: Element?\r\n            \r\n            queue.sync {\r\n                guard self.array.startIndex..&lt;self.array.endIndex ~= index else { return }\r\n                result = self.array[index]\r\n            }\r\n            \r\n            return result\r\n        }\r\n        set {\r\n            guard let newValue = newValue else { return }\r\n            \r\n            queue.async(flags: .barrier) {\r\n                self.array[index] = newValue\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\/\/ MARK: - Equatable\r\npublic extension SynchronizedArray where Element: Equatable {\r\n\r\n    \/\/\/ Returns a Boolean value indicating whether the sequence contains the given element.\r\n    \/\/\/\r\n    \/\/\/ - Parameter element: The element to find in the sequence.\r\n    \/\/\/ - Returns: true if the element was found in the sequence; otherwise, false.\r\n    func contains(_ element: Element) -&gt; Bool {\r\n        var result = false\r\n        queue.sync { result = self.array.contains(element) }\r\n        return result\r\n    }\r\n}\r\n\r\n\/\/ MARK: - Infix operators\r\npublic extension SynchronizedArray {\r\n\r\n    static func +=(left: inout SynchronizedArray, right: Element) {\r\n        left.append(right)\r\n    }\r\n\r\n    static func +=(left: inout SynchronizedArray, right: [Element]) {\r\n        left.append(right)\r\n    }\r\n}<\/pre>\n<p>I&#8217;ve declared `SynchronizedArray` to mimic a regular array. In it contains a private queue and array. Several of the array&#8217;s properties and methods have been exposed. Also\u00a0notice the queue is declared as concurrent.<\/p>\n<p>The\u00a0exposed array\u00a0calls that mutate it have been wrapped in the queue&#8217;s async method with the barrier flag, and the reads are wrapped in the queue&#8217;s sync method. This allows concurrent reads to occur, but\u00a0writes to block all requests\u00a0until complete.<\/p>\n<p><em>Note:<\/em>\u00a0we can probably create `SynchronizedDictionary`\u00a0the same way\u00a0too. I also wonder if wrapping lower level API&#8217;s would work, such as making `SynchronizedArray` conform to a <a href=\"https:\/\/developer.apple.com\/reference\/swift\/sequence\" target=\"_blank\" rel=\"noopener noreferrer\">Sequence<\/a> or <a href=\"https:\/\/developer.apple.com\/reference\/swift\/collection\" target=\"_blank\" rel=\"noopener noreferrer\">Collection<\/a>\u00a0protocol.<\/p>\n<p>The tests can now be rewritten to show the comparison between an unsafe and safe array:<\/p>\n<pre class=\"lang:swift decode:true \">import Foundation\r\nimport PlaygroundSupport\r\n\r\n\/\/ Thread-unsafe array\r\ndo {\r\n    var array = [Int]()\r\n    var iterations = 1000\r\n    let start = Date().timeIntervalSince1970\r\n\r\n    DispatchQueue.concurrentPerform(iterations: iterations) { index in\r\n        let last = array.last ?? 0\r\n        array.append(last + 1)\r\n\r\n        DispatchQueue.global().sync {\r\n            iterations -= 1\r\n        \r\n            \/\/ Final loop\r\n            guard iterations &lt;= 0 else { return }\r\n            let message = String(format: \"Unsafe loop took %.3f seconds, count: %d.\",\r\n                Date().timeIntervalSince1970 - start,\r\n                array.count)\r\n            print(message)\r\n        }\r\n    }\r\n}\r\n\r\n\/\/ Thread-safe array\r\ndo {\r\n    var array = SynchronizedArray&lt;Int&gt;()\r\n    var iterations = 1000\r\n    let start = Date().timeIntervalSince1970\r\n\r\n    DispatchQueue.concurrentPerform(iterations: iterations) { index in\r\n        let last = array.last ?? 0\r\n        array.append(last + 1)\r\n\r\n        DispatchQueue.global().sync {\r\n            iterations -= 1\r\n        \r\n            \/\/ Final loop\r\n            guard iterations &lt;= 0 else { return }\r\n            let message = String(format: \"Safe loop took %.3f seconds, count: %d.\",\r\n                Date().timeIntervalSince1970 - start,\r\n                array.count)\r\n            print(message)\r\n        }\r\n    }\r\n}\r\n\r\nPlaygroundPage.current.needsIndefiniteExecution = true<\/pre>\n<p>This should print something like this:<\/p>\n<pre class=\"lang:js decode:true\">Unsafe loop took 1.031 seconds, count: 989.\r\nSafe loop took 1.363 seconds, count: 1000.<\/pre>\n<p>It is unfortunately\u00a030% slower and incurs more memory due to the GCD overhead, but the tradeoff is that it&#8217;s accurate \ud83d\ude09<\/p>\n<p>The full\u00a0<a href=\"https:\/\/gist.github.com\/basememara\/afaae5310a6a6b97bdcdbe4c2fdcd0c6\" target=\"_blank\" rel=\"noopener noreferrer\">Playground gist<\/a> is available for you to try.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/creating-thread-safe-arrays-in-swift\/","comment_count":22,"author":2,"featured_media":5281,"terms":[70,50,55,71,73],"meta":{"_series_part":"5"},"created":"2017-03-01T07:00:33","modified":"2019-05-20T15:04:01"},{"id":41276,"title":"Swifty Protocol-Oriented Dependency Injection","slug":"swift-protocol-oriented-dependency-injection","type":"post","excerpt":"The key to dependency injection is protocols. From there sprouts many variations, flavours, and techniques. Although this is yet another dependency injection\u2122 blog post, I would like to share a pure Swift, battle-tested DI implementation with no outside dependencies or magic. It combines protocol extension and type erasure to give you a solid, flexible dependency injection.","content":"<p>The key to dependency injection is protocols &#8211; from there sprouts many variations, flavours, and techniques. Although this is\u00a0<em>yet another dependency injection\u2122<\/em> blog post, I would like to share a pure Swift, battle-tested DI implementation with no outside dependencies or magic. It combines protocol extension and type erasure to give you a solid, flexible dependency injection that works great with unit test and even frameworks.<\/p>\n<h2>The Dependency Container<\/h2>\n<p>The first thing we must do is come up with a container that will house all our dependencies. This will be referenced later from consumers to grab dependencies they want.<\/p>\n<pre class=\"lang:swift decode:true\">protocol Dependency {\r\n    func resolveService() -&gt; HTTPServiceType\r\n    \r\n    func resolveWorker() -&gt; AuthenticationWorkerType\r\n    func resolveService() -&gt; AuthenticationService\r\n    \r\n    func resolveWorker() -&gt; UsersWorkerType\r\n    func resolveStore() -&gt; UsersStore\r\n    func resolveCache() -&gt; UsersStore\r\n}<\/pre>\n<p>Now that we got the blueprint to our container and its dependency protocols, let&#8217;s implement the concrete dependency instances:<\/p>\n<pre class=\"lang:swift decode:true \">class CoreDependency: Dependency {\r\n    \r\n    func resolveService() -&gt; HTTPServiceType {\r\n        return HTTPService()\r\n    }\r\n    \r\n    func resolveWorker() -&gt; AuthenticationWorkerType {\r\n        return AuthenticationWorker(\r\n            service: resolveService()\r\n        )\r\n    }\r\n    \r\n    func resolveService() -&gt; AuthenticationService {\r\n        return AuthenticationNetworkService(\r\n            httpService: resolveService()\r\n        )\r\n    }\r\n    \r\n    func resolveWorker() -&gt; UsersWorkerType {\r\n        return UsersWorker(\r\n            store: resolveStore(),\r\n            cacheStore: resolveCache()\r\n        )\r\n    }\r\n    \r\n    func resolveStore() -&gt; UsersStore {\r\n        return UsersNetworkStore(\r\n            httpService: resolveService()\r\n        )\r\n    }\r\n    \r\n    func resolveCache() -&gt; UsersStore {\r\n        return UsersCoreDataStore() \/\/..or use UsersRealmStore\r\n    }\r\n}<\/pre>\n<p>This is where the main meat of the dependency injection occurs. The dependency objects implement the protocols so the concrete types are hidden from the caller. This way, the dependency types can be swapped out underneath without affecting the rest of the application.<\/p>\n<p>Also notice that some dependencies reference other dependencies within the container. The implications of this is powerful because you are building a dependency graph and any part of it can be changed which will cascade.<\/p>\n<h2>The Dependencies<\/h2>\n<p>There are no singleton dependencies in our container because we always want to deal with immutable objects, otherwise state management will bite you later. Instead, its a factory serving fresh instances. The dependencies are <code>structs<\/code>\u00a0that implement the protocols.<\/p>\n<p>Here&#8217;s an example of some of the dependencies:<\/p>\n<pre class=\"lang:swift decode:true\">protocol HTTPServiceType {...}\r\n\r\nstruct HTTPService: HTTPServiceType {\r\n    ...\r\n}\r\n\r\n\/\/\/\r\n\r\nprotocol AuthenticationService {...}\r\n\r\nstruct AuthenticationNetworkService: AuthenticationService {\r\n    private let httpService: HTTPServiceType\r\n    \r\n    init(httpService: HTTPServiceType) {\r\n        self.httpService = httpService\r\n    }\r\n}\r\n\r\n\/\/\/\r\n\r\nprotocol AuthenticationWorkerType {...}\r\n\r\nstruct AuthenticationWorker: AuthenticationWorkerType {\r\n    private let service: AuthenticationService\r\n    \r\n    init(service: AuthenticationService) {\r\n        self.service = service\r\n    }\r\n}<\/pre>\n<p>We&#8217;re using classic constructor injection to feed the dependencies in.<\/p>\n<p>The\u00a0<code>HTTPService<\/code>\u00a0dependency handles the raw network requests\/responses and where you would <code>import Alamofire<\/code>\u00a0for example. Never leak your 3rd-party dependencies to the rest of the app! Instead, encapsulate it under one of your custom dependencies. That&#8217;s what <code>HTTPService<\/code>\u00a0will do for <code>Alamofire<\/code>.<\/p>\n<p>Now based on our dependency container, <code>HTTPService<\/code>\u00a0gets injected into <code>AuthenticationNetworkService<\/code>\u00a0so it can make the REST API endpoint calls. It doesn&#8217;t know that it&#8217;s using <code>Alamofire<\/code>\u00a0underneath and can be completely swapped out for another network library or <code>URLSession<\/code>.<\/p>\n<p>From here, <code>AuthenticationNetworkService<\/code>\u00a0gets injected into <code>AuthenticationWorker<\/code>\u00a0that gets referenced by the rest of the app. This way, the REST API server or endpoints can be completely swapped out and your app wouldn&#8217;t have to know. It would still call the <code>AuthenticationWorker<\/code>\u00a0API&#8217;s.<\/p>\n<h2>The Injection<\/h2>\n<p>It&#8217;s now time to start using our dependency container. We will use a protocol extension to pass in the dependency container so the caller can start resolving the dependency types it wants.<\/p>\n<p>We need a singleton to hold a reference to the dependency container. So although we couldn&#8217;t get away from singletons altogether, the dependency container is a factory and still serving immutable instances.<\/p>\n<pre class=\"lang:swift decode:true\">\/\/\/ The singleton dependency container reference\r\n\/\/\/ which can be reassigned to another container\r\nstruct DependencyInjector {\r\n    static var dependencies: Dependency = CoreDependency()\r\n    private init() { }\r\n}\r\n\r\n\/\/\/ Attach to any type for exposing the dependency container\r\nprotocol HasDependencies {\r\n    var dependencies: Dependency { get }\r\n}\r\n\r\nextension HasDependencies {\r\n    \r\n    \/\/\/ Container for dependency instance factories\r\n    var dependencies: Dependency {\r\n        return DependencyInjector.dependencies\r\n    }\r\n}<\/pre>\n<p>The <code>DependencyInjector<\/code>\u00a0should be configured early on in the app lifecycle. That way, your frameworks can have its own dependency container, such as <code>CoreDependency<\/code>, and consumers can override any of the dependencies it desires. This works great for consumers who want to use a different\u00a0<code>UserDefaults<\/code>\u00a0app group or Keychain access group.<\/p>\n<p>We do this in the <code>willFinishLaunchingWithOptions<\/code>:<\/p>\n<pre class=\"lang:swift decode:true\">extension UIApplicationDelegate {\r\n    \r\n    func configure(dependency: Dependency) {\r\n        DependencyInjector.dependencies = dependency\r\n    }\r\n}\r\n\r\n\/\/\/\r\n\r\nclass AppDependency: CoreDependency {\r\n    \r\n    override func resolveCache() -&gt; UsersStore {\r\n        return UsersRealmStore()\r\n    }\r\n}\r\n\r\n\/\/\/\r\n\r\n@UIApplicationMain\r\nclass AppDelegate: UIResponder, UIApplicationDelegate {\r\n\r\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&gt; Bool {\r\n        configure(dependency: AppDependency())\r\n        return true\r\n    }\r\n}<\/pre>\n<p>Finally, the protocol extension for <code>HasDependencies<\/code>\u00a0is used to provide the dependency container to whoever wants it:<\/p>\n<pre class=\"lang:swift decode:true\">class ViewController: UIViewController, HasDependencies {\r\n\r\n    private lazy var authenticationWorker: AuthenticationWorkerType = dependencies.resolveWorker()\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        \r\n        authenticationWorker.login(with: \"whatever\") {\r\n            \/\/completed\r\n        }\r\n    }\r\n}\r\n<\/pre>\n<h2>The Unit Test<\/h2>\n<p>Not only does this dependency injection work great for frameworks, but of course works great for unit tests. It can be configured on a global and scoped level too!<\/p>\n<p>For the global level of your unit tests, you can create a <code>TestDependency<\/code>\u00a0that subclasses <code>CoreDependency<\/code>:<\/p>\n<pre class=\"lang:swift decode:true \">class TestDependency: CoreDependency {\r\n    \r\n    \/\/ Override with mocks, spy, or whatever\r\n    \r\n    override func resolveService() -&gt; AuthenticationService {\r\n        return AuthenticationTestService()\r\n    }\r\n}\r\n\r\nstruct AuthenticationTestService: AuthenticationService {\r\n    var isAuthorized: Bool {\r\n        return true\r\n    }\r\n    \r\n    func signup(with request: Any, completion: @escaping () -&gt; Void) {\r\n        print(\"AuthenticationTestService.signup\")\r\n    }\r\n    \r\n    func login(with request: Any, completion: @escaping () -&gt; Void) {\r\n        print(\"AuthenticationTestService.login\")\r\n    }\r\n    \r\n    func logout() {\r\n        \r\n    }\r\n}<\/pre>\n<p>You set this in your <code>setUp()<\/code>\u00a0function of your test case:<\/p>\n<pre class=\"lang:swift decode:true \">class MyCore_Tests: XCTestCase, HasDependencies {\r\n    \r\n    override func setUp() {\r\n        super.setUp()\r\n        \r\n        \/\/ Use test dependency or even a scoped one to the test!\r\n        DependencyInjector.dependencies = TestDependency()\r\n    }\r\n}<\/pre>\n<p>What&#8217;s even more powerful is you can create a scoped dependency container for a specific test case, see <code>ScopedDependency<\/code>:<\/p>\n<pre class=\"lang:swift decode:true \">class MyCore_Tests: XCTestCase, HasDependencies {\r\n    \r\n    private lazy var authenticationWorker: AuthenticationWorkerType = dependencies.resolveWorker()\r\n    private lazy var usersWorker: UsersWorkerType = dependencies.resolveWorker()\r\n    \r\n    override func setUp() {\r\n        super.setUp()\r\n        \r\n        \/\/ Use test dependency or even a scoped one to the test!\r\n        DependencyInjector.dependencies = ScopedDependency()\r\n    }\r\n    \r\n    override func tearDown() {\r\n        super.tearDown()\r\n        \r\n        \/\/ Set dependencies back to what it was\r\n        DependencyInjector.dependencies = TestDependency()\r\n    }\r\n    \r\n    private class ScopedDependency: TestDependency {\r\n        \r\n        override func resolveService() -&gt; HTTPServiceType {\r\n            return MockHTTPService()\r\n        }\r\n    }\r\n    \r\n    private struct MockHTTPService: HTTPServiceType {\r\n        \r\n        public func post(url: String, parameters: [String: Any], headers: [String: String]?, completion: @escaping () -&gt; Void) {\r\n            \/\/Blah, blah\r\n            print(\"MockHTTPService.post\")\r\n        }\r\n        \r\n        public func get(url: String, parameters: [String: Any], headers: [String: String]?, completion: @escaping () -&gt; Void) {\r\n            \/\/Blah, blah\r\n            print(\"MockHTTPService.get\")\r\n        }\r\n    }\r\n}\r\n\r\nextension MyCore_Tests {\r\n    \r\n    func testAuthenticationExample() {\r\n        authenticationWorker.signup(with: \"whatever\") {\r\n            XCTAssertTrue(true)\r\n        }\r\n    }\r\n    \r\n    func testUserExample() {\r\n        usersWorker.fetchCurrent {\r\n            XCTAssertTrue(true)\r\n        }\r\n    }\r\n    \r\n}<\/pre>\n<h2>Conclusion<\/h2>\n<p>The combination of a dependency container, a protocol extension to expose it, and immutable dependencies give you a pure Swift DI that works well with frameworks and unit tests. See this <a href=\"https:\/\/github.com\/iosmentor-io\/Pure-Swift-DI\" target=\"_blank\" rel=\"noopener noreferrer\">working example<\/a> to try it out.<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n<h2>More Reading<\/h2>\n<ul>\n<li><a href=\"https:\/\/www.swiftbysundell.com\/posts\/dependency-injection-using-factories-in-swift\" target=\"_blank\" rel=\"noopener noreferrer\">Dependency injection using factories in Swift<\/a><\/li>\n<li><a href=\"http:\/\/www.danielhall.io\/a-swift-y-approach-to-dependency-injection\" target=\"_blank\" rel=\"noopener noreferrer\">A Swift-y Approach to Dependency Injection<\/a><\/li>\n<li><a href=\"http:\/\/merowing.info\/2017\/04\/using-protocol-compositon-for-dependency-injection\/\" target=\"_blank\" rel=\"noopener noreferrer\">Using protocol compositon for dependency injection<\/a><\/li>\n<\/ul>\n","link":"https:\/\/basememara.com\/swift-protocol-oriented-dependency-injection\/","comment_count":14,"author":2,"featured_media":41287,"terms":[80,62,50,55],"meta":{"_series_part":"2"},"created":"2018-04-11T21:34:11","modified":"2019-05-20T06:58:39"},{"id":41373,"title":"Protocol-Oriented Themes for iOS Apps","slug":"protocol-oriented-themes-for-ios-apps","type":"post","excerpt":"Themes are usually downplayed as an after-thought instead of being an integral part of the development process. How many times have you inherited a codebase where the design team wants to tweak it, or business wants you to clone the app with a whole different theme. In this post, I'm going to show you the native way of theming an iOS app as intended by Apple that is often overlooked.","content":"<p>Themes are usually downplayed as an after-thought instead of being an integral part of the development process. How many times have you inherited a codebase where the design team wants to tweak it, or business wants you to clone the app with a whole different theme.\u00a0Then you look at the code&#8230;<\/p>\n<p><em>Color and font changes are sprinkled all over storyboards and views!!<\/em><\/p>\n<p>Ok you wish they had a bit more foresight when they were making the app the first time, but then they wouldn&#8217;t have reached out to you now right? In this post, I&#8217;m going to show you the native way of theming an iOS app as intended by Apple. It&#8217;s often overlooked, well because&#8230;<\/p>\n<h2>UIAppearance Sucks<\/h2>\n<p>I&#8217;m sure most of you have toyed with <a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/uiappearance\" target=\"_blank\" rel=\"noopener noreferrer\"><em>UIAppearance<\/em><\/a> and quickly gave up on it because of its limitations, especially if you&#8217;ve been spoiled with CSS stylesheets for web development or theme resources for Android apps. Apple&#8217;s way of theming is quite awkward, but it&#8217;s what we got and I urge you not to roll out your own or use yet another dependency.<\/p>\n<p>In a nutshell, <code>UIAppearance<\/code> allows you to style <em>UIKit<\/em> controls globally using a proxy, or a class that stands in as a placeholder which applies itself to the control when it gets added to the window hierarchy. For example, you can globally change labels to red text like this:<\/p>\n<pre class=\"lang:swift decode:true\">UILabel.appearance().textColor = .red<\/pre>\n<p>It&#8217;s like a static function that gets applied to all future instances. Though, it&#8217;s like a sledge hammer for a nail because it applies to <em>ALL<\/em> labels in the app, even in places you didn&#8217;t even know labels existed! This is where most people give up on <code>UIAppearance<\/code>.<\/p>\n<h2>UIAppearance Sucks&#8230; Well Kinda&#8230;<\/h2>\n<p>Apple&#8217;s answer to styles and themes is for you to subclass your <em>UIKit<\/em> controls and use <code>UIAppearance<\/code> on those custom controls like this:<\/p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance().textColor = .red<\/pre>\n<p>That&#8217;s the awkward part, Apple wants you to use object-oriented programming to theme your apps. I don&#8217;t think they understood that a CSS-<em>class<\/em> isn&#8217;t really a <em>class<\/em> \ud83d\ude44.<\/p>\n<p>You can take it one step further though:<\/p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance(whenContainedInInstancesOf: [MyCustomView.self]).textColor = .red<\/pre>\n<p>This will change the appearance of all <em>AppLabel&#8217;s<\/em>\u00a0only contained in <em>MyCustomView&#8217;s<\/em>. So that&#8217;s your other option &#8211; to change your UI hierarchy to accommodate styling \ud83e\udd26\u200d\u2642\ufe0f.\u00a0Why couldn&#8217;t they just add a new space-delimited string property called styles that gets realized by its children??<\/p>\n<p>Anyways, surprisingly things become really powerful when you start feeding <code>whenContainedInInstancesOf<\/code> an array of classes, which defines the hierarchy chain of the control. The specificity let&#8217;s you zero in on controls.<\/p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance(whenContainedInInstancesOf: [MyViewController.self]).textColor = .blue\nAppLabel.appearance(whenContainedInInstancesOf: [MyCustomView.self]).textColor = .red\nAppLabel.appearance(whenContainedInInstancesOf: [MyCustomView.self, MyViewController.self]).textColor = .yellow<\/pre>\n<p>Another Apple awkwardness is that the outer most parent wins (unlike CSS and the rest of the world). So in the above example, <code>[MyViewController.self]<\/code> wins over <code>[MyCustomView.self]<\/code>, even though <code>MyCustomView<\/code> is the closest parent.<\/p>\n<p>The way it works is the selector starts from top-to-bottom of the hierarchy, which means when it first hits\u00a0<code>MyViewController<\/code>\u00a0it stops. The label will be blue, not red, even if it&#8217;s contained in a <code>MyCustomView<\/code>. Fortunately though, the longer your array is (the more specific it is), the higher priority it is. In this case, the labels in <code>MyCustomView<\/code>\u00a0will be yellow if it is on the <code>MyViewController<\/code>\u00a0screen.<\/p>\n<p>Once you understand and toy around with these quirks, it becomes a full-fledged styling framework!<\/p>\n<h2>Styleable Controls<\/h2>\n<p>First thing we must do is subclass all the controls we want to style in our app. Not the best use of object-oriented programming, but it&#8217;s native theming (<em>see rant above<\/em>). Here&#8217;s what I got:<\/p>\n<p><em>AppLabel.swift:<\/em><\/p>\n<pre class=\"lang:swift decode:true\">class AppLabel: UILabel {\n    \n}\n\nclass AppHeadline: UILabel {\n    \n}\n\nclass AppSubhead: UILabel {\n    \n}\n\nclass AppFootnote: UILabel {\n    \n}<\/pre>\n<p><em>AppButton.swift:<\/em><\/p>\n<pre class=\"lang:swift decode:true\">class AppButton: UIButton {\n    \n}\n\nclass AppDangerButton: UIButton {\n    \n}<\/pre>\n<p><em>AppSwitch.swift:<\/em><\/p>\n<pre class=\"lang:swift decode:true \">class AppSwitch: UISwitch {\n    \n}<\/pre>\n<p><em>AppView.swift:<\/em><\/p>\n<pre class=\"lang:swift decode:true\">class AppView: UIView {\n    \n}\n\nclass AppSeparator: UIView {\n    \n}<\/pre>\n<p>In our storyboard, we will now use these custom classes:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/UIKit-Xcode-Custom-Class-500x281.png\" alt=\"\" width=\"500\" height=\"281\" class=\"aligncenter size-medium wp-image-41382\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/UIKit-Xcode-Custom-Class-500x281.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/UIKit-Xcode-Custom-Class-768x432.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/UIKit-Xcode-Custom-Class.png 854w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>However, we will not change colors in the storyboard.. leave them all on the defaults! Nor will we style and theme the custom controls in the <code>awakeFromNib()<\/code> event!<\/p>\n<p>Instead we will style our controls like this:<\/p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance().textColor = .red\nAppSubhead.appearance().textColor = .purple\nAppFootnote.appearance().textColor = .orange\n\nAppButton.appearance().setTitleColor(.green, for: .normal)\nAppButton.appearance().borderColor = .green\nAppButton.appearance().borderWidth = 1\nAppButton.appearance().cornerRadius = 3\n<\/pre>\n<p>This should take place in the <code>AppDelegate.willFinishLaunchingWithOptions<\/code> event so it can be ready before any controls are loaded into your app. You can call the <code>UIAppearance<\/code>\u00a0proxy later to change your styles, but it will only apply to newly added controls to the window. All existing controls need to be removed and added back to have the new styles take effect (yes more quirks, but I have a helper below I will mention).<\/p>\n<h2>The Theme Protocol<\/h2>\n<p>We need swappable themes for our app right? Even if you only have one theme, designing it in such a way will allow you to maintain the styles much more easily and add different themes later.<\/p>\n<p>Here&#8217;s a protocol for the themes we can use:<\/p>\n<pre class=\"lang:swift decode:true \">protocol Theme {\n    var tint: UIColor { get }\n    var secondaryTint: UIColor { get }\n    \n    var backgroundColor: UIColor { get }\n    var separatorColor: UIColor { get }\n    var selectionColor: UIColor { get }\n    \n    var labelColor: UIColor { get }\n    var secondaryLabelColor: UIColor { get }\n    var subtleLabelColor: UIColor { get }\n    \n    var barStyle: UIBarStyle { get }\n}<\/pre>\n<p>Then we can extend the protocol to change the appearance for controls using the above properties which themes will conform to. The extension can look something like:<\/p>\n<pre class=\"lang:swift decode:true\">extension Theme {\n    \n    func apply(for application: UIApplication) {\n        application.keyWindow?.tintColor = tint\n        \n        UITabBar.appearance().barStyle = barStyle\n        \n        UINavigationBar.appearance().barStyle = barStyle\n        UINavigationBar.appearance().tintColor = tint\n        UINavigationBar.appearance().titleTextAttributes = [\n            .foregroundColor: labelColor\n        ]\n        \n        if #available(iOS 11.0, *) {\n            UINavigationBar.appearance().largeTitleTextAttributes = [\n                .foregroundColor: labelColor\n            ]\n        }\n        \n        UICollectionView.appearance().backgroundColor = backgroundColor\n        UITableView.appearance().backgroundColor = backgroundColor\n        UITableView.appearance().separatorColor = separatorColor\n        UITableViewCell.appearance().backgroundColor = .clear\n        UITableViewCell.appearance().selectionColor = selectionColor\n        \n        UIView.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .backgroundColor = selectionColor\n        \n        UILabel.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .textColor = secondaryLabelColor\n        \n        AppLabel.appearance().textColor = labelColor\n        AppSubhead.appearance().textColor = secondaryLabelColor\n        AppFootnote.appearance().textColor = subtleLabelColor\n        \n        AppButton.appearance().borderColor = tint\n        AppButton.appearance().setTitleColor(tint, for: .normal)\n        AppButton.appearance().borderWidth = 1\n        AppButton.appearance().cornerRadius = 3\n        \n        AppDangerButton.appearance().borderWidth = 0\n        AppDangerButton.appearance().setTitleColor(labelColor, for: .normal)\n        AppDangerButton.appearance().backgroundColor = tint\n        \n        AppSwitch.appearance().tintColor = tint\n        \n        AppView.appearance().backgroundColor = backgroundColor\n        AppSeparator.appearance().backgroundColor = separatorColor\n        AppSeparator.appearance().alpha = 0.5\n    }\n}<\/pre>\n<p>And the themes that conform would only have to fill in the property values:<\/p>\n<pre class=\"lang:swift decode:true\">struct DarkTheme: Theme {\n    let tint: UIColor = .yellow\n    let secondaryTint: UIColor = .green\n    \n    let backgroundColor: UIColor = .black\n    let separatorColor: UIColor = .lightGray\n    let selectionColor: UIColor = .init(red: 38\/255, green: 38\/255, blue: 40\/255, alpha: 1)\n    \n    let labelColor: UIColor = .white\n    let secondaryLabelColor: UIColor = .lightGray\n    let subtleLabelColor: UIColor = .darkGray\n    \n    let barStyle: UIBarStyle = .black\n}<\/pre>\n<p>Here&#8217;s what another theme would look like:<\/p>\n<pre class=\"lang:swift decode:true\">struct LightTheme: Theme {\n    let tint: UIColor = .blue\n    let secondaryTint: UIColor = .orange\n    \n    let backgroundColor: UIColor = .white\n    let separatorColor: UIColor = .lightGray\n    let selectionColor: UIColor = .init(red: 236\/255, green: 236\/255, blue: 236\/255, alpha: 1)\n    \n    let labelColor: UIColor = .black\n    let secondaryLabelColor: UIColor = .darkGray\n    let subtleLabelColor: UIColor = .lightGray\n    \n    let barStyle: UIBarStyle = .default\n}<\/pre>\n<p>Finally you call the theme early in the app lifecycle:<\/p>\n<pre class=\"lang:swift decode:true \">@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    private let theme = DarkTheme()\n    \n    var window: UIWindow?\n\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -&gt; Bool {\n        theme.apply(for: application)\n        return true\n    }\n}<\/pre>\n<p>There you have it &#8211; native, simple theming for your iOS app.. no dependency, magic, or singleton!<\/p>\n<h2>Extending Themes<\/h2>\n<p>What if one of your custom themes wants to add extra styling? Implementing the <code>func apply(for application: UIApplication)<\/code> on the theme will wipe out existing logic which is not what we want, so instead I can add a\u00a0<code>func extend()<\/code>\u00a0to the protocol and call it within the <code>apply(for:)<\/code>\u00a0extension:<\/p>\n<pre class=\"lang:swift decode:true \">protocol Theme {\n    ...\n    func apply(for application: UIApplication)\n    func extend()\n}\n\nextension Theme {\n    \n    func apply(for application: UIApplication) {\n        ...\n        extend()\n    }\n    \n    func extend() {\n        \/\/ Optionally extend theme\n    }\n}<\/pre>\n<p>You see how <code>apply(for:)<\/code>\u00a0calls <code>extend()<\/code>\u00a0right in the protocol extension? Now the themes that conform can simply put their extended styling logic in <code>extend()<\/code>:<\/p>\n<pre class=\"lang:swift decode:true \">struct LightTheme: Theme {\n    ...\n}\n\nextension LightTheme {\n    \n    func extend() {\n        let proxy1 = UIImageView.appearance(whenContainedInInstancesOf: [UITableViewCell.self])\n        proxy1.borderColor = separatorColor\n        proxy1.borderWidth = 1\n        \n        let proxy2 = UIImageView.appearance(whenContainedInInstancesOf: [UIButton.self, UITableViewCell.self])\n        proxy2.borderWidth = 0\n    }\n}<\/pre>\n<h2>Changing Themes<\/h2>\n<p>Another reason why most people abandon <code>UIAppearance<\/code>\u00a0is you can&#8217;t change styles for existing controls that are already loaded. Apple makes it clear in the <a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/uiappearance\" target=\"_blank\" rel=\"noopener noreferrer\">documentation<\/a>:<\/p>\n<blockquote><p>iOS applies appearance changes when a view enters a window, it doesn\u2019t change the appearance of a view that\u2019s already in a window. To change the appearance of a view that\u2019s currently in a window, remove the view from the view hierarchy and then put it back.<\/p><\/blockquote>\n<p>It&#8217;s pretty ridiculous that every single control has to be removed and added again to realize the new styles. After changing <code>UIAppearance<\/code>\u00a0values, you have to traverse through the entire\u00a0<code>UIWindow<\/code>\u00a0hierarchy and remove\/add \u00a0controls:<\/p>\n<pre class=\"lang:swift decode:true \">UIApplication.shared.windows.forEach { window in\n    window.subviews.forEach { view in\n        view.removeFromSuperview()\n        window.addSubview(view)\n    }\n}\n<\/pre>\n<p>It makes my stomach turn, but I guess users shouldn&#8217;t be changing themes often &#8211; plus it&#8217;s still native theming right?<\/p>\n<p>Take it one step further and turn it into an extension:<\/p>\n<pre class=\"lang:swift decode:true\">public extension UIWindow {\n    \n    \/\/\/ Unload all views and add back.\n    \/\/\/ Useful for applying `UIAppearance` changes to existing views.\n    func reload() {\n        subviews.forEach { view in\n            view.removeFromSuperview()\n            addSubview(view)\n        }\n    }\n}\n\npublic extension Array where Element == UIWindow {\n    \n    \/\/\/ Unload all views for each `UIWindow` and add back.\n    \/\/\/ Useful for applying `UIAppearance` changes to existing views.\n    func reload() {\n        forEach { $0.reload() }\n    }\n}<\/pre>\n<p>Now in your original <code>Theme<\/code>\u00a0protocol, you can abstract it away:<\/p>\n<pre class=\"lang:swift decode:true\">protocol Theme {\n    ...\n}\n\nextension Theme {\n    \n    func apply(for application: UIApplication) {\n        ...\n        \n        \/\/ Ensure existing views render with new theme\n        application.windows.reload()\n    }<\/pre>\n<p>Note that the first time the theme gets applied in <code>AppDelegate.willFinishLaunchingWithOptions<\/code>, the \u00a0<code>window<\/code>\u00a0object won&#8217;t have any subviews in it so it will just be ignored. The <code>reload<\/code>\u00a0will only run if called after <code>AppDelegate.willFinishLaunchingWithOptions<\/code>.<\/p>\n<h2>Beyond Colors<\/h2>\n<p>So far I&#8217;ve only emphasized colors, but you can style fonts with <code>UIAppearance<\/code>, but I prefer to only use the built-in ones in storyboard because it respects dynamic font sizes. If your designer insists, you&#8217;ll want to support accessibility which is a whole other topic.<\/p>\n<p>But did you know you can use <code>UIAppearance<\/code>\u00a0on just about any property? You can even change text properties for all <code>UILabel<\/code>\u00a0controls!\u00a0Of course this would be obnoxious to do, but it&#8217;s possible:<\/p>\n<pre class=\"lang:swift decode:true \">UILabel.appearance().text = \"Hello World!\"<\/pre>\n<p>You could, however, add your own custom properties and set them via\u00a0<code>UIAppearance<\/code>\u00a0as well! Let&#8217;s take the selected highlight color for <code>UITableViewCell<\/code>. This is not a native property from <code>UIKit<\/code>\u00a0unfortunately, so you&#8217;d have to do something like this:<\/p>\n<pre class=\"lang:swift decode:true \">let selectedView = UIView()\nselectedView.backgroundColor = .lightGray\n\nmyTableViewCell.selectedBackgroundView = selectedView<\/pre>\n<p>You could take it one step further and turn it into an extension:<\/p>\n<pre class=\"lang:swift decode:true \">extension UITableViewCell {\n    \n    \/\/\/ The color of the cell when it is selected.\n    var selectionColor: UIColor? {\n        get { return selectedBackgroundView?.backgroundColor }\n        set {\n            guard selectionStyle != .none else { return }\n            selectedBackgroundView = UIView().with {\n                $0.backgroundColor = newValue\n            }\n        }\n    }\n}<\/pre>\n<p>When you try to update this property via <code>UIAppearance<\/code>, you&#8217;ll notice it doesn&#8217;t do anything. To expose your custom properties to <code>UIAppearance<\/code>, you have to add the <code>dynamic<\/code>\u00a0keyword to the property to\u00a0force the <em>Swift<\/em> compiler to use an\u00a0<em>Objective-C<\/em> message that <code>UIAppearance<\/code> relies on:<\/p>\n<pre class=\"lang:swift decode:true \">extension UITableViewCell {\n    \n    \/\/\/ The color of the cell when it is selected.\n    @objc dynamic var selectionColor: UIColor? {\n        get { return selectedBackgroundView?.backgroundColor }\n        set {\n            guard selectionStyle != .none else { return }\n            selectedBackgroundView = UIView().with {\n                $0.backgroundColor = newValue\n            }\n        }\n    }\n}<\/pre>\n<p>Now you can do this:<\/p>\n<pre class=\"lang:swift decode:true \">UITableViewCell.appearance().selectionColor = .init(red: 38\/255, green: 38\/255, blue: 40\/255, alpha: 1)<\/pre>\n<p>At this point, we got everything we need.<\/p>\n<h2>Demo Time!<\/h2>\n<p>I put together a sample project with a segmented control to switch between themes:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/Theme-Screenshot-500x354.png\" alt=\"\" width=\"500\" height=\"354\" class=\"aligncenter size-medium wp-image-41397\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/Theme-Screenshot-500x354.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/Theme-Screenshot-768x544.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/Theme-Screenshot-1024x725.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>The <code>Theme<\/code>\u00a0protocol that does the heavy lifting looks like this:<\/p>\n<pre class=\"lang:swift decode:true \">protocol Theme {\n    var tint: UIColor { get }\n    var secondaryTint: UIColor { get }\n    \n    var backgroundColor: UIColor { get }\n    var separatorColor: UIColor { get }\n    var selectionColor: UIColor { get }\n    \n    var labelColor: UIColor { get }\n    var secondaryLabelColor: UIColor { get }\n    var subtleLabelColor: UIColor { get }\n    \n    var barStyle: UIBarStyle { get }\n    \n    func apply(for application: UIApplication)\n    func extend()\n}\n\nextension Theme {\n    \n    func apply(for application: UIApplication) {\n        application.keyWindow?.tintColor = tint\n        \n        UITabBar.appearance().with {\n            $0.barStyle = barStyle\n            $0.tintColor = tint\n        }\n        \n        UINavigationBar.appearance().with {\n            $0.barStyle = barStyle\n            $0.tintColor = tint\n            $0.titleTextAttributes = [\n                .foregroundColor: labelColor\n            ]\n            \n            if #available(iOS 11.0, *) {\n                $0.largeTitleTextAttributes = [\n                    .foregroundColor: labelColor\n                ]\n            }\n        }\n        \n        UICollectionView.appearance().backgroundColor = backgroundColor\n        \n        UITableView.appearance().with {\n            $0.backgroundColor = backgroundColor\n            $0.separatorColor = separatorColor\n        }\n        \n        UITableViewCell.appearance().with {\n            $0.backgroundColor = .clear\n            $0.selectionColor = selectionColor\n        }\n        \n        UIView.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .backgroundColor = selectionColor\n        \n        UILabel.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .textColor = secondaryLabelColor\n        \n        AppLabel.appearance().textColor = labelColor\n        AppHeadline.appearance().textColor = secondaryTint\n        AppSubhead.appearance().textColor = secondaryLabelColor\n        AppFootnote.appearance().textColor = subtleLabelColor\n        \n        AppButton.appearance().with {\n            $0.setTitleColor(tint, for: .normal)\n            $0.borderColor = tint\n            $0.borderWidth = 1\n            $0.cornerRadius = 3\n        }\n        \n        AppDangerButton.appearance().with {\n            $0.setTitleColor(backgroundColor, for: .normal)\n            $0.backgroundColor = tint\n            $0.cornerRadius = 3\n        }\n        \n        AppSwitch.appearance().with {\n            $0.tintColor = tint\n            $0.onTintColor = tint\n        }\n        \n        AppStepper.appearance().tintColor = tint\n        \n        AppSlider.appearance().tintColor = tint\n        \n        AppSegmentedControl.appearance().tintColor = tint\n        \n        AppView.appearance().backgroundColor = backgroundColor\n        \n        AppSeparator.appearance().with {\n            $0.backgroundColor = separatorColor\n            $0.alpha = 0.5\n        }\n        \n        AppView.appearance(whenContainedInInstancesOf: [AppView.self]).with {\n            $0.backgroundColor = selectionColor\n            $0.cornerRadius = 10\n        }\n        \n        \/\/ Style differently when inside a special container\n        \n        AppLabel.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = subtleLabelColor\n        AppHeadline.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = secondaryLabelColor\n        AppSubhead.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = secondaryTint\n        AppFootnote.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = labelColor\n        \n        AppButton.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).with {\n            $0.setTitleColor(labelColor, for: .normal)\n            $0.borderColor = labelColor\n        }\n        \n        AppDangerButton.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).with {\n            $0.setTitleColor(subtleLabelColor, for: .normal)\n            $0.backgroundColor = labelColor\n        }\n        \n        AppSwitch.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).with {\n            $0.tintColor = secondaryTint\n            $0.onTintColor = secondaryTint\n        }\n        \n        extend()\n        \n        \/\/ Ensure existing views render with new theme\n        \/\/ https:\/\/developer.apple.com\/documentation\/uikit\/uiappearance\n        application.windows.reload()\n    }\n    \n    func extend() {\n        \/\/ Optionally extend theme\n    }\n}<\/pre>\n<p>Then you can add as many themes as you want:<\/p>\n<pre class=\"lang:swift decode:true\">struct OceanTheme: Theme {\n    let tint: UIColor = .blue\n    let secondaryTint: UIColor = .orange\n    \n    let backgroundColor: UIColor = .cyan\n    let separatorColor: UIColor = .lightGray\n    let selectionColor: UIColor = .init(red: 38\/255, green: 38\/255, blue: 40\/255, alpha: 1)\n    \n    let labelColor: UIColor = .magenta\n    let secondaryLabelColor: UIColor = .lightGray\n    let subtleLabelColor: UIColor = .darkGray\n    \n    let barStyle: UIBarStyle = .default\n}<\/pre>\n<p>Finally in my segmented control change event, I can simply change themes like this:<\/p>\n<pre class=\"lang:swift decode:true \">@IBAction func themeSegmentedControlChanged(_ sender: UISegmentedControl) {\n    let theme: Theme\n        \n    switch sender.selectedSegmentIndex {\n    case 1: theme = LightTheme()\n    case 2: theme = OceanTheme()\n    default: theme = DarkTheme()\n    }\n        \n    theme.apply(for: UIApplication.shared)\n}<\/pre>\n<p>The complete source code can be\u00a0<a href=\"https:\/\/github.com\/basememara\/ThemeKit\" target=\"_blank\" rel=\"noopener noreferrer\">downloaded and run here<\/a>.<\/p>\n<h2>Conclusion<\/h2>\n<p><code>UIAppearance<\/code>\u00a0has been around since iOS 5, but it is often overlooked and underestimated. Apple uses this framework to style its own apps, such as <em>Find Friends<\/em> and many other apps. Sticking with native functionality is always a good idea and hopefully I&#8217;ve given you a newfound appreciation for the built-in theming framework.<\/p>\n<p>To learn more about <code>UIAppearance<\/code>, check out these resources:<\/p>\n<ul>\n<li><a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2011\/114\/\" target=\"_blank\" rel=\"noopener noreferrer\">WWDC 2011:\u00a0Customizing the Appearance of UIKit Controls<\/a><\/li>\n<li><a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2012\/216\/\" target=\"_blank\" rel=\"noopener noreferrer\">WWDC 2012:\u00a0Advanced Appearance Customization on iOS<\/a><\/li>\n<li><a href=\"https:\/\/spin.atomicobject.com\/2017\/08\/16\/uiappearance-container-hierarchies\/\" target=\"_blank\" rel=\"noopener noreferrer\">Understanding UIAppearance Container Hierarchies<\/a><\/li>\n<\/ul>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n<hr \/>\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!<\/h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https:\/\/iosmentor.io\/webinars\/swift-frameworks\/\" target=\"_blank\" rel=\"noopener\"><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" \/><\/a><\/p>\n","link":"https:\/\/basememara.com\/protocol-oriented-themes-for-ios-apps\/","comment_count":2,"author":2,"featured_media":41397,"terms":[80,53,62,55,81],"meta":{"_series_part":"7"},"created":"2018-09-29T17:12:15","modified":"2019-03-18T02:25:53"},{"id":20633,"title":"Swifty Localization with Xcode Support","slug":"swifty-localization-xcode-support","type":"post","excerpt":"Localization in Xcode is handled with NSLocalizedString, but it is such a verbose and legacy-like API. There's a Swiftier way that still respects Xcode .xliff exports and comments.","content":"<p>Localization can be as much fun as unit testing. And like unit testing, it <em>can<\/em> be fun if it makes your code more robust and flexible (dependency injection and encapsulation anyone?). For example, once you internationalize your app and start viewing it in right-to-left languages, you&#8217;ll notice areas you&#8217;ve been using auto-layout wrong and start better habits such as using <em>UIStackViews<\/em> over <em>UILabel<\/em> text-alignments or tweaking hugging and resistance priorities. There&#8217;s one nagging thing that keeps coming up with localization though&#8230;<\/p>\n<h2><span>NSLocalizedString<\/span><\/h2>\n<p>Our old friend, `NSLocalizedString(&#8220;some.dialog.message&#8221;, comment: &#8220;My main dialog message for tutorial&#8221;)`. These localization API&#8217;s can be really bloated and ugly.. it can get out of control. Take this for example:<\/p>\n<pre class=\"lang:swift decode:true\">let title = NSLocalizedString(\"tutorial.alert.title\", comment: \"Title of main tutorial dialog\")\r\nlet message: String = .localizedStringWithFormat(NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen inserting number\"), 9876)<\/pre>\n<p>There&#8217;s so many un-Swifty things about this; there&#8217;s the &#8220;NS-&#8221; prefix, some irrelevant comments in the code, `localizedStringWithFormat` hasn&#8217;t been split up to function parameters, formatting with locale is some nested call.. I don&#8217;t think it can get any worse.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/NSLocalizedString_Napoleon_Meme-500x350.jpg\" alt=\"\" width=\"400\" height=\"280\" class=\"aligncenter wp-image-20648\" \/><\/p>\n<h2>Getting Swifty With It<\/h2>\n<p>One common technique in making `NSLocalizedString` more Swifty is wrapping it up in a\u00a0<code>String<\/code>\u00a0extension:<\/p>\n<pre class=\"lang:swift decode:true\">extension String {\r\n    \r\n    var localized: String {\r\n        return NSLocalizedString(self, comment: \"\")\r\n    }\r\n    \r\n    func localized(comment: String) -&gt; String {\r\n        return NSLocalizedString(self, comment: comment)\r\n    }\r\n}\r\n\r\nprint(\"some.dialog.message\".localized)<\/pre>\n<p>Looks good, although it still doesn&#8217;t solve comments from being infused in your code. Furthermore, there&#8217;s one big deal-breaker with this: Xcode will not export the localization to a <em>.xliff<\/em> file since\u00a0<em>NSLocalizedString<\/em> is being\u00a0used dynamically at runtime here.<\/p>\n<p>Xcode&#8217;s localization export depends on the hardcoded macro `NSLocalizedString` to do the search for export, so we still have to use them. Yes,\u00a0<em>NSLocalizedString<\/em> is a macro! Hopefully the localization export feature can be rebuilt on top of Xcode 9+&#8217;s refactoring engine \ud83d\ude09<\/p>\n<h2>Now with Xcode Support\u2122<\/h2>\n<p>Let&#8217;s take our last attempt further to get the right API while respecting \u00a0Xcode support. Using <code>Enums<\/code>\u00a0to handle this would be sweet, but you have to use literals so this won&#8217;t compile:<\/p>\n<pre class=\"lang:swift decode:true\">enum Localizable: String {\r\n    \/\/Compile error: Raw value for enum case must be a literal\r\n    case tutorialAlert = NSLocalizedString(\"tutorial.alert.title\", comment: \"Some comment\")\r\n}<\/pre>\n<p>That&#8217;s fine; actually extending a <code>struct<\/code>\u00a0would work out better because then I can use extensions to add more localized strings instead of using cases. Let&#8217;s adjust:<\/p>\n<pre class=\"lang:swift decode:true\">struct Localizable {\r\n    private init() { }\r\n}\r\n\r\nextension Localizable {\r\n    static let title = NSLocalizedString(\"tutorial.alert.title\", comment: \"Title of main tutorial dialog\")\r\n    static let message = NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen inserting number\")\r\n}\r\n\r\n\/\/ ViewController.swift\r\nlet title = Localizable.title\r\nlet message: String = .localizedStringWithFormat(Localizable.message, 9876)<\/pre>\n<p>Still needs a bit more work.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/NSLocalizedString_Office_Space_Meme-500x418.jpg\" alt=\"\" width=\"400\" height=\"335\" class=\"aligncenter wp-image-20652\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/NSLocalizedString_Office_Space_Meme-500x418.jpg 500w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/NSLocalizedString_Office_Space_Meme.jpg 526w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><\/p>\n<h2>Localization Micro-Library<\/h2>\n<p>When refactoring Swift code, one question I ask is how I can leverage inference. I&#8217;d like to end up with something like this:<\/p>\n<pre class=\"lang:swift decode:true\">let title: String = .title\r\nlet message: String = .localizedStringWithFormat(.message, 9876)<\/pre>\n<p>To achieve this, we&#8217;d have to move all the\u00a0extensions to <code>String<\/code>, which would be obnoxious and pollute our <code>String<\/code>\u00a0API. Instead, we&#8217;ll have to extend the `Localizable` struct along with\u00a0<code>String<\/code>:<\/p>\n<pre class=\"lang:swift decode:true\">extension String {\r\n    \r\n    static func localized(_ key: Localizable) -&gt; String {\r\n        return key.contents\r\n    }\r\n}\r\n\r\nstruct Localizable {\r\n    fileprivate let contents: String\r\n    \r\n    init(_ contents: String) {\r\n        self.contents = contents\r\n    }\r\n}\r\n\r\nextension Localizable {\r\n    static let title = Localizable(NSLocalizedString(\"tutorial.dialog.title\", comment: \"Title of main tutorial dialog\"))\r\n    static let message = Localizable(NSLocalizedString(\"tutorial.dialog.message\", comment: \"First corner of main screen inserting number\"))\r\n}<\/pre>\n<p>Notice how we adjusted the <code>Localizable<\/code> static properties to return itself for later inference by storing the localized string within its initializer.\u00a0Now we can do this:<\/p>\n<pre class=\"lang:swift decode:true\">let title: String = .localized(.title)<\/pre>\n<p>It&#8217;s not as slim as I aimed (which was too terse?), but it&#8217;s reasonable. And still reasonable even though you have to manage the\u00a0<code>NSLocalizedString<\/code>\u00a0list through\u00a0<code>Localizable<\/code>\u00a0static properties, but there&#8217;s no way around that &#8211; at least now they&#8217;re consolidated and reusable from one place, also making comment management easier.<\/p>\n<h2>Now with Locale Support\u2122<\/h2>\n<p>For extending <code>.localizedStringWithFormat<\/code>, there\u2019s still some work to do.\u00a0Below will give *empty memory values* at runtime, even though it *dangerously compiles*:<\/p>\n<pre class=\"lang:swift decode:true \">extension String { \/\/ WRONG: Don't do this!\r\n\r\n    static func localizedFormat(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return String(format: key.contents, arguments)\r\n    }\r\n    \r\n    static func localizedLocale(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return .localizedStringWithFormat(key.contents, arguments)\r\n    }\r\n}<\/pre>\n<p>There are nuances we have to deal with when passing variable arguments to other functions since `CVarArg` is a bridge to low-level\u00a0<em>C-language<\/em>\u00a0API&#8217;s. We have to facilitate passing the `CVarArg` arguments to other functions via pointers using Swift&#8217;s\u00a0<em>&#8220;<a href=\"https:\/\/developer.apple.com\/documentation\/swift\/2294740-withvalist\" target=\"_blank\" rel=\"noopener\">withVaList<\/a>&#8220;<\/em>:<\/p>\n<pre class=\"lang:swift decode:true\">extension String {\r\n    \r\n    \/\/\/ A string initialized by using format as a template into which values in argList are substituted according the current locale information.\r\n    private static var vaListHandler: (_ key: String, _ arguments: CVaListPointer, _ locale: Locale?) -&gt; String {\r\n        \/\/ https:\/\/stackoverflow.com\/questions\/42428504\/swift-3-issue-with-cvararg-being-passed-multiple-times\r\n        return { return NSString(format: $0, locale: $2, arguments: $1) as String }\r\n    }\r\n\r\n    \/\/\/ Returns a string created by using a given format string as a template into which the remaining argument values are substituted.\r\n    \/\/\/ Equivalent to `String(format: value)`.\r\n    static func localizedFormat(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return withVaList(arguments) { vaListHandler(key.contents, $0, nil) } as String\r\n    }\r\n\r\n    \/\/\/ Returns a string created by using a given format string as a template into which the\r\n    \/\/\/ remaining argument values are substituted according to the user\u2019s default locale.\r\n    \/\/\/ Equivalent to `String.localizedStringWithFormat(value, arguments)`.\r\n    static func localizedLocale(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return withVaList(arguments) { vaListHandler(key.contents, $0, .current) } as String\r\n    }\r\n}<\/pre>\n<p>Now it works and we end up with this:<\/p>\n<pre class=\"lang:swift decode:true\">\/\/ Before\r\nlet title = NSLocalizedString(\"tutorial.alert.title\", comment: \"Title of main tutorial dialog\")\r\nlet message: String = .localizedStringWithFormat(NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen inserting number\"), 9876)\r\nlet caption = String(format: NSLocalizedString(\"current.app.name.version\", comment: \"Center display of app name and current version\"), \"v1.1\")\r\n\r\n\/\/ After\r\nlet title: String = .localized(.tutorialAlertTitle)\r\nlet message: String = .localizedLocale(.oneCornerLabel1, 9876)\r\nlet caption: String = .localizedFormat(.currentAppNameVersion, \"v1.1\")<\/pre>\n<p>And Xcode&#8217;s localization export to <em>.xliff<\/em> works perfectly and with comments since <code>NSLocalizedString<\/code>\u00a0is spelled out in the <code>Localizable<\/code>\u00a0static extensions\u00a0<a href=\"https:\/\/emojipedia.org\/thumbs-up-sign\/\" onmousedown=\"return rwt(this,'','','','7','AFQjCNHgpXSOoYKJfqGfOwBIm6b3V91rQQ','','0ahUKEwjAmZ2Dr_zUAhVJfiYKHQdvCykQFgg5MAY','','',event)\">\ud83d\udc4d<\/a><\/p>\n<h2>The Full Example<\/h2>\n<p>Below is how the result would look like in an app..<\/p>\n<p><em>Before:<\/em><\/p>\n<pre class=\"lang:swift decode:true \">class ViewController1: UIViewController {\r\n    \r\n    ...\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        \r\n        centerLabel.text = String(format: NSLocalizedString(\"current.app.name.version\", comment: \"Center display of app name and current version\"),\r\n            Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as! String,\r\n            Bundle.main.infoDictionary?[kCFBundleVersionKey as String] as! String)\r\n        \r\n        startTutorial()\r\n    }\r\n    \r\n    \/\/\/ Launched to start tutorial\r\n    func startTutorial() {\r\n        let alertController = UIAlertController(\r\n            title: NSLocalizedString(\"tutorial.alert.title\", comment: \"Title of main tutorial dialog\"),\r\n            message: NSLocalizedString(\"tutorial.alert.message\", comment: \"Message of main tutorial dialog\"),\r\n            preferredStyle: .alert\r\n        )\r\n        \r\n        alertController.addAction(UIAlertAction(title: NSLocalizedString(\"tutorial.alert.accept\", comment: \"OK button of main tutorial dialog\"), style: .default) { _ in\r\n            self.firstLabel.text = .localizedStringWithFormat(NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen translating number 1\"), 1)\r\n            self.secondLabel.text = .localizedStringWithFormat(NSLocalizedString(\"two.corner.label.2\", comment: \"Second corner of main screen translating number 2\"), 2)\r\n            self.thirdLabel.text = .localizedStringWithFormat(NSLocalizedString(\"three.corner.label.3\", comment: \"Third corner of main screen translating number 3\"), 3)\r\n            self.fourthLabel.text = .localizedStringWithFormat(NSLocalizedString(\"four.corner.label.4\", comment: \"Fourth corner of main screen translating number 4\"), 4)\r\n        })\r\n        \r\n        present(alertController, animated: true)\r\n    }\r\n    \r\n}<\/pre>\n<p><em>After:<\/em><\/p>\n<pre class=\"lang:swift decode:true\">class ViewController2: UIViewController {\r\n    \r\n    ...\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        \r\n        centerLabel.text = .localizedFormat(.currentAppNameVersion,\r\n            Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as! String,\r\n            Bundle.main.infoDictionary?[kCFBundleVersionKey as String] as! String\r\n        )\r\n        \r\n        startTutorial()\r\n    }\r\n    \r\n    \/\/\/ Launched to start tutorial\r\n    func startTutorial() {\r\n        let alertController = UIAlertController(\r\n            title: .localized(.tutorialAlertTitle),\r\n            message: .localized(.tutorialAlertMessage),\r\n            preferredStyle: .alert\r\n        )\r\n        \r\n        alertController.addAction(UIAlertAction(title: .localized(.tutorialAlertAccept), style: .default) { _ in\r\n            self.firstLabel.text = .localizedLocale(.oneCornerLabel1, 1)\r\n            self.secondLabel.text = .localizedLocale(.twoCornerLabel2, 2)\r\n            self.thirdLabel.text = .localizedLocale(.threeCornerLabel3, 3)\r\n            self.fourthLabel.text = .localizedLocale(.fourCornerLabel4, 4)\r\n        })\r\n        \r\n        present(alertController, animated: true)\r\n    }\r\n    \r\n}<\/pre>\n<p><em>Localizable.swift (micro-library):<\/em><\/p>\n<pre class=\"lang:swift decode:true\">struct Localizable {\r\n    fileprivate let contents: String\r\n    \r\n    init(_ contents: String) {\r\n        self.contents = contents\r\n    }\r\n}\r\n\r\nextension String {\r\n    \r\n    \/\/\/ A string initialized by using format as a template into which values in argList are substituted according the current locale information.\r\n    private static var vaListHandler: (_ key: String, _ arguments: CVaListPointer, _ locale: Locale?) -&gt; String {\r\n        \/\/ https:\/\/stackoverflow.com\/questions\/42428504\/swift-3-issue-with-cvararg-being-passed-multiple-times\r\n        return { return NSString(format: $0, locale: $2, arguments: $1) as String }\r\n    }\r\n\r\n    \/\/\/ Returns a localized string.\r\n    static func localized(_ key: Localizable) -&gt; String {\r\n        return key.contents\r\n    }\r\n\r\n    \/\/\/ Returns a string created by using a given format string as a template into which the remaining argument values are substituted.\r\n    \/\/\/ Equivalent to `String(format: value)`.\r\n    static func localizedFormat(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return withVaList(arguments) { vaListHandler(key.contents, $0, nil) } as String\r\n    }\r\n\r\n    \/\/\/ Returns a string created by using a given format string as a template into which the\r\n    \/\/\/ remaining argument values are substituted according to the user\u2019s default locale.\r\n    \/\/\/ Equivalent to `String.localizedStringWithFormat(value, arguments)`.\r\n    static func localizedLocale(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return withVaList(arguments) { vaListHandler(key.contents, $0, .current) } as String\r\n    }\r\n}<\/pre>\n<p><em>AppLocalizable.swift:<\/em><\/p>\n<pre class=\"lang:swift decode:true\">\/\/ MARK: - Main Scene\r\nextension Localizable {\r\n    static let currentAppNameVersion = Localizable(NSLocalizedString(\"current.app.name.version\", comment: \"Center display of app name and current version\"))\r\n    static let oneCornerLabel1 = Localizable(NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen translating number 1\"))\r\n    static let twoCornerLabel2 = Localizable(NSLocalizedString(\"two.corner.label.2\", comment: \"Second corner of main screen translating number 2\"))\r\n    static let threeCornerLabel3 = Localizable(NSLocalizedString(\"three.corner.label.3\", comment: \"Third corner of main screen translating number 3\"))\r\n    static let fourCornerLabel4 = Localizable(NSLocalizedString(\"four.corner.label.4\", comment: \"Fourth corner of main screen translating number 4\"))\r\n}\r\n\r\n\/\/ MARK: - Tutorial\r\nextension Localizable {\r\n    static let tutorialAlertTitle = Localizable(NSLocalizedString(\"tutorial.alert.title\", comment: \"Tutorial intro and getting started\"))\r\n    static let tutorialAlertMessage = Localizable(NSLocalizedString(\"tutorial.alert.message\", comment: \"Tutorial submitting feedback and contact\"))\r\n    static let tutorialAlertAccept = Localizable(NSLocalizedString(\"tutorial.alert.accept\", comment: \"Tutorial done and dismiss\"))\r\n}\r\n<\/pre>\n<p>You can <a href=\"https:\/\/github.com\/basememara\/SwiftyLocalizable\" target=\"_blank\" rel=\"noopener\">download the working sample<\/a> and give it a try.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/swifty-localization-xcode-support\/","comment_count":4,"author":2,"featured_media":20745,"terms":[80,77,50,55,47],"meta":{"_series_part":"4"},"created":"2017-07-11T19:00:59","modified":"2019-01-17T14:48:00"},{"id":41256,"title":"Thin AppDelegate with Pluggable Services","slug":"pluggable-appdelegate-services","type":"post","excerpt":"Many techniques have been tried to tame the\u00a0AppDelegate\u00a0beast, usually ending up in moving code into private functions or extensions. However, the AppDelegate\u00a0is much more complex than just moving code around. In this post, let's examine a pluggable service technique\u00a0with a few bonuses at the end.","content":"<p>Many techniques have been tried to tame the&nbsp;<code>AppDelegate<\/code>&nbsp;beast, usually ending up in moving code into private functions or extensions. However, the <code>AppDelegate<\/code>&nbsp;is much more complex than just moving code around. In this post, let&#8217;s examine a pluggable service technique <a href=\"https:\/\/medium.com\/ios-os-x-development\/pluggableapplicationdelegate-e50b2c5d97dd\" target=\"_blank\" rel=\"noopener\">inspired by Mart\u00edn Ortiz<\/a>&nbsp;with a few bonuses at the end.<\/p>\n<h2>AppDelegate: With Great Power Comes Great Responsibilit(ies)<\/h2>\n<p>Being the entry point for the app, everyone wants in on the action. From push notifications, deep links, theme setup, logger initialization.. the list goes on. Not to mention all the 3rd party SDK&#8217;s who want to plug into your app lifecycle too. Eventually your <code>AppDelegate<\/code>&nbsp;looks like this:<\/p>\n<pre class=\"lang:swift decode:true\">@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\n        Log(info: \"AppDelegate.didFinishLaunchingSite started.\")\n        application.setMinimumBackgroundFetchInterval(UIApplicationBackgroundFetchIntervalMinimum)\n        \n        UNUserNotificationCenter.current().register(\n            delegate: self,\n            actions: [UNNotificationAction(identifier: \"favorite\", title: .localized(.favorite))]\n        )\n        \n        \/\/ Initialize Google Analytics\n        if !AppGlobal.userDefaults[.googleAnalyticsID].isEmpty {\n            GAI.sharedInstance().tracker(\n                withTrackingId: AppGlobal.userDefaults[.googleAnalyticsID])\n        }\n        \n        \/\/ Declare data format from remote REST API\n        JSON.dateFormatter.dateFormat = ZamzamConstants.DateTime.JSON_FORMAT\n        \n        \/\/ Initialize components\n        AppLogger.shared.setUp()\n        AppData.shared.setUp()\n        \n        \/\/ Select home tab\n        (window?.rootViewController as? UITabBarController)?.selectedIndex = 2\n        \n        setupTheme()\n        \n        Log(info: \"App finished launching.\")\n        \n        \/\/ Handle shortcut launch\n        if let shortcutItem = launchOptions?[.shortcutItem] as? UIApplicationShortcutItem {\n            performActionForShortcutItem(application, shortcutItem: shortcutItem)\n            return false\n        }\n        \n        return true\n    }\n    \n    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -&gt; Void) -&gt; Bool {\n        guard userActivity.activityType == NSUserActivityTypeBrowsingWeb, let webpageURL = userActivity.webpageURL else { return false }\n        Log(info: \"AppDelegate.continueUserActivity for URL: \\(webpageURL.absoluteString).\")\n        return navigateByURL(webpageURL)\n    }\n    \n    func application(_ application: UIApplication, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -&gt; Void) {\n        Log(info: \"AppDelegate.performFetch started.\")\n        scheduleUserNotifications(completionHandler: completionHandler)\n    }\n    \n    func application(_ application: UIApplication, performActionFor shortcutItem: UIApplicationShortcutItem, completionHandler: @escaping (Bool) -&gt; Void) {\n        window?.rootViewController?.dismiss(animated: false, completion: nil)\n        guard let tabController = window?.rootViewController as? UITabBarController else { completionHandler?(false); return }\n        \n        switch shortcutItem.type {\n        case \"favorites\":\n            tabController.selectedIndex = 0\n        case \"search\":\n            tabController.selectedIndex = 3\n        case \"contact\":\n            guard let url = URL(string: \"mailto:\\(AppGlobal.userDefaults[.email])\") else { break }\n            UIApplication.shared.open(url)\n        default: break\n        }\n        \n        completionHandler?(true)\n    }\n}\n\n\/\/ MARK: - User Notification Delegate\n\nextension AppDelegate {\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -&gt; Void) {\n        guard let id = response.notification.request.content.userInfo[\"id\"] as? Int,\n            let link = response.notification.request.content.userInfo[\"link\"] as? String,\n            let url = try? link.asURL()\n            else { return }\n        \n        switch response.actionIdentifier {\n        case UNNotificationDefaultActionIdentifier: _ = navigateByURL(url)\n        case \"favorite\": PostService().addFavorite(id)\n        case \"share\": _ = navigateByURL(url)\n        default: break\n        }\n        \n        completionHandler()\n    }\n    \n    private func scheduleUserNotifications(completionHandler: @escaping (UIBackgroundFetchResult) -&gt; Void) {\n        \/\/ Get latest posts from server\n        \/\/ Persist network manager instance to ensure lifespan is not interrupted\n        urlSessionManager = PostService().updateFromRemote {\n            guard case .success(let results) = $0 else { return completionHandler(.failed) }\n            \n            guard let id = results.created.first,\n                let post = (try? Realm())?.object(ofType: Post.self, forPrimaryKey: id)\n                else { return completionHandler(.noData) }\n            \n            var attachments = [UNNotificationAttachment]()\n            \n            \/\/ Completion process on exit\n            func deferred() {\n                \/\/ Launch notification\n                UNUserNotificationCenter.current().add(\n                    body: post.previewContent,\n                    title: post.title,\n                    attachments: attachments,\n                    timeInterval: 5,\n                    userInfo: [\n                        \"id\": post.id,\n                        \"link\": post.link\n                    ],\n                    completion: {\n                        guard $0 == nil else { return Log(error: \"Could not schedule the notification for the post: \\($0.debugDescription).\") }\n                        Log(debug: \"Scheduled notification for post during background fetch.\")\n                }\n                )\n                \n                completionHandler(.newData)\n            }\n            \n            \/\/ Get remote media to attach to notification\n            guard let link = post.media?.thumbnailLink else { return deferred() }\n            let thread = Thread.current\n            \n            UNNotificationAttachment.download(from: link) {\n                defer { thread.async { deferred() } }\n                \n                guard $0.isSuccess, let attachment = $0.value else {\n                    return Log(error: \"Could not download the post thumbnail (\\(link)): \\($0.error.debugDescription).\")\n                }\n                \n                \/\/ Store attachment to schedule notification later\n                attachments.append(attachment)\n            }\n        }\n    }\n}\n\n\/\/ MARK: - Internal functions\n\nprivate extension AppDelegate {\n    \n    func setupTheme() {\n        window?.tintColor = UIColor(rgb: AppGlobal.userDefaults[.tintColor])\n        \n        if !AppGlobal.userDefaults[.titleColor].isEmpty {\n            UINavigationBar.appearance().titleTextAttributes = [\n                NSAttributedStringKey.foregroundColor: UIColor(rgb: AppGlobal.userDefaults[.titleColor])\n            ]\n        }\n        \n        \/\/ Configure tab bar\n        if let controller = window?.rootViewController as? UITabBarController {\n            controller.tabBar.items?.get(1)?.image = UIImage(named: \"top-charts\", inBundle: AppConstants.bundle)\n            controller.tabBar.items?.get(1)?.selectedImage = UIImage(named: \"top-charts-filled\", inBundle: AppConstants.bundle)\n            controller.tabBar.items?.get(2)?.image = UIImage(named: \"explore\", inBundle: AppConstants.bundle)\n            controller.tabBar.items?.get(2)?.selectedImage = UIImage(named: \"explore-filled\", inBundle: AppConstants.bundle)\n            \n            if !AppGlobal.userDefaults[.tabTitleColor].isEmpty {\n                UITabBarItem.appearance().setTitleTextAttributes([\n                    NSAttributedStringKey.foregroundColor: UIColor(rgb: AppGlobal.userDefaults[.tabTitleColor])\n                    ], for: .selected)\n            }\n        }\n        \n        \/\/ Configure dark mode if applicable\n        if AppGlobal.userDefaults[.darkMode] {\n            UINavigationBar.appearance().barStyle = .black\n            UITabBar.appearance().barStyle = .black\n            UICollectionView.appearance().backgroundColor = .black\n            UITableView.appearance().backgroundColor = .black\n            UITableViewCell.appearance().backgroundColor = .clear\n        }\n    }\n}\n<\/pre>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/AppDelegate-Responsibilties.png\" alt=\"\" width=\"414\" height=\"306\" class=\"aligncenter size-full wp-image-41258\"><\/p>\n<p>This would be a nightmare to maintain. Fortunately, there&#8217;s a better way! It involves shifting the responsibilities to pluggable services.<\/p>\n<h2>Application Services to the Rescue!<\/h2>\n<p>Instead of dumping all the responsibilities on <code>AppDelegate<\/code>, let&#8217;s create an&nbsp;<code>ApplicationService<\/code>&nbsp;protocol that will plug into the app life cycle. Eventually your app delegate will look this:<\/p>\n<pre class=\"lang:swift decode:true\">@UIApplicationMain\nclass AppDelegate: PluggableApplicationDelegate {\n\n    override func services() -&gt; [ApplicationService] {\n        return [\n            ErrorApplicationService(),\n            LoggerApplicationService(),\n            AnalyticsApplicationService(),\n            BootApplicationService(with: window),\n            ShortcutApplicationService(),\n            NotificationApplicationService(),\n            ThemeApplicationService()\n        ]\n    }\n}\n\nextension AppDelegate {\n    \n    func application(_ application: UIApplication, performActionFor shortcutItem: UIApplicationShortcutItem, completionHandler: @escaping (Bool) -&gt; Void) {\n        ShortcutApplicationService()\n            .application(application, performActionFor: shortcutItem, completionHandler: completionHandler)\n    }\n    \n    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -&gt; Void) -&gt; Bool {\n        return DeepLinkApplicationService()\n            .application(application, continue: userActivity, restorationHandler: restorationHandler)\n    }\n}<\/pre>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/appdelegate_whoa-2.gif\" alt=\"\" width=\"500\" height=\"230\" class=\"size-medium wp-image-41267 aligncenter\"><\/p>\n<h2>Tell Me More!!<\/h2>\n<p>To accomplish this, we first create a protocol the&nbsp;<code>AppDelegate<\/code>&nbsp;services will conform to:<\/p>\n<pre class=\"lang:swift decode:true \">public protocol ApplicationService {\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool\n    \n    func applicationWillEnterForeground(_ application: UIApplication)\n    func applicationDidEnterBackground(_ application: UIApplication)\n    func applicationDidBecomeActive(_ application: UIApplication)\n    func applicationWillResignActive(_ application: UIApplication)\n    \n    func applicationProtectedDataWillBecomeUnavailable(_ application: UIApplication)\n    func applicationProtectedDataDidBecomeAvailable(_ application: UIApplication)\n    \n    func applicationWillTerminate(_ application: UIApplication)\n    func applicationDidReceiveMemoryWarning(_ application: UIApplication)\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)\n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error)\n}\n\n\/\/ MARK: - Optionals\n\npublic extension ApplicationService {\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool { return true }\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool { return true }\n    \n    func applicationWillEnterForeground(_ application: UIApplication) {}\n    func applicationDidEnterBackground(_ application: UIApplication) {}\n    func applicationDidBecomeActive(_ application: UIApplication) {}\n    func applicationWillResignActive(_ application: UIApplication) {}\n    \n    func applicationProtectedDataWillBecomeUnavailable(_ application: UIApplication) {}\n    func applicationProtectedDataDidBecomeAvailable(_ application: UIApplication) {}\n    \n    func applicationWillTerminate(_ application: UIApplication) {}\n    func applicationDidReceiveMemoryWarning(_ application: UIApplication) {}\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {}\n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {}\n}<\/pre>\n<p>This simply mirrors the <code>AppDelegate<\/code>&nbsp;events which we will plug into just a bit. Notice the protocol functions are optional because not all services will need to tap into all the events all the time.<\/p>\n<p>Next, we create a super class for our&nbsp;<code>AppDelegate<\/code>&nbsp;to bind the events to each of the services:<\/p>\n<pre class=\"lang:js decode:true\">open class PluggableApplicationDelegate: UIResponder, UIApplicationDelegate {\n    \n    public var window: UIWindow?\n    \n    \/\/\/ Lazy implementation of application services list\n    public lazy var lazyServices: [ApplicationService] = services()\n    \n    \/\/\/ List of application services for binding to `AppDelegate` events\n    open func services() -&gt; [ApplicationService] {\n        return [ \/* Populated from sub-class *\/ ]\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]? = nil) -&gt; Bool {\n        return lazyServices.reduce(true) {\n            $0 &amp;&amp; $1.application(application, willFinishLaunchingWithOptions: launchOptions)\n        }\n    }\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\n        return lazyServices.reduce(true) {\n            $0 &amp;&amp; $1.application(application, didFinishLaunchingWithOptions: launchOptions)\n        }\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func applicationWillEnterForeground(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationWillEnterForeground(application) }\n    }\n    \n    func applicationDidEnterBackground(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationDidEnterBackground(application) }\n    }\n    \n    func applicationDidBecomeActive(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationDidBecomeActive(application) }\n    }\n    \n    func applicationWillResignActive(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationWillResignActive(application) }\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func applicationProtectedDataWillBecomeUnavailable(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationProtectedDataWillBecomeUnavailable(application) }\n    }\n    \n    func applicationProtectedDataDidBecomeAvailable(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationProtectedDataDidBecomeAvailable(application) }\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func applicationWillTerminate(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationWillTerminate(application) }\n    }\n    \n    func applicationDidReceiveMemoryWarning(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationDidReceiveMemoryWarning(application) }\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        lazyServices.forEach { $0.application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken) }\n    }\n    \n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        lazyServices.forEach { $0.application(application, didFailToRegisterForRemoteNotificationsWithError: error) }\n    }\n}<\/pre>\n<p>What&#8217;s happening is the&nbsp;<code>services()<\/code>&nbsp;function is exposed for the <code>AppDelegate<\/code>&nbsp;to override in order to provide the services that want to plug and play. The <code>PluggableApplicationDelegate<\/code> will create a lazy property to prevent multiple instantiation of the services, then will finally call those functions when each of the app event fires.<\/p>\n<p>The&nbsp;<code>AppDelegate<\/code>&nbsp;inherits from the <code>PluggableApplicationDelegate<\/code> and provides the service instances it desires:<\/p>\n<pre class=\"lang:swift decode:true\">@UIApplicationMain\nclass AppDelegate: PluggableApplicationDelegate {\n\n    override func services() -&gt; [ApplicationService] {\n        return [\n            LoggerApplicationService(),\n            NotificationApplicationService()\n        ]\n    }\n}<\/pre>\n<p>And one of the application services would look something like this:<\/p>\n<pre class=\"lang:swift decode:true\">final class LoggerApplicationService: ApplicationService, HasDependencies {\n    private lazy var log: LogWorkerType = dependencies.resolveWorker()\n\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\n        log.config(for: application)\n        return true\n    }\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]?) -&gt; Bool {\n        log.info(\"App did finish launching.\")\n        return true\n    }\n    \n    func applicationDidReceiveMemoryWarning(_ application: UIApplication) {\n        log.warn(\"App did receive memory warning.\")\n    }\n    \n    func applicationWillTerminate(_ application: UIApplication) {\n        log.warn(\"App will terminate.\")\n    }\n}<\/pre>\n<p>Now the <code>AppDelegate<\/code>&nbsp;is scalable and maintainable! Instead mixing responsibilities in the same object, your pluggable service binds to the app lifecycle and manages its own processes.<\/p>\n<h2>BONUS: Pluggable UIViewController!<\/h2>\n<p>The <code>UIViewController<\/code>&nbsp;can reap the benefits by leveraging the same technique too. We will create a <code>ControllerService<\/code>&nbsp;protocol for those that want to plug and play into the view controller life cycle:<\/p>\n<pre class=\"lang:swift decode:true \">public protocol ControllerService {\n    func viewDidLoad(_ controller: UIViewController)\n    \n    func viewWillAppear(_ controller: UIViewController)\n    func viewDidAppear(_ controller: UIViewController)\n    \n    func viewWillDisappear(_ controller: UIViewController)\n    func viewDidDisappear(_ controller: UIViewController)\n    \n    func viewWillLayoutSubviews(_ controller: UIViewController)\n    func viewDidLayoutSubviews(_ controller: UIViewController)\n}\n\npublic extension ControllerService {\n    func viewDidLoad(_ controller: UIViewController) {}\n    \n    func viewWillAppear(_ controller: UIViewController) {}\n    func viewDidAppear(_ controller: UIViewController) {}\n    \n    func viewWillDisappear(_ controller: UIViewController) {}\n    func viewDidDisappear(_ controller: UIViewController) {}\n    \n    func viewWillLayoutSubviews(_ controller: UIViewController) {}\n    func viewDidLayoutSubviews(_ controller: UIViewController) {}\n}<\/pre>\n<p>Then we create a super <code>UIViewController<\/code>&nbsp;class that will bind the services to its events:<\/p>\n<pre class=\"lang:js decode:true \">open class PluggableController: UIViewController {\n    \n    \/\/\/ Lazy implementation of controller services list\n    public lazy var lazyServices: [ControllerService] = services()\n    \n    \/\/\/ List of controller services for binding to `UIViewController` events\n    open func services() -&gt; [ControllerService] {\n        return [ \/* Populated from sub-class *\/ ]\n    }\n    \n    open override func viewDidLoad() {\n        super.viewDidLoad()\n        lazyServices.forEach { $0.viewDidLoad(self) }\n    }\n    \n    open override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        lazyServices.forEach { $0.viewWillAppear(self) }\n    }\n    \n    open override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        lazyServices.forEach { $0.viewDidAppear(self) }\n    }\n    \n    open override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        lazyServices.forEach { $0.viewWillDisappear(self) }\n    }\n    \n    open override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n        lazyServices.forEach { $0.viewDidDisappear(self) }\n    }\n    \n    open override func viewWillLayoutSubviews() {\n        super.viewWillLayoutSubviews()\n        lazyServices.forEach { $0.viewWillLayoutSubviews(self) }\n    }\n    \n    open override func viewDidLayoutSubviews() {\n        super.viewDidLayoutSubviews()\n        lazyServices.forEach { $0.viewDidLayoutSubviews(self) }\n    }\n}<\/pre>\n<p>And finally, your view controller will end up like this:<\/p>\n<pre class=\"lang:swift decode:true \">class ViewController: PluggableController {\n\n    override func services() -&gt; [ControllerService] {\n        return [\n            ChatControllerService(),\n            OrderControllerService()\n        ]\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \/\/ Do any additional setup after loading the view, typically from a nib.\n    }\n\n}<\/pre>\n<p>An example of a controller service would be:<\/p>\n<pre class=\"lang:swift decode:true \">class ChatControllerService: ControllerService, HasDependencies {\n    private lazy var chatWorker: ChatWorkerType = dependencies.resolveWorker()\n\n    func viewDidLoad(_ controller: UIViewController) {\n        chatWorker.config()\n    }\n}\n\nextension ChatControllerService {\n    \n    func viewWillAppear(_ controller: UIViewController) {\n        chatWorker.subscribe()\n    }\n    \n    func viewWillDisappear(_ controller: UIViewController) {\n        chatWorker.unsubscribe()\n    }\n}<\/pre>\n<p>The controller services will have their functions triggered when the <code>UIViewController<\/code>&nbsp;events fire.<\/p>\n<h2>BONUS 2: Pluggable Application for Android!<\/h2>\n<p>This technique is cross-platform and can actually work for Android as well&#8230; your Android team will thank you! This is what the <code>ApplicationService<\/code>&nbsp;interface and <code>PluggableApplication<\/code>&nbsp;base class look like:<em><\/em><\/p>\n<pre class=\"lang:java decode:true\">interface ApplicationService {\n    fun onCreate() {}\n    fun onTerminate() {}\n    fun onConfigurationChanged(newConfig: Configuration?) {}\n\n    fun onActivityStarted(activity: Activity?) {}\n    fun onActivityStopped(activity: Activity?) {}\n    fun onActivityPaused(activity: Activity?) {}\n    fun onActivityResumed(activity: Activity?) {}\n    fun onActivityDestroyed(activity: Activity?) {}\n    fun onActivitySaveInstanceState(activity: Activity?, bundle: Bundle?) {}\n    fun onActivityCreated(activity: Activity?, bundle: Bundle?) {}\n}\n\nopen class PluggableApplication: Application.ActivityLifecycleCallbacks, Application() {\n\n    open lateinit var services: ArrayList&lt;ApplicationService&gt;\n\n    override fun onCreate() {\n        super.onCreate()\n        registerActivityLifecycleCallbacks(this)\n\n        services.forEach { it.onCreate() }\n    }\n\n    override fun onTerminate() {\n        super.onTerminate()\n        services.forEach { it.onTerminate() }\n    }\n\n    override fun onConfigurationChanged(newConfig: Configuration?) {\n        super.onConfigurationChanged(newConfig)\n        services.forEach { it.onConfigurationChanged(newConfig) }\n    }\n\n    override fun onActivityPaused(p0: Activity?) {\n        services.forEach { it.onActivityPaused(p0) }\n    }\n\n    override fun onActivityResumed(p0: Activity?) {\n        services.forEach { it.onActivityResumed(p0) }\n    }\n\n    override fun onActivityStarted(p0: Activity?) {\n        services.forEach { it.onActivityStarted(p0) }\n    }\n\n    override fun onActivityDestroyed(p0: Activity?) {\n        services.forEach { it.onActivityDestroyed(p0) }\n    }\n\n    override fun onActivitySaveInstanceState(p0: Activity?, p1: Bundle?) {\n        services.forEach { it.onActivitySaveInstanceState(p0, p1) }\n    }\n\n    override fun onActivityStopped(p0: Activity?) {\n        services.forEach { it.onActivityStopped(p0) }\n    }\n\n    override fun onActivityCreated(p0: Activity?, p1: Bundle?) {\n        services.forEach { it.onActivityCreated(p0, p1) }\n    }\n}\n<\/pre>\n<p>And the <code>FragmentService<\/code>&nbsp;and <code>PluggableFragment<\/code>&nbsp;base class:<\/p>\n<pre class=\"lang:java decode:true\">interface FragmentService {\n    fun onAttach(context: Context?)\n    fun onCreate(savedInstanceState: Bundle?) {}\n    fun onActivityCreated(savedInstanceState: Bundle?) {}\n    fun onStart() {}\n    fun onViewCreated(view: View, savedInstanceState: Bundle?) {}\n    fun onResume() {}\n    fun onSaveInstanceState(outState: Bundle) {}\n    fun onPause() {}\n    fun onStop() {}\n    fun onDestroyView() {}\n    fun onDestroy() {}\n    fun onDetach() {}\n}\n\nopen class PluggableFragment: Fragment() {\n\n    open lateinit var services: ArrayList&lt;FragmentService&gt;\n\n    override fun onAttach(context: Context?) {\n        super.onAttach(context)\n        services.forEach { it.onAttach(context) }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        services.forEach { it.onCreate(savedInstanceState) }\n    }\n\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\n        super.onActivityCreated(savedInstanceState)\n        services.forEach { it.onActivityCreated(savedInstanceState) }\n    }\n\n    override fun onStart() {\n        super.onStart()\n        services.forEach { it.onStart() }\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        services.forEach { it.onViewCreated(view, savedInstanceState) }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        services.forEach { it.onResume() }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        services.forEach { it.onSaveInstanceState(outState) }\n    }\n\n    override fun onPause() {\n        super.onPause()\n        services.forEach { it.onPause() }\n    }\n\n    override fun onStop() {\n        super.onStop()\n        services.forEach { it.onStop() }\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        services.forEach { it.onDestroyView() }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        services.forEach { it.onDestroy() }\n    }\n\n    override fun onDetach() {\n        super.onDetach()\n        services.forEach { it.onDetach() }\n    }\n}<\/pre>\n<p>You finally end up with a clean <code>Application<\/code>&nbsp;like this:<\/p>\n<pre class=\"lang:java decode:true\">class MyApplication: PluggableApplication() {\n    \n    override var services: ArrayList&lt;ApplicationService&gt; = {\n        arrayListOf(\n            ErrorApplicationService(),\n            LoggerApplicationService(),\n            AnalyticsApplicationService(),\n            BootApplicationService(with: window),\n            ShortcutApplicationService(),\n            NotificationApplicationService(),\n            ThemeApplicationService()\n        )\n    }()\n}<\/pre>\n<h2>Conclusion<\/h2>\n<p>The pluggable service technique will greatly reduce code and responsibilities for your application and controller life cycles. See <a href=\"https:\/\/github.com\/basememara\/PluggableAppDelegate\" target=\"_blank\" rel=\"noopener\">a sample application<\/a> using this technique to try it out.<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><a href=\"https:\/\/medium.com\/ios-os-x-development\/pluggableapplicationdelegate-e50b2c5d97dd\" target=\"_blank\" rel=\"noopener\"><\/a><\/p>\n","link":"https:\/\/basememara.com\/pluggable-appdelegate-services\/","comment_count":0,"author":2,"featured_media":41258,"terms":[56,80,53,50,55],"meta":{"_series_part":"8"},"created":"2018-02-16T18:24:43","modified":"2019-01-05T05:31:57"},{"id":652,"title":"Creating Cross-Platform Swift Frameworks for iOS, watchOS, and tvOS via Carthage and CocoaPods","slug":"creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods","type":"post","excerpt":"In this post, I'd like to show you how to create a Swift framework for iOS, watchOS, and tvOS and get them distributed via Carthage and CocoaPods. It's a technique I use to share frameworks across all my apps and with the community.","content":"<p>The title is a mouth-full, but so is creating cross-platform frameworks. In this post, I&#8217;d like to show you how to create a Swift framework for iOS, watchOS, and tvOS and get them distributed via <a href=\"https:\/\/github.com\/Carthage\/Carthage\" target=\"_blank\" rel=\"noopener\">Carthage<\/a> and <a href=\"https:\/\/cocoapods.org\" target=\"_blank\" rel=\"noopener\">CocoaPods<\/a>. It&#8217;s a technique I use\u00a0to share frameworks across all my apps and with the community. Note this will only target <em>iOS 8<\/em> above\u00a0because of dynamic frameworks. Ready?<\/p>\n<h2>Creating the Project<\/h2>\n<p>First, let&#8217;s create an empty project. When I say empty, I literally mean empty. From Xcode, choose a template under <em>&#8220;Other &gt; Empty&#8221;<\/em>:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_308-500x354.png\" alt=\"Xcode Empty Project\" width=\"500\" height=\"354\" class=\"aligncenter size-medium wp-image-653\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_308-500x354.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_308-768x544.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_308-1024x725.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_308.png 1444w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>From here, you can start creating your targets per platform. You can do this under <em>&#8220;File &gt; New &gt; Target&#8221;<\/em>. Choose the <em>&#8220;Cocoa Touch Framework&#8221;<\/em> template under <em>&#8220;iOS &gt; Framework &amp; Library&#8221;<\/em>. You can call it <em>&#8220;MyModule iOS&#8221;<\/em>. Do not check <em>&#8220;Include Unit Tests&#8221;<\/em>, we will do this later.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_309-500x467.png\" alt=\"Xcode iOS Framework\" width=\"500\" height=\"467\" class=\"aligncenter size-medium wp-image-672\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_309-500x467.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_309-768x718.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_309-1024x957.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Now do the same for <em>&#8220;watchOS &gt; Framework &amp; Library&#8221;<\/em>\u00a0and <em>&#8220;tvOS &gt; Framework &amp; Library&#8221;<\/em>.<\/p>\n<p>Next, create an empty folder called <em>&#8220;Sources&#8221;<\/em> and add it to the project. This is where all your code will go. This convention is meant to be forward-compatible with the <a href=\"https:\/\/swift.org\/package-manager\/\" target=\"_blank\" rel=\"noopener\">Swift Package Manager<\/a> when Swift 3 comes out \ud83d\ude09<\/p>\n<p>So far, your project should look something like this:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_310.png\" alt=\"Xcode framework new project\" width=\"404\" height=\"218\" class=\"aligncenter size-full wp-image-654\" \/><\/p>\n<h2>The Info.plist Files<\/h2>\n<p>Now that we have our foundation to our project, it&#8217;s time to fix it up so the platforms play nice together against the same code base.\u00a0Let&#8217;s take care of the <em>&#8220;Info.plist&#8221;<\/em> files. Go into each platform folder created above and start appending the platform name after the <em>&#8220;Info.plist&#8221;<\/em> files. For example for iOS, rename the file to <em>&#8220;Info-iOS.plist&#8221;<\/em>.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_311-500x159.png\" alt=\"Xcode plist file iOS\" width=\"500\" height=\"159\" class=\"aligncenter size-medium wp-image-655\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_311-500x159.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_311-768x245.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_311.png 816w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/>Once you have done this for each platform, move them all into the <em>&#8220;Sources&#8221;<\/em> folder:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_312-500x143.png\" alt=\"Xcode plist files platforms\" width=\"500\" height=\"143\" class=\"aligncenter size-medium wp-image-656\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_312-500x143.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_312.png 684w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Now\u00a0you can\u00a0add the <em>.plist<\/em> files into the project by right-clicking on your <em>&#8220;Sources&#8221;<\/em> folder in Xcode and select <em>&#8220;Add files&#8221;<\/em>. Uncheck <em>&#8220;Copy items if needed&#8221;<\/em>, select <em>&#8220;Create groups&#8221;<\/em>, and make sure none of the\u00a0Target Memberships are selected. Your Xcode project should look like this so far:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_313.png\" alt=\"Xcode source 1\" width=\"394\" height=\"404\" class=\"aligncenter size-full wp-image-657\" \/><\/p>\n<p>Now\u00a0we need to\u00a0update the <em>&#8220;Build Settings&#8221;<\/em> to point to the respective <em>.plist<\/em> file name and location for each platform target. So for the iOS target, go to <em>&#8220;Build Settings &gt; Packaging &gt; Info.plist File&#8221;<\/em>. From here, put in the relative path to the <em>.plist<\/em> file with the appended platform name you did earlier:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_315-500x241.png\" alt=\"Xcode Info.plist Packaging Build Settings\" width=\"500\" height=\"241\" class=\"aligncenter size-medium wp-image-659\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_315-500x241.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_315-768x371.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_315-1024x494.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Finally for the <em>.plist<\/em> files, delete the entry under &#8220;Build Phases &gt; Copy Bundle Sources&#8221;. This was just a side-effect of adding the files into the Xcode project, but we don&#8217;t need to copy the bundle since it is taken care of in the previous step when we updated the path in the build settings. Here is the entry you must delete for each platform target:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_316-500x201.png\" alt=\"Xcode Build Settings Copy Bundle Resources\" width=\"500\" height=\"201\" class=\"aligncenter size-medium wp-image-660\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_316-500x201.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_316-768x308.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_316-1024x411.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<h2>The Header Files<\/h2>\n<p>Unfortunately, we have to live with <em>Objective-C<\/em> for awhile, so let&#8217;s handle our header file so <em>Objective-C<\/em> projects can\u00a0consume our <em>Swift<\/em> framework and be cool again. Go to the <em>&#8220;.h&#8221;<\/em> file Xcode created for you under the iOS folder and remove the platform name from the names in the source code:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_317-500x164.png\" alt=\"Xcode framework header file\" width=\"500\" height=\"164\" class=\"aligncenter size-medium wp-image-661\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_317-500x164.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_317-768x251.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_317-1024x335.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_317.png 1534w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Above, I removed <em>&#8220;<\/em><span><em>_iOS&#8221;<\/em> from <em>&#8220;ZamzamKitData_iOSVersionNumber&#8221;<\/em>\u00a0and <em>&#8220;ZamzamKitData_iOSVersionString&#8221;<\/em>. Save the file then rename it to remove <em>&#8221; iOS&#8221;<\/em> from the file name. Next drag it into the <em>&#8220;Sources&#8221;<\/em> folder.<\/span><\/p>\n<p>Go to Finder and you&#8217;ll notice it&#8217;s not really in the &#8220;Sources&#8221; folder, but still in the iOS target folder. So manually move it to the <em>&#8220;Sources&#8221;<\/em> folder from Finder. This will break your project, so go back to Xcode and update the location AND while you&#8217;re at it select all of the <em>&#8220;Target Memberships&#8221;\u00a0<\/em>and select <em>&#8220;Public&#8221;<\/em>:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_318-500x203.png\" alt=\"Xcode header file\" width=\"500\" height=\"203\" class=\"aligncenter size-medium wp-image-662\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_318-500x203.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_318-768x312.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_318-1024x416.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Now you can delete\u00a0the platform folders from the project and <em>&#8220;Move to Trash&#8221;<\/em>\u00a0when prompted. Our code will go in the &#8220;Sources&#8221; folder going forward, not these target folders. Remember, your framework targets are still available to us, we just don&#8217;t need the folders Xcode created for us. At this point, your project should look a lot cleaner:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_319-500x310.png\" alt=\"Xcode project 2\" width=\"500\" height=\"310\" class=\"aligncenter size-medium wp-image-663\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_319-500x310.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_319-768x475.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_319-1024x634.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_319.png 1234w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Go ahead and add a <em>Swift<\/em> code file in the <em>&#8220;Sources&#8221;<\/em> folder to try it out. You&#8217;ll be able to toggle which <em>&#8220;Target Memberships&#8221;<\/em> this code file is for (iOS, watchOS, tvOS, or all of them).<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_320.png\" alt=\"Xcode cross-platform file\" width=\"402\" height=\"370\" class=\"aligncenter size-full wp-image-664\" \/><\/p>\n<h2>The Build Settings<\/h2>\n<p>Let&#8217;s update our <em>&#8220;Build Settings&#8221;<\/em> to accommodate the cross-platform architecture\u00a0we created. For each of the platform targets, go to <em>&#8220;Build Settings &gt; Packaging &gt; Product Name&#8221;<\/em> and remove the appended platform name, so it will be an identical name for all the platforms so they are packaged as one product:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_321-500x345.png\" alt=\"Xcode build settings product name\" width=\"500\" height=\"345\" class=\"aligncenter size-medium wp-image-665\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_321-500x345.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_321-768x531.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_321-1024x707.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>For Carthage support, you&#8217;ll have to make your targets <em>&#8220;Shared&#8221;<\/em>. To do this <em>&#8220;Manage Schemes&#8221;<\/em> and check the <em>&#8220;Shared&#8221;<\/em> areas:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_329-500x166.png\" alt=\"Xcode Manage Scheme Shared\" width=\"500\" height=\"166\" class=\"aligncenter size-medium wp-image-671\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_329-500x166.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_329-768x255.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_329-1024x340.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_329.png 1524w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>These next steps aren&#8217;t necessary, but I highly recommend them:<\/p>\n<ol>\n<li>Set <em>&#8220;Require Only App-Extension-Safe API&#8221;<\/em> to <em>&#8220;Yes&#8221;<\/em>. This will allow your framework to be used in extensions like the <em>Today Widget<\/em>, which have tighter restrictions. If you do something in your code that breaks this restriction, you&#8217;ll get a compile error right away so you can think of a different approach to your code. This is better than later finding out that you need to use your framework in an extension and have to re-architect some parts of your code.<\/li>\n<li>This is more of a business\/management decision, but for my apps I usually support a minimum of <em>iOS 8.4<\/em>, <em>watchOS 2.0<\/em>, and <em>tvOS 9.0<\/em>. The reason is because iOS 8.4 has some goodies not available in previous version, such as support for Apple Watch and security updates. Plus this is just some of the perks of developing for the Apple ecosystem instead of Android <span>\ud83d\ude09<\/span>. Check out your app stats and don&#8217;t end up supporting older version just for one or two people. This setting should be configured under your <em>&#8220;Project &gt; Info &gt; Deployment Target&#8221;<\/em>. This will be inherited to the target frameworks. However, for the watchOS and tvOS targets, you&#8217;ll have to go <em>&#8220;Build Settings &gt; Deployment &gt; watchOS\/tvOS Deployment Target&#8221;<\/em> and set it to 2.0\/9.0. Don&#8217;t worry though, you&#8217;ll be coding against the latest SDK versions across the board using\u00a0the <em>&#8220;Base SDK&#8221;<\/em> setting.\u00a0You are just supporting older versions with the <em>&#8220;Deployment Target&#8221;<\/em> and will get warned by the compiler if something in your code is not supported in an older version you&#8217;re trying to support.<img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_327-500x124.png\" alt=\"Xcode iOS Deployment Target\" width=\"500\" height=\"124\" class=\"aligncenter size-medium wp-image-667\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_327-500x124.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_327-768x190.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_327-1024x253.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_327.png 1336w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_328-500x99.png\" alt=\"Xcode watchOS Deployment Target\" width=\"500\" height=\"99\" class=\"aligncenter size-medium wp-image-668\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_328-500x99.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_328-768x153.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_328-1024x203.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/li>\n<\/ol>\n<h2>The Meta Data<\/h2>\n<p>Let&#8217;s create a <em>&#8220;Metadata&#8221;<\/em> folder and add some miscellaneous\u00a0files such as a read me, license, podspec, etc. This is what I have:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_323-500x224.png\" alt=\"Xcode meta data folder\" width=\"500\" height=\"224\" class=\"aligncenter size-medium wp-image-669\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_323-500x224.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_323-768x344.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_323-1024x458.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>When you add these files to your project, make sure to remove them from the <em>&#8220;Build Phases &gt; Compile Sources&#8221;<\/em>\u00a0and <em>&#8220;Build Phases &gt; Copy Bundle Resources&#8221;\u00a0<\/em>since they don&#8217;t need to be compiled.<\/p>\n<h2>The Workspace<\/h2>\n<p><em>Are you still with me? Trust me, the end game is worth it&#8230; just a little bit longer&#8230;<\/em><\/p>\n<p>Save your project as a workspace by going to <em>&#8220;File &gt; Save As Workspace&#8221;<\/em>. Call it the same as your project and save it in the root of your project folder. Now close the project and open this new workspace.<\/p>\n<p>Also for convenience, add a Playground file so you can sketch some ideas out while dreaming up some code. Go to <em>&#8220;File &gt; New &gt; Playground&#8221;<\/em> and call it the same name as your workspace. Close the playground and add it to your workspace as a sibling, not a child, of your project.<\/p>\n<h2>The Tests<\/h2>\n<p>Add a new target to your Xcode project. I like to add these templates for unit testing and sample demos:<\/p>\n<ol>\n<li><em>iOS &gt; Test &gt; iOS Unit Testing Bundle<\/em><\/li>\n<li><em>iOS &gt; Application &gt; Tabbed Application<\/em><\/li>\n<li><em>watchOS &gt; Application &gt; WatchKit App<\/em><\/li>\n<li><em>tvOS &gt; Test &gt; TV Unit Testing Bundle<\/em><\/li>\n<\/ol>\n<h2>The Big Picture<\/h2>\n<p>I commend you for reading this far! Here&#8217;s how your workspace should look like:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_324-500x519.png\" alt=\"Xcode Framework Project\" width=\"500\" height=\"519\" class=\"aligncenter size-medium wp-image-670\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_324-500x519.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_324-768x796.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_324-987x1024.png 987w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_324.png 1026w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>I created some empty folders in the <em>&#8220;Sources&#8221;<\/em> folder as a convention\u00a0for my frameworks, but of course add your own flavor.<\/p>\n<p>Finally, add your workspace to git or some source control and add any dependencies you&#8217;d like your framework to use. Check out <a href=\"https:\/\/robots.thoughtbot.com\/creating-your-first-ios-framework\" target=\"_blank\" rel=\"noopener\">this excellent blog post<\/a> for details on how to do that.<\/p>\n<p>See below how you can select which platform to target per file:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_330-500x210.png\" alt=\"Xcode Cross Platform File\" width=\"500\" height=\"210\" class=\"aligncenter size-medium wp-image-675\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_330-500x210.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_330-768x323.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_330-1024x430.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_330.png 1218w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Also notice you can even have more granular control within the code\u00a0using\u00a0<a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/Swift\/Conceptual\/BuildingCocoaApps\/InteractingWithCAPIs.html#\/\/apple_ref\/doc\/uid\/TP40014216-CH8-ID34\" target=\"_blank\" rel=\"noopener\">Swift Conditional Compilation<\/a>\u00a0*if needed*. I advise against it since segmenting your file into different platforms is not very elegant and can be messy. Instead, use\u00a0protocol extensions to segment code <span>\ud83d\udca1<\/span><\/p>\n<h2>Conclusion<\/h2>\n<p>It was a long journey, but now you&#8217;re ready to rock some code and support multiple platforms with a single code base. When adding new code files, just select the <em>&#8220;Target Memberships&#8221;<\/em> you&#8217;d like to support for that particular code file. And <a href=\"http:\/\/basememara.com\/unit-testing-in-swift-xcode-and-beyond\/\">don&#8217;t forget to unit test<\/a>&#8230; \ud83d\ude09<\/p>\n<p><strong><em>Happy Coding!!<\/em><\/strong><\/p>\n<hr \/>\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!<\/h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https:\/\/iosmentor.io\/webinars\/swift-frameworks\/\" target=\"_blank\" rel=\"noopener\"><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" \/><\/a><\/p>\n","link":"https:\/\/basememara.com\/creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods\/","comment_count":22,"author":2,"featured_media":675,"terms":[80,61,52,64,50,55,47],"meta":{"_series_part":"6"},"created":"2016-03-22T17:32:30","modified":"2019-01-05T03:50:02"},{"id":221,"title":"Get an Absolute URL from a Relative Path in C# .NET","slug":"get-an-absolute-url-from-a-relative-path-in-c-net","type":"post","excerpt":"Getting an absolute path from a relative one has been made very easy and pleasant by .NET. Just feed the relative path to the \"Page.ResolveUrl\" method and that's it! One thing that was left out by .NET though is how to get an absolute URL from a relative path? With social networks on the rise, passing around your links has become more important than ever. There are many ways to do this, but all have their drawbacks. I will show you a static method that I use that solves just about all cases.","content":"<p>Getting an absolute path from a relative one has been made very easy and pleasant by .NET. Just feed the relative path to the &#8220;Page.ResolveUrl&#8221; method and that&#8217;s it!<\/p>\n<p>One thing that was left out by .NET though is how to get an absolute URL from a relative path? With social networks on the rise, passing around your links has become more important than ever. There are many ways to do this, but all have their drawbacks. I will show you a static method that I use that solves just about all cases&#8230; <a href=\"https:\/\/web.archive.org\/web\/20150324180152\/http:\/\/blog.falafel.com\/get-an-absolute-url-from-a-relative-path-in-c-net\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/get-an-absolute-url-from-a-relative-path-in-c-net\/","comment_count":0,"author":2,"featured_media":null,"terms":[2,41],"meta":{"_series_part":""},"created":"2012-03-15T15:59:35","modified":"2018-10-21T13:49:27"},{"id":211,"title":"Using ASP.NET Web API for Sitefinity REST Services","slug":"using-asp-net-web-api-for-sitefinity-rest-services","type":"post","excerpt":"Although you could implement your own RESTful WCF Service in Sitefinity, there is a gem Microsoft dropped into the MVC 4 Beta. I am referring to Web API: a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the .NET Framework.\"","content":"<p>Although you could\u00a0<a href=\"http:\/\/www.sitefinity.com\/documentation\/documentationarticles\/developers-guide\/deep-dive\/client-side-programming\/implementing-your-own-restful-wcf-service\">implement your own RESTful WCF Service in Sitefinity<\/a>, there is a gem Microsoft dropped into the MVC 4 Beta. I am referring to\u00a0<a href=\"http:\/\/www.asp.net\/web-api\">Web API<\/a>: a framework that makes it\u00a0<em>easy<\/em>\u00a0to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the .NET Framework.&#8221;&#8230; <a href=\"https:\/\/web.archive.org\/web\/20150320005853\/http:\/\/blog.falafel.com\/using-aspnet-web-api-for-sitefinity-rest-services\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/using-asp-net-web-api-for-sitefinity-rest-services\/","comment_count":0,"author":2,"featured_media":null,"terms":[2,10,7,37],"meta":{"_series_part":""},"created":"2012-06-20T15:49:03","modified":"2018-10-21T13:48:47"},{"id":201,"title":"Generic Repository Pattern with Entity Framework and Web API","slug":"generic-repository-pattern-with-entity-framework-and-web-api","type":"post","excerpt":"If you are like any other coder, cutting and pasting snippets should put up a red flag in your mind. You will quickly hit this threshold when creating CRUD-services for MVC 4 applications over and over again. This lead me to create a repository pattern using generic types and base controller classes that I would like to share with you.","content":"<p>If you are like any other coder, cutting and pasting snippets should put up a red flag in your mind. You will\u00a0quickly\u00a0hit this threshold when creating CRUD-services for MVC 4 applications\u00a0<em>over and over again<\/em>. This lead me to create a repository pattern using generic types and base controller classes that I would like to share with you&#8230; <a href=\"https:\/\/web.archive.org\/web\/20150319013058\/http:\/\/blog.falafel.com\/generic-repository-pattern-with-entity-framework-and-web-api\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/generic-repository-pattern-with-entity-framework-and-web-api\/","comment_count":0,"author":2,"featured_media":null,"terms":[2,11,38,37],"meta":{"_series_part":""},"created":"2013-02-05T15:36:26","modified":"2018-10-21T13:47:52"},{"id":187,"title":"Add Page Names as HTML Classes","slug":"add-page-names-as-html-classes","type":"post","excerpt":"Wouldn't it be great if you can specify different styles per page all from the stylesheet? For example, your home page may have a larger header section than the rest of your pages. The solution would be to add a different class on each page so you can do something like this.","content":"<div id=\"post-area\" class=\"col span_9\">\n<article id=\"post-234\" class=\"post-234 post type-post status-publish format-standard hentry tag-css tag-html tag-javascript_\">\n<div class=\"post-content\">\n<div class=\"content-inner\">\n<p>Wouldn\u2019t it be great if you can specify different styles per page all from the stylesheet? For example, your home page may have a larger header section than the rest of your pages. The solution would be to add a different class on each page so you can do something like this:<\/p>\n<pre class=\"lang:js decode:true\">.header {\r\n\u00a0\u00a0height: 30px;\r\n}\r\n\u00a0\r\n.home .header {\r\n\u00a0\u00a0height: 100px;\r\n}<\/pre>\n<p>Only problem with this is most of the time your pages are generated by a content management system or web application. That means, you would have to hook into the page lifecycle and add the page name to the &lt;html&gt; or &lt;body&gt; tag. That seems like overkill. JavaScript to the rescue!<\/p>\n<h2>Page Name as Class<\/h2>\n<p>Add this in your startup script to add the page name to the &lt;html&gt; tag:<\/p>\n<pre class=\"lang:js decode:true\">\/\/ADD PAGE NAME TO HTML TAG AS CLASS\r\nvar file = window.location.pathname;\r\nvar index = file.lastIndexOf('\/');\r\nvar page = index &gt;= 0 ? file.substring(index + 1).toLowerCase() : '';\r\n$(document.documentElement).addClass(page || 'home');<\/pre>\n<p>First it is getting the page name by finding the last segment of the URL. Then it goes to the root object (&lt;html&gt;) and adds the page name as a class to it. It defaults to \u2018home\u2019 if there is no page in the URL.\u00a0Now each page will have its own specific class name!<\/p>\n<pre class=\"lang:js decode:true\">&lt;html class=\"home\"&gt;<\/pre>\n<h2>Page Title as Class<\/h2>\n<p>If the page file name is not enough for you as the class name, you can use the document title as the class name. That will give you more control over what class name is generated. It will need to be scrubbed from special characters though because there is a specification on what are valid class characters. Here\u2019s how you would do that:<\/p>\n<pre class=\"lang:js decode:true\">\/\/ADD TITLE TO HTML TAG AS CLASS\r\nif (document.title)\r\n\u00a0\u00a0$(document.documentElement)\r\n\u00a0\u00a0\u00a0\u00a0.addClass(_.slugify(document.title));<\/pre>\n<p>In this case, it is checking if a page title even exists, then going to the root object (&lt;html&gt;) and adds the scubbed page title as a class to it.\u00a0<span>The magic ingredient here is <a href=\"https:\/\/web.archive.org\/web\/20150319194502\/http:\/\/epeli.github.io\/underscore.string\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">underscore-string\u2019s<\/a> <em>_.slugify<\/em> function will will scrub the name for valid class names. It is a great plugin to the famous <a href=\"https:\/\/web.archive.org\/web\/20150319194502\/http:\/\/underscorejs.org\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">underscore.js<\/a> project. It\u2019s open source so you can steal the RegEx from the <a href=\"https:\/\/web.archive.org\/web\/20150319194502\/https:\/\/github.com\/epeli\/underscore.string\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">source code<\/a> if you like. \u00a0Now each page will have the title as a class name.<\/span><\/p>\n<p>This should make your graphic designers very happy <img src=\"https:\/\/web.archive.org\/web\/20150319194502im_\/http:\/\/blog.falafel.com\/wp-includes\/images\/smilies\/icon_wink.gif\" alt=\";)\" class=\"wp-smiley\" scale=\"0\" \/><\/p>\n<p><strong><em>NOTE:<\/em><\/strong> I recommend prefixing the class name with page-* to prevent conflicting with other class names.<a href=\"https:\/\/web.archive.org\/web\/20150319194502\/http:\/\/blog.falafel.com\/author\/basem-emara\/\" rel=\"nofollow\" class=\"no-ajaxy\"><\/a><\/p>\n<\/div>\n<\/div>\n<\/article>\n<\/div>\n","link":"https:\/\/basememara.com\/add-page-names-as-html-classes\/","comment_count":0,"author":2,"featured_media":null,"terms":[32,3],"meta":{"_series_part":""},"created":"2013-09-06T15:24:03","modified":"2018-10-21T13:44:42"},{"id":171,"title":"New Drag to Drop Widget for Kendo UI","slug":"new-drag-to-drop-widget-for-kendo-ui","type":"post","excerpt":"Kendo UI has an excellent drag and drop framework. Although it has a nice API and is very capable, I found it a bit difficult to understand due to the disconnected implementation between the drag and the drop. There are two separate widgets to create a single drag and drop action: one is the kendoDraggable widget and the other is the kendoDropTarget.","content":"<p><a href=\"http:\/\/www.telerik.com\/kendo-ui\" target=\"_blank\" rel=\"noopener\">Kendo UI<\/a>\u00a0has an excellent\u00a0<a href=\"http:\/\/demos.telerik.com\/kendo-ui\/web\/dragdrop\/index.html\" target=\"_blank\" rel=\"noopener\">drag and drop framework<\/a>. Although it has a nice\u00a0<a href=\"http:\/\/docs.telerik.com\/kendo-ui\/getting-started\/framework\/draganddrop\/overview\" target=\"_blank\" rel=\"noopener\">API<\/a>\u00a0and is very capable, I found it a bit difficult to understand due to the disconnected implementation between the drag and the drop. There are two separate widgets to create a single drag and drop action: one is the\u00a0<a href=\"http:\/\/docs.telerik.com\/kendo-ui\/api\/framework\/draggable\" target=\"_blank\" rel=\"noopener\">kendoDraggable<\/a>\u00a0widget and the other is the\u00a0<a href=\"http:\/\/docs.telerik.com\/kendo-ui\/api\/framework\/droptarget\" target=\"_blank\" rel=\"noopener\">kendoDropTarget<\/a>&#8230; <a href=\"https:\/\/web.archive.org\/web\/20151029123718\/http:\/\/blog.falafel.com\/new-drag-to-drop-widget-for-kendo-ui\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/new-drag-to-drop-widget-for-kendo-ui\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,8],"meta":{"_series_part":""},"created":"2014-03-04T04:03:38","modified":"2018-10-21T13:41:33"},{"id":169,"title":"The Truth About False in JavaScript","slug":"the-truth-about-false-in-javascript","type":"post","excerpt":"The distinction between true and false is a blurry line in JavaScript. This is why you hear the term \"truthy\/falsy\" in the JavaScript world. As a follow up to Noel's blog post, I would like to focus only on one side of the coin. It was inspired by a pop quiz from my teammate, Jesse Liberty.","content":"<p>The distinction between\u00a0<em>true\u00a0<\/em>and\u00a0<em>false\u00a0<\/em>is a blurry line in JavaScript. This is why you hear the term &#8220;<em>truthy\/falsy<\/em>&#8221;\u00a0in the JavaScript world.\u00a0As a follow up to\u00a0<a href=\"http:\/\/blog.falafel.com\/blogs\/noel-rice\/2012\/04\/23\/the-truth-about-javascript\">Noel&#8217;s blog post<\/a>, I would like to focus only on one side of the coin. It was inspired by a pop quiz from my teammate,\u00a0<a href=\"http:\/\/blog.falafel.com\/blogs\/jesseliberty\">Jesse Liberty<\/a>&#8230; <a href=\"https:\/\/web.archive.org\/web\/20160403205914\/http:\/\/blog.falafel.com\/the-truth-about-false-in-javascript\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/the-truth-about-false-in-javascript\/","comment_count":0,"author":2,"featured_media":null,"terms":[3],"meta":{"_series_part":""},"created":"2014-03-14T03:53:32","modified":"2018-10-21T13:41:03"},{"id":165,"title":"Getting Started with Node.js for Windows","slug":"getting-started-with-node-js-for-windows","type":"post","excerpt":"With the recent announcements of Paypal and Netflix moving to Node.js, the server-side JavaScript platform has proven itself worthy to enterprises. It's one small step for Node, one giant leap for JavaScript! From developers of .NET, Java, PHP, Ruby on Rails, and more, all walks of server-side coders are converging to the platform. And as bigger players like Yahoo, Walmart, and Oracle join the table, Node is loosing its reputation as being intrinsically immature and unstable. In this post, I would like to show you how easy it is to set up Node.js in a Windows world.","content":"<p>With the recent announcements of\u00a0<a href=\"http:\/\/www.infoworld.com\/t\/javascript\/paypal-and-netflix-cozy-nodejs-237593\" target=\"_blank\" rel=\"noopener\">Paypal and Netflix moving to Node.js<\/a>, the server-side JavaScript platform has proven itself worthy to enterprises. It&#8217;s one small step for Node, one giant leap for JavaScript! From developers of .NET, Java, PHP, Ruby on Rails, and more, all walks of server-side coders are converging to the platform. And as bigger players like\u00a0<a href=\"http:\/\/blog.appfog.com\/node-js-is-taking-over-the-enterprise-whether-you-like-it-or-not\/\" target=\"_blank\" rel=\"noopener\">Yahoo, Walmart, and Oracle<\/a>\u00a0join the table, Node is loosing its reputation as being intrinsically immature and unstable. In this post, I would like to show you how easy it is to set up Node.js in a Windows world&#8230; <a href=\"https:\/\/web.archive.org\/web\/20160314053936\/http:\/\/blog.falafel.com\/getting-started-with-nodejs-for-windows\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/getting-started-with-node-js-for-windows\/","comment_count":0,"author":2,"featured_media":166,"terms":[3,27,7],"meta":{"_series_part":""},"created":"2014-03-18T03:37:57","modified":"2018-10-21T13:40:07"},{"id":160,"title":"Geolocation Tracking in Kendo UI Mobile and Google Maps","slug":"geolocation-tracking-in-kendo-ui-mobile-and-google-maps","type":"post","excerpt":"There are many posts out there about getting the current geolocation of a user via HTML5. However, in this post, I would like to show you how you can track a user's geolocation. After all, what good is getting the current location of a user if they are mobile and on the move? The geolocation API is exposed in JavaScript using the navigator object.","content":"<p>There are many posts out there about getting the current geolocation of a user via HTML5. However, in this post, I would like to show you how you can\u00a0<em>track\u00a0<\/em>a user&#8217;s geolocation. After all, what good is getting the current location of a user if they are mobile and on the move? The geolocation API is exposed in JavaScript using the navigator object&#8230; <a href=\"https:\/\/web.archive.org\/web\/20150318191844\/http:\/\/blog.falafel.com\/geolocation-tracking-in-kendo-ui-mobile-and-google-maps\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/geolocation-tracking-in-kendo-ui-mobile-and-google-maps\/","comment_count":0,"author":2,"featured_media":161,"terms":[26,12,3,8,4],"meta":{"_series_part":""},"created":"2014-04-30T03:09:17","modified":"2018-10-21T13:38:19"},{"id":191,"title":"Kendo Class Inheritance and RequireJS","slug":"kendo-class-inheritance-and-requirejs","type":"post","excerpt":"Kendo UI includes base class objects that provides class inheritance. This is very useful for creating elegant, object-oriented JavaScript code. Couple this with RequireJS and you have a very scalable architecture.","content":"<p><a href=\"http:\/\/www.kendoui.com\/\" target=\"_blank\" rel=\"noopener\">Kendo UI<\/a>\u00a0includes\u00a0<a href=\"http:\/\/docs.kendoui.com\/api\/framework\/class\" target=\"_blank\" rel=\"noopener\">base class objects<\/a>\u00a0that provides class inheritance. This is very useful for creating elegant, object-oriented JavaScript code. Couple this with\u00a0<a href=\"http:\/\/requirejs.org\/\" target=\"_blank\" rel=\"noopener\">RequireJS<\/a>\u00a0and you have a very scalable architecture&#8230; <a href=\"https:\/\/web.archive.org\/web\/20150320015129\/http:\/\/blog.falafel.com\/kendo-class-inheritance-and-requirejs\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/kendo-class-inheritance-and-requirejs\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,8,9],"meta":{"_series_part":""},"created":"2013-07-15T15:27:44","modified":"2018-10-21T13:37:28"},{"id":153,"title":"Redirecting Mobile Users by Screen Size Instead of Device Type","slug":"redirecting-mobile-users-by-screen-size-instead-of-device-type","type":"post","excerpt":"Let's face it, the web was not designed for phones. For the past decade, developers have been desperately retrofitting the web for a post-mobile world. We need something more fundamental, such as extending the User Agent to include attributes like screen size values. Until then, I would like to present another used approach which is to redirect users by screen size via JavaScript instead of using the User Agent.","content":"<p>Let&#8217;s face it, the web was not designed for phones. For the past decade, developers have been desperately retrofitting the web for a post-mobile world. We need something more fundamental, such as extending the User Agent to include attributes like screen size values. Until then, I would like to present another used approach which is to redirect users by screen size via JavaScript instead of using the User Agent&#8230; <a href=\"https:\/\/web.archive.org\/web\/20150928043058\/http:\/\/blog.falafel.com\/redirecting-mobile-users-by-screen-size-instead-of-device-type\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/redirecting-mobile-users-by-screen-size-instead-of-device-type\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,4,15],"meta":{"_series_part":""},"created":"2014-06-12T02:39:48","modified":"2018-10-21T13:34:35"},{"id":140,"title":"New Kendo UI Media Player Widget with MVVM","slug":"new-kendo-ui-media-player-widget-with-mvvm","type":"post","excerpt":"Kendo UI has a nice array of widgets to offer and has a stellar framework where you can create your own widgets. In this post, I would like to introduce a new Kendo UI Media Player widget that is web, mobile, and MVVM compatible.","content":"<p><a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/www.telerik.com\/kendo-ui\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Kendo UI<\/a> has a nice array of widgets to offer. Not as vast as <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/demos.telerik.com\/aspnet-ajax\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Telerik\u2019s archiac RadControls suite<\/a>, but\u00a0it\u2019s getting closer with every release. Every once in awhile, I wish Kendo had a missing widget available, instead of scouring the web for a carousel or a tag cloud. Fortunately, Kendo UI has a stellar framework where you can <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/docs.telerik.com\/kendo-ui\/howto\/create-custom-kendo-widget\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">create your own widgets<\/a>. In this post, I would like to introduce a new Kendo UI Media Player widget that is <em>web<\/em>, <em>mobile<\/em>, and <em>MVVM<\/em> compatible.<\/p>\n<h2>Yet Another Media Player?<\/h2>\n<p>Ok, so <em>\u201cyet another\u201d<\/em> media player you may ask. There are a couple of good ones out there, such as <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/mediaelementjs.com\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">MediaElement<\/a>and <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/jplayer.org\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">jPlayer,<\/a>\u00a0and\u00a0even powerful video players like <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/https:\/\/flowplayer.org\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">FlowPlayer<\/a>, <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/www.jwplayer.com\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">JW Player<\/a>, <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/www.sublimevideo.net\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">SublimeVideo<\/a>, and <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/www.videojs.com\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Video.js<\/a>. However, a few things were lacking: <em>no MVVM support, little or no playlist capability, and flexibility with integrating your own button controls<\/em>. Making it a first-class citizen of\u00a0Kendo\u00a0UI\u00a0is a nice added bonus.<\/p>\n<p>To give you a peek at the end game, below\u00a0is what we will end up:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2014\/08\/kendo-media-player.png\" alt=\"\" width=\"321\" height=\"567\" class=\"aligncenter size-full wp-image-41437\" \/><\/p>\n<p><a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/blog.falafel.com\/wp-content\/uploads\/2014\/08\/kendo-media-player.png\" rel=\"prettyPhoto[gallery-HRu2]\" class=\"no-ajaxy\"><\/a>It does video too. Are you excited yet?\u00a0So let\u2019s get started\u2026<\/p>\n<h2>HTML5 Media Support<\/h2>\n<p>With HTML5,\u00a0built-in media support via the <em>&lt;audio&gt;<\/em> and <em>&lt;video&gt;<\/em> elements were introduced, offering a rich API and the ability to easily embed media into HTML documents. All we are going to do is wrap the HTML5 API\u2019s with a Kendo widget and expose some extended functionality. Forget falling back to Flash since this would\u00a0unnecessarily complicate things and we really need Flash to rest in peace.<\/p>\n<h2>Media Events and Methods<\/h2>\n<p>Let\u2019s determine what kind of events and methods to expose. For the native HTML5\u00a0<em>&lt;audio&gt;<\/em> and <em>&lt;video&gt;<\/em>elements, <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/https:\/\/developer.mozilla.org\/en\/docs\/Web\/API\/HTMLMediaElement\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">there are API\u2019s<\/a> we will simply expose through our widget:<\/p>\n<p><em>HTML Media Element events:<\/em><\/p>\n<ul>\n<li>ended<\/li>\n<li>error<\/li>\n<li>loadeddata<\/li>\n<li>loadedmetadata<\/li>\n<li>loadstart<\/li>\n<li>pause<\/li>\n<li>play<\/li>\n<li>playing<\/li>\n<li>progress<\/li>\n<li>ratechange<\/li>\n<li>seeked<\/li>\n<li>seeking<\/li>\n<li>timeupdate<\/li>\n<li>volumechange<\/li>\n<\/ul>\n<p><em>HTML Media Element methods:<\/em><\/p>\n<ul>\n<li>play<\/li>\n<li>pause<\/li>\n<li>stop<\/li>\n<li>playbackRate<\/li>\n<li>readyState<\/li>\n<li>seeking<\/li>\n<li>currentTime<\/li>\n<li>volume<\/li>\n<li>muted<\/li>\n<\/ul>\n<p>On top of the native API\u2019s, we will be\u00a0providing\u00a0our own sugar:<\/p>\n<p><em>Custom events:<\/em><\/p>\n<ul>\n<li>change<\/li>\n<li>dataBinding<\/li>\n<li>dataBound<\/li>\n<li>playlistEnded<\/li>\n<\/ul>\n<p><em>Custom methods:<\/em><\/p>\n<ul>\n<li>mediaSrc<\/li>\n<li>getMediaByFile<\/li>\n<li>getLoadedMedia<\/li>\n<li>isLastMedia<\/li>\n<li>add<\/li>\n<li>previous<\/li>\n<li>next<\/li>\n<li>toggleControls<\/li>\n<li>toggleLoop<\/li>\n<li>toggleLoopAll<\/li>\n<li>toggleContinuous<\/li>\n<\/ul>\n<p>Notice implied by the events and methods, we will have a full fledged dataSource behind our Kendo Media Player widget.<\/p>\n<h2>Kendo UI Media Player Skeleton<\/h2>\n<p>It is time to lay down the skeleton that will be used for our widget. We will be extending\u00a0<em>kendo.ui.Widget<\/em> to provide initialization and integration with Kendo UI dataSource and MVVM.<\/p>\n<pre class=\"lang:js decode:true \">kendo.ui.plugin(kendo.ui.Widget.extend({\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Constructor\r\n\u00a0\u00a0\u00a0\u00a0 * @param element\r\n\u00a0\u00a0\u00a0\u00a0 * @param options\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0init: function (element, options) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BASE CALL TO WIDGET INITIALIZATION\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kendo.ui.Widget.fn.init.call(this, element, options);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/INITIALIZE PARTS\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.initStyles();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.initElements();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.initEvents();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.initDataSource();\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Widget options for initialization\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0options: {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: 'MediaPlayer',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: 'audio',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0preload: 'auto',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0autoBind: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0autoPlay: false,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableControls: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableLoop: false,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableLoopAll: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableContinuous: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enablePlaylist: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableStyles: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0playSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pauseSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stopSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0previousSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nextSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0controlsSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loopSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loopAllSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continuousSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template: '',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0playlistTemplate: ''\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Public API events used by widgets or MVVM\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0events: [\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Called before mutating DOM\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DATABINDING,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Called after mutating DOM\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DATABOUND,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/The metadata has loaded or changed, indicating a change in duration of the media.\u00a0\u00a0This is sent, for example, when the media has loaded enough that the duration is known.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DURATIONCHANGE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when playback completes.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ENDED,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when an error occurs.\u00a0\u00a0The element's error attribute contains more information.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ERROR,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/The first frame of the media has finished loading.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOADEDDATA,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/The media's metadata has finished loading; all attributes now contain as much useful information as they're going to.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOADEDMETADATA,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when loading of the media begins.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOADSTART,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when playback is paused.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PAUSE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when playback of the media starts after having been paused; that is, when playback is resumed after a prior pause event.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PLAY,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when the media begins to play (either for the first time, after having been paused, or after ending and then restarting).\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PLAYING,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent periodically to inform interested parties of progress downloading the media. Information about the current amount of the media that has been downloaded is available in the media element's buffered attribute.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PROGRESS,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when the playback speed changes.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RATECHANGE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when a seek operation completes.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SEEKED,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when a seek operation begins.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SEEKING,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/The time indicated by the element's currentTime attribute has changed.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TIMEUPDATE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when the audio volume changes (both when the volume is set and when the muted attribute is changed).\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VOLUMECHANGE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when playlist completes.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PLAYLISTENDED\r\n\u00a0\u00a0\u00a0\u00a0],\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Register CSS style rules\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0initStyles: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Create templates for rendering to DOM\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0initElements: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Bind events\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0initEvents: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Creates the data source\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0initDataSource: function() {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Change data source dynamically via MVVM\r\n\u00a0\u00a0\u00a0\u00a0 * @param dataSource\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0setDataSource: function(dataSource) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * DOM elements that represent the output for MVVM\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0items: function() {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Re-renders the widget with all associated data\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0refresh: function() {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Set media source for HTML element\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0mediaSrc: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Gets media by file from data source\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0getMediaByFile: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Get currently loaded media\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {*}\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0getLoadedMedia: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Is the loaded media the last in the playlist\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {boolean}\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0isLastMedia: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Add media to data source\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0add: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Plays media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0play: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Pauses media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0pause: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Stops media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0stop: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * The current rate at which the media is being played back.\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {*}\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0playbackRate: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * The readiness state of the media.\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0readyState: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Indicates whether the media is in the process of seeking to a new position.\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0seeking: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Seek to specified seconds\r\n\u00a0\u00a0\u00a0\u00a0 * or returns the number of seconds the browser has played\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0currentTime: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Increase or decrease volume of player\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 * @returns volume\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0volume: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Gets or sets muting the player\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {*}\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0muted: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Go to the previous media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0previous: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Go to the next media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0next: function () {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Enables or disables controls\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0toggleControls: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Enables or disables loop functionality\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0toggleLoop: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Enables or disables loop all functionality\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0toggleLoopAll: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Enables or disables continuous functionality\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0toggleContinuous: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n}));<\/pre>\n<p>This is basically our API for our Kendo UI Media Player widget. Notice the options to configure it, along with the available events and methods it will use.<\/p>\n<p>To enable MVVM support for binding properties and events to observable objects, we will also have to add custom binders at the end. Below is the skeleton for that. Notice I first have to create a \u201c<em>mediaplayer<\/em>\u201d namespace under the widget binders. That way, I\u2019m not listening to other widgets for these binder, nor am I overwriting any other widget\u2019s binders either. Thanks to my teammate, <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/blog.falafel.com\/author\/jeff-valore\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Jeff Valore<\/a>, for this valuable, undocumented piece of knowledge.<\/p>\n<pre class=\"lang:js decode:true\">kendo.data.binders.widget.mediaplayer = {};\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.controls = kendo.data.Binder.extend\r\n\u00a0\r\n});\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.loop = kendo.data.Binder.extend({\r\n\u00a0\r\n});\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.loopAll = kendo.data.Binder.extend({\r\n\u00a0\r\n});\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.continuous = kendo.data.Binder.extend\r\n\u00a0\r\n});\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.playlistended = kendo.data.Binder.extend({\r\n\u00a0\r\n});\r\n\u00a0\r\n\/\/BASE BINDER FOR MVVM MEDIA EVENTS\r\nvar MediaBinder = kendo.data.Binder.extend({\r\n\u00a0\r\n});\r\n\u00a0\r\n\/\/BIND MVVM MEDIA EVENTS\r\nkendo.data.binders.widget.mediaplayer.durationchange = MediaBinder.extend({ eventName: DURATIONCHANGE });\r\nkendo.data.binders.widget.mediaplayer.ended = MediaBinder.extend({ eventName: ENDED });\r\nkendo.data.binders.widget.mediaplayer.error = MediaBinder.extend({ eventName: ERROR });\r\nkendo.data.binders.widget.mediaplayer.loadeddata = MediaBinder.extend({ eventName: LOADEDDATA });\r\nkendo.data.binders.widget.mediaplayer.loadedmetadata = MediaBinder.extend({ eventName: LOADEDMETADATA });\r\nkendo.data.binders.widget.mediaplayer.loadstart = MediaBinder.extend({ eventName: LOADSTART });\r\nkendo.data.binders.widget.mediaplayer.pause = MediaBinder.extend({ eventName: PAUSE });\r\nkendo.data.binders.widget.mediaplayer.play = MediaBinder.extend({ eventName: PLAY });\r\nkendo.data.binders.widget.mediaplayer.playing = MediaBinder.extend({ eventName: PLAYING });\r\nkendo.data.binders.widget.mediaplayer.progress = MediaBinder.extend({ eventName: PROGRESS });\r\nkendo.data.binders.widget.mediaplayer.ratechange = MediaBinder.extend({ eventName: RATECHANGE });\r\nkendo.data.binders.widget.mediaplayer.seeked = MediaBinder.extend({ eventName: SEEKED });\r\nkendo.data.binders.widget.mediaplayer.seeking = MediaBinder.extend({ eventName: SEEKING });\r\nkendo.data.binders.widget.mediaplayer.timeupdate = MediaBinder.extend({ eventName: TIMEUPDATE });\r\nkendo.data.binders.widget.mediaplayer.volumechange = MediaBinder.extend({ eventName: VOLUMECHANGE });<\/pre>\n<h2>Kendo UI Media Player Flesh<\/h2>\n<p>We are now ready add flesh to our widget. I will cover it step-by-step, then offer the complete widget at the end. First, let\u2019s add a custom CSS class to our widget in case someone\u2019s to reference or style it later. We do this in the <em>init<\/em>:<\/p>\n<pre class=\"lang:js decode:true\">init: function (element, options) {\r\n\u00a0\u00a0\u00a0\u00a0\/\/BASE CALL TO WIDGET INITIALIZATION\r\n\u00a0\u00a0\u00a0\u00a0kendo.ui.Widget.fn.init.call(this, element, options);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/ADD CSS TO WIDGET FOR STYLING\r\n\u00a0\u00a0\u00a0\u00a0this.element.addClass('k-mediaplayer');\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/INITIALIZE PARTS\r\n\u00a0\u00a0\u00a0\u00a0this.initStyles();\r\n\u00a0\u00a0\u00a0\u00a0this.initElements();\r\n\u00a0\u00a0\u00a0\u00a0this.initEvents();\r\n\u00a0\u00a0\u00a0\u00a0this.initDataSource();\r\n},<\/pre>\n<h2>Kendo UI Media Player DOM<\/h2>\n<p>For the initialization of the widget parts, we will add our own styles and mutate the DOM. I will add styles programmatically so I don\u2019t have to have a dependency on an outside stylesheet file. It is only a few CSS rules, so it\u2019s not so bad.<\/p>\n<pre class=\"lang:js decode:true\">initStyles: function () {\r\n\u00a0\u00a0\u00a0\u00a0\/\/ADD CSS RULES DYNAMICALLY\r\n\u00a0\u00a0\u00a0\u00a0var addCssRule = function(styles) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var style = document.createElement('style');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style.type = 'text\/css';\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (style.styleSheet) style.styleSheet.cssText = styles; \/\/IE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else style.innerHTML = styles; \/\/OTHERS\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0document.getElementsByTagName('head')[0].appendChild(style);\r\n\u00a0\u00a0\u00a0\u00a0};\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.enableStyles) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ADD CSS RULES FOR WIDGET\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer { width: 99%; padding: 10px; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.km-root .k-mediaplayer { width: 100%; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer audio, .k-mediaplayer video { width: 100%; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer .playlist { padding: 0; margin: 0;\u00a0\u00a0border-top: 1px dotted #ccc; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer .playlist li { cursor: pointer; list-style: none; padding: 3px; padding: 10px; border: 1px dotted #ccc; border-top: none; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer .playlist li:hover, .k-mediaplayer .playlist li.selected { background-color: #ddd; }');\r\n\u00a0\u00a0\u00a0\u00a0}\r\n}<\/pre>\n<p>For the DOM element manipulation, I will\u00a0create the HTML element using our private method called <em>_createMediaTag<\/em>, which will be based on whether the user passed in \u2018<em>audio<\/em>\u2018 or \u2018<em>video<\/em>\u2018 for the media type. Then it will create the HTML media tag accordingly. We will also render the playlist if enabled using a <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/docs.telerik.com\/kendo-ui\/api\/framework\/kendo#methods-template\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Kendo template<\/a>\u00a0for easy binding to an array of objects. Also, caching the HTML elements into the widget properties would be convenient and preformant for later use.<\/p>\n<pre class=\"lang:js decode:true\">initElements: function () {\r\n\u00a0\u00a0\u00a0\u00a0var templateHtml = '';\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/BUILD AND CACHE OUTPUT FOR RENDERING MEDIA CONTROL\r\n\u00a0\u00a0\u00a0\u00a0this.element.html(this._createMediaTag());\r\n\u00a0\u00a0\u00a0\u00a0this.mediaElement = this.element.find(this.options.type)[0];\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/BUILD PLAYLIST TEMPLATE IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.enablePlaylist) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BUILD OUTPUT FOR RENDERING PLAYLIST\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0templateHtml += this.options.playlistTemplate\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| ('&lt;ul class=\"playlist\"&gt;# for (var i = 0; i &lt; data.length; i++) { #'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ '&lt;li data-file=\"#= data[i].file #\"&gt;#= data[i].title #&lt;\/li&gt;'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ '# } #&lt;\/ul&gt;');\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/CACHE CONTENT PLACEHOLDERS FOR LATER USE\r\n\u00a0\u00a0\u00a0\u00a0this.element.append('&lt;div class=\"content-wrapper\"&gt;&lt;\/div&gt;');\r\n\u00a0\u00a0\u00a0\u00a0this.contentElement = this.element.find('.content-wrapper');\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/COMPILE TEMPLATE FOR LATER USE\r\n\u00a0\u00a0\u00a0\u00a0this.template = kendo.template(templateHtml);\r\n}<\/pre>\n<p>In our widget, we must have a <em>refresh<\/em> method that will be called when the DOM needs to be updated. This update will be triggered by a consuming developer or automatically by MVVM when data changes. Below you will notice that we are explicitly triggering the <em>dataBinding<\/em> event before the rendering and after it. That will call any associated events subscribed to it.<\/p>\n<p>For the actual rendering itself, we bind our dataSource to the template we created in the <em>initElement<\/em> method. This will hold our playlist, then we add it to the content placeholder that we also created in the <em>initElement<\/em>method.\u00a0In case the media type was changed, we have to replace the HTML element in the DOM also.<\/p>\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">\/**\r\n* Re-renders the widget with all associated data\r\n*\/\r\nrefresh: function() {\r\n\u00a0\u00a0\u00a0\u00a0\/\/TRIGGER DATA BINDING BEFORE RENDER\r\n\u00a0\u00a0\u00a0\u00a0this.trigger(DATABINDING);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/INITIALIZE VARIABLES\r\n\u00a0\u00a0\u00a0\u00a0var view = this.dataSource.view(),\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0html = view.length ? this.template(view) : '';\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/RENDER DATA TO DOM PLACEHOLDER\r\n\u00a0\u00a0\u00a0\u00a0this.contentElement.html(html);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/REPLACE MEDIA DOM ELEMENT IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.type != this.mediaElement.tagName.toLowerCase()) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var temp = $(this._createMediaTag());\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$(this.mediaElement).replaceWith(temp);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement = temp[0];\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/POPULATE FIRST MEDIA IF NONE LOADED OR DOES NOT EXIST\r\n\u00a0\u00a0\u00a0\u00a0if (view.length\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&amp;&amp; (!this.mediaSrc() || !this.getMediaByFile(this.mediaSrc()))) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaSrc(view[0].file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.refreshDisplay();\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/TRIGGER DATA BINDING AFTER RENDER COMPLETE\r\n\u00a0\u00a0\u00a0\u00a0this.trigger(DATABOUND);\r\n},\r\n\u00a0\r\n\/**\r\n* Updates the interface based on new or updated media\r\n*\/\r\nrefreshDisplay: function () {\r\n\u00a0\u00a0\u00a0\u00a0var me = this;\r\n\u00a0\u00a0\u00a0\u00a0var playlistItems = this.contentElement.find('.playlist li');\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/RESET DISPLAY\r\n\u00a0\u00a0\u00a0\u00a0playlistItems.removeClass('selected');\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/SELECT ACTIVE MEDIA FROM PLAYLIST IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0if (this.mediaSrc()) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0playlistItems.each(function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var $this = $(this);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/MATCH LOADED MEDIA TO PLAYLIST ITEM\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ($this.attr('data-file') == me.mediaSrc()) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ACTIVATE ELEMENT\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this.addClass('selected');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0}\r\n}<\/pre>\n<p>When the rendering is complete, we call our own method above, <em>refreshDisplay<\/em>, to handle any selected or active elements. These are just indicators to the user, such as which playlist file is currently being played.<\/p>\n<h2>Kendo UI Media Player Events<\/h2>\n<p>Next comes the handling of events. We will bind custom events to our widget and native events directly to the HTML media element.<\/p>\n<pre class=\"lang:js decode:true\">\/**\r\n* Bind events\r\n*\/\r\ninitEvents: function () {\r\n\u00a0\u00a0\u00a0\u00a0var me = this;\r\n\u00a0\u00a0\u00a0\u00a0var $document = $(document.body);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/DETERMINE CLICK EVENT TO USE\r\n\u00a0\u00a0\u00a0\u00a0\/\/http:\/\/stackoverflow.com\/questions\/10165141\/jquery-on-and-delegate-doesnt-work-on-ipad\r\n\u00a0\u00a0\u00a0\u00a0var clickEventName = (kendo.support.mobileOS &amp;&amp; kendo.support.mobileOS.browser == 'mobilesafari')\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? 'touchstart' : 'click';\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/BIND MEDIA EVENTS (FOR NON-MVVM)\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(DURATIONCHANGE, this.options.durationChange);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(ENDED, this.options.ended);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(ERROR, this.options.error);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(LOADEDDATA, this.options.loadedData);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(LOADEDMETADATA, this.options.loadedMetadata);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(LOADSTART, this.options.loadStart);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(PAUSE, this.options.pause);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(PLAY, this.options.play);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(PLAYING, this.options.playing);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(PROGRESS, this.options.progress);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(RATECHANGE, this.options.rateChange);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(SEEKED, this.options.seeked);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(SEEKING, this.options.seeking);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(TIMEUPDATE, this.options.timeUpdate);\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(VOLUMECHANGE, this.options.volumeChange);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/HANDLE PLAYLIST IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0this._bindMedia(ENDED, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE LAST ITEM IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (me.isLastMedia()) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/EXECUTE CALLBACK FOR ENDED PLAYLIST\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.trigger(PLAYLISTENDED);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/LOOP TO BEGINNING IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (me.options.enableLoopAll) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.next();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.stop();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/PLAY NEXT ITEM IN PLAYLIST IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (me.options.enableContinuous) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.next();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.stop();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/HANDLE PLAYLIST ENDED EVENT IF APPLICABLE (FOR NON-MVVM)\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.playlistEnded) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.bind(PLAYLISTENDED, this.options.playlistEnded);\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/SCRUB MEDIA PROPERTIES IF NEEDED\r\n\u00a0\u00a0\u00a0\u00a0this.bind(DATABINDING, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var data = this.dataSource.data();\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ITERATE THROUGH MEDIA\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (var i = 0; i &lt; data.length; i++) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ASSIGN TITLE IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!data[i].title) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data[i].title = me._convertFileToTitle(data[i].file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/HANDLE PLAYLIST EVENTS\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.enablePlaylist) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ALLOW NAVIGATION OF PLAYLIST ITEMS\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.contentElement.on('click', '.playlist li', function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/LOAD SELECTED ITEM FROM PLAYLIST\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.play($(this).attr('data-file'));\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/SUBSCRIBE EVENTS TO CUSTOM SELECTORS IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.playSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.playSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.play();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.pauseSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.pauseSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.pause();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.stopSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.stopSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.stop();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.previousSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.previousSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.previous();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.nextSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.nextSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.next();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0}\r\n},\r\n\u00a0\r\n\/**\r\n* Binds event to media player\r\n* @param name\r\n* @param callback\r\n*\/\r\n_bindMedia: function (name, callback) {\r\n\u00a0\u00a0\u00a0\u00a0if (name &amp;&amp; callback) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE BINDING FOR MEDIA PLAYER AFTER RENDER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.bind(DATABOUND, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.mediaElement) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BIND EVENT TO MEDIA PLAYER AFTER IT RENDERS\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement.addEventListener(name, callback);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0}\r\n}<\/pre>\n<p>I am determining the click event name based on whether it is iOS or not. Apparently, there is a <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/stackoverflow.com\/questions\/10165141\/jquery-on-and-delegate-doesnt-work-on-ipad\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">restriction on mobile Safari<\/a> that won\u2019t let you bubble up delegate events all the way to the document body, unless it\u2019s a <em>touchstart<\/em> event. I am using this later in the method to bind selectors that were configured by the consuming developer. That way, you have full control over what elements on your page control the media player.<\/p>\n<p>Also in the events initialization, I am binding all the native events directly to the actual HTML media element. I wrapped it in a private function called <em>_bindMedia<\/em> so it was more convenience, but eventually it simply does\u00a0<em>this.mediaElement.addEventListener(name, callback)<\/em>.<\/p>\n<p>I added my own custom event to the media <em>ended<\/em> event to handle continuous play and triggering my custom widget event called <em>playlistEnded<\/em>. I am doing this by <em>triggering<\/em> the event, which I bound later directly to my widget using <em>this.bind(PLAYLISTENDED, this.options.playlistEnded)<\/em>.<\/p>\n<p>I am also scrubbing my data before rendering using the <em>dataBinding<\/em> event. If the playlist is enabled, I am wiring up some click events to navigate through it.<\/p>\n<h2>Kendo UI Media Player DataSource<\/h2>\n<p>The DataSource is what makes our widget very powerful. We can feed with an array or web service. And the DataSource itself has a vast API that is automatically exposed through our widget. Below is the initialization of it:<\/p>\n<pre class=\"lang:js decode:true\">\/**\r\n* Creates the data source\r\n*\/\r\ninitDataSource: function() {\r\n\u00a0\u00a0\u00a0\u00a0\/\/IF DATA SOURCE IS DEFINED AND THE REFRESH HANDLER IS WIRED UP,\r\n\u00a0\u00a0\u00a0\u00a0\/\/UNBIND BECAUSE DATA SOURCE MUST BE REBUILT\r\n\u00a0\u00a0\u00a0\u00a0if (this.dataSource &amp;&amp; this._refreshHandler) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/UNBIND SO BINDING CAN BE WIRED UP AFTER DATA SOURCE CREATION\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.dataSource.unbind(CHANGE, this._refreshHandler);\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0else {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/CREATE CONNECTION BETWEEN INTERNAL _refreshHandler AND PUBLIC REFRESH FUNCTION\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._refreshHandler = $.proxy(this.refresh, this);\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/CREATE DATA SOURCE FROM ARRAY OR CONFIG OBJECT\r\n\u00a0\u00a0\u00a0\u00a0this.dataSource = kendo.data.DataSource.create(this.options.dataSource);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/NOW BIND DATA SOURCE TO REFRESH OF WIDGET\r\n\u00a0\u00a0\u00a0\u00a0this.dataSource.bind(CHANGE, this._refreshHandler);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/FETCH DATA FIRST TIME IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0if (this.options.autoBind) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.dataSource.fetch();\r\n\u00a0\u00a0\u00a0\u00a0}\r\n},\r\n\u00a0\r\n\/**\r\n* Change data source dynamically via MVVM\r\n* @param dataSource\r\n*\/\r\nsetDataSource: function(dataSource) {\r\n\u00a0\u00a0\u00a0\u00a0\/\/SET THE INTERNAL DATA SOURCE EQUAL TO THE ONE PASSED IN BY MVVM\r\n\u00a0\u00a0\u00a0\u00a0this.options.dataSource = dataSource;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/\/REBUILD THE DATA SOURCE IF NECESSARY OR JUST REASSIGN\r\n\u00a0\u00a0\u00a0\u00a0this.initDataSource();\r\n}<\/pre>\n<p>There is a <em>_refreshHandler<\/em> method that is inherited from the Kendo widget base class. This is used by MVVM to automatically trigger it once it needs to refresh the widget on some observable change. We need to be aware of that event. If it has been bound before for some reason, we first unbind it so it doesn\u2019t get bound multiple times to the DataSource.<\/p>\n<p>We then wire up the <em>_refreshHandler<\/em> to our own refresh method by using $.proxy. It\u2019s just another way to alias methods together.<\/p>\n<p>Now comes the part where we take the consuming developer\u2019s data source that was fed during the configuration of the media player and create a DataSource out of it. By using\u00a0<em>kendo.data.DataSource.create<\/em>, we are giving the option to configure the widget using a DataSource object or a plain array.<\/p>\n<p>Finally, we are ready to bind the change event to the <em>_refreshHandler<\/em> when it changes. Basically, it will re-render it when the data has changed. Our widget is also aware of the <em>autoBind<\/em> property, which it will fetch if set (fetch only calls the remote data once even if fetch is called multiple times).<\/p>\n<p>For MVVM, we overrode the <em>setDataSource<\/em> method so it can set and re-initialize the DataSource when needed.<\/p>\n<h2>Kendo UI Media Player Methods<\/h2>\n<p>Although, I will not cover logic in all the methods, I will provide you with an example of how I am wrapping the HTML media element API:<\/p>\n<pre class=\"lang:js decode:true\">\/**\r\n* Pauses media\r\n*\/\r\npause: function () {\r\n\u00a0\u00a0\u00a0\u00a0this.mediaElement.pause();\r\n}<\/pre>\n<p>The <em>mediaElement<\/em> property is one of the elements I cached in the <em>initElements<\/em> method. Throughout my widget, I can refer to this reference instead of constantly trying to search the DOM for it. This <em>mediaElement<\/em> is simply the <em>&lt;audio&gt;<\/em> or <em>&lt;video&gt;<\/em> element. The \u201c<em>pause()<\/em>\u201d method is a native HTML5 method on the DOM element, it\u2019s not even jQuery! I am just calling it in the underlying logic of my widget methods.<\/p>\n<h2>Kendo UI Media Player Binders<\/h2>\n<p>To allow consuming developers to bind properties and events in the \u201cdata-bind\u201d attribute in the HTML, I have to wire up some binders, otherwise I will get an error from Kendo saying: <span><em>The xyz\u00a0binding is not supported by the MediaPlayer widget<\/em><\/span>. Although there is some confusion around it sometimes, it\u2019s not so bad once you see an actual working example:<\/p>\n<pre class=\"lang:js decode:true\">kendo.data.binders.widget.mediaplayer.continuous = kendo.data.Binder.extend({\r\n\u00a0\u00a0\u00a0\u00a0refresh: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var value = this.bindings.continuous.get();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var widget = this.element;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0widget.toggleContinuous(value);\r\n\u00a0\u00a0\u00a0\u00a0}\r\n});\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.playlistended = kendo.data.Binder.extend({\r\n\u00a0\u00a0\u00a0\u00a0init: function (widget, bindings, options) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var me = this;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kendo.data.Binder.fn.init.call(this, widget, bindings, options);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE BINDING FOR MEDIA PLAYER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0widget.bind(PLAYLISTENDED, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/EXECUTE CALLBACK OPTION\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.bindings.playlistended.get();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0refresh: function () {}\r\n});\r\n\u00a0\r\n\/\/BASE BINDER FOR MVVM MEDIA EVENTS\r\nvar MediaBinder = kendo.data.Binder.extend({\r\n\u00a0\u00a0\u00a0\u00a0eventName: null,\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0init: function (widget, bindings, options) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var me = this;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kendo.data.Binder.fn.init.call(this, widget, bindings, options);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE BINDING FOR MEDIA PLAYER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0widget._bindMedia(this.eventName, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.bindings[me.eventName].get();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0refresh: function () {}\r\n});\r\n\u00a0\r\n\/\/BIND MVVM MEDIA EVENTS\r\nkendo.data.binders.widget.mediaplayer.durationchange = MediaBinder.extend({ eventName: DURATIONCHANGE });<\/pre>\n<p>For the <em>continuous<\/em> binder, I am only overriding the <em>refresh<\/em> event. That\u2019s because all I need to do is first check if the widget is a media player, then call one of the underlying methods. I pass in the value that is bound from the <em>observable object<\/em>, which is coming from <em>this.bindings.continuous.get()<\/em>. This will get triggered every time that property changes.<\/p>\n<p>The <em>playlistended<\/em> event is handled a bit differently since it needs to be bound to the widget and not simply a widget method call. We do this in the <em>initialization<\/em> of the binder simply by calling <em>widget.bind<\/em>. Now any time <em>widget.trigger<\/em> is called against the same event, this function will get called along with any other functions subscribed to the event. We actually trigger the <em>playlistended<\/em> event in the in the <em>initEvents<\/em> method based on some criteria.<\/p>\n<p>The last set of binders are the binding of events to the native HTML media element. I extended the <em>kendo.data.Binder<\/em> class to be used for this set of bindings. So for <em>durationchange, ended, error, playing, pause, etc<\/em>, it will call the <em>_bindMedia<\/em> method from our widget, which if you remember, eventually calls <em>this.mediaElement.addEventListener<\/em>.<\/p>\n<h2>Putting It All Together<\/h2>\n<p>With the above explanations, let\u2019s see the completed code to get a full overview of it:<\/p>\n<pre class=\"lang:js decode:true\">\/**\r\n* Widget for playing audio\r\n*\/\r\nvar CHANGE = 'change',\r\n\u00a0\u00a0\u00a0\u00a0DATABINDING = 'dataBinding',\r\n\u00a0\u00a0\u00a0\u00a0DATABOUND = 'dataBound',\r\n\u00a0\u00a0\u00a0\u00a0DURATIONCHANGE = 'durationchange',\r\n\u00a0\u00a0\u00a0\u00a0ENDED = 'ended',\r\n\u00a0\u00a0\u00a0\u00a0ERROR = 'error',\r\n\u00a0\u00a0\u00a0\u00a0LOADEDDATA = 'loadeddata',\r\n\u00a0\u00a0\u00a0\u00a0LOADEDMETADATA = 'loadedmetadata',\r\n\u00a0\u00a0\u00a0\u00a0LOADSTART = 'loadstart',\r\n\u00a0\u00a0\u00a0\u00a0PAUSE = 'pause',\r\n\u00a0\u00a0\u00a0\u00a0PLAY = 'play',\r\n\u00a0\u00a0\u00a0\u00a0PLAYING = 'playing',\r\n\u00a0\u00a0\u00a0\u00a0PROGRESS = 'progress',\r\n\u00a0\u00a0\u00a0\u00a0RATECHANGE = 'ratechange',\r\n\u00a0\u00a0\u00a0\u00a0SEEKED = 'seeked',\r\n\u00a0\u00a0\u00a0\u00a0SEEKING = 'seeking',\r\n\u00a0\u00a0\u00a0\u00a0TIMEUPDATE = 'timeupdate',\r\n\u00a0\u00a0\u00a0\u00a0VOLUMECHANGE = 'volumechange',\r\n\u00a0\u00a0\u00a0\u00a0PLAYLISTENDED = 'playlistEnded';\r\n\u00a0\r\nkendo.ui.plugin(kendo.ui.Widget.extend({\r\n\u00a0\u00a0\u00a0\u00a0mediaElement: null,\r\n\u00a0\u00a0\u00a0\u00a0contentElement: null,\r\n\u00a0\u00a0\u00a0\u00a0dataSource: null,\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Constructor\r\n\u00a0\u00a0\u00a0\u00a0 * @param element\r\n\u00a0\u00a0\u00a0\u00a0 * @param options\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0init: function (element, options) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BASE CALL TO WIDGET INITIALIZATION\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kendo.ui.Widget.fn.init.call(this, element, options);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ADD CSS TO WIDGET FOR STYLING\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.element.addClass('k-mediaplayer');\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/INITIALIZE PARTS\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.initStyles();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.initElements();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.initEvents();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.initDataSource();\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Widget options for initialization\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0options: {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: 'MediaPlayer',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: 'audio',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0preload: 'auto',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0autoBind: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0autoPlay: false,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableControls: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableLoop: false,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableLoopAll: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableContinuous: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enablePlaylist: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableStyles: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0playSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pauseSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stopSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0previousSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nextSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0controlsSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loopSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loopAllSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continuousSelector: null,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template: '',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0playlistTemplate: ''\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Public API events used by widgets or MVVM\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0events: [\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Called before mutating DOM\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DATABINDING,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Called after mutating DOM\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DATABOUND,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/The metadata has loaded or changed, indicating a change in duration of the media.\u00a0\u00a0This is sent, for example, when the media has loaded enough that the duration is known.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DURATIONCHANGE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when playback completes.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ENDED,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when an error occurs.\u00a0\u00a0The element's error attribute contains more information.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ERROR,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/The first frame of the media has finished loading.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOADEDDATA,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/The media's metadata has finished loading; all attributes now contain as much useful information as they're going to.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOADEDMETADATA,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when loading of the media begins.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOADSTART,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when playback is paused.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PAUSE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when playback of the media starts after having been paused; that is, when playback is resumed after a prior pause event.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PLAY,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when the media begins to play (either for the first time, after having been paused, or after ending and then restarting).\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PLAYING,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent periodically to inform interested parties of progress downloading the media. Information about the current amount of the media that has been downloaded is available in the media element's buffered attribute.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PROGRESS,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when the playback speed changes.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RATECHANGE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when a seek operation completes.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SEEKED,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when a seek operation begins.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SEEKING,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/The time indicated by the element's currentTime attribute has changed.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TIMEUPDATE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when the audio volume changes (both when the volume is set and when the muted attribute is changed).\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VOLUMECHANGE,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/Sent when playlist completes.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PLAYLISTENDED\r\n\u00a0\u00a0\u00a0\u00a0],\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Register CSS style rules\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0initStyles: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ADD CSS RULES DYNAMICALLY\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var addCssRule = function(styles) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var style = document.createElement('style');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style.type = 'text\/css';\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (style.styleSheet) style.styleSheet.cssText = styles; \/\/IE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else style.innerHTML = styles; \/\/OTHERS\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0document.getElementsByTagName('head')[0].appendChild(style);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.enableStyles) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ADD CSS RULES FOR WIDGET\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer { width: 99%; padding: 10px; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.km-root .k-mediaplayer { width: 100%; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer audio, .k-mediaplayer video { width: 100%; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer .playlist { padding: 0; margin: 0;\u00a0\u00a0border-top: 1px dotted #ccc; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer .playlist li { cursor: pointer; list-style: none; padding: 3px; padding: 10px; border: 1px dotted #ccc; border-top: none; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addCssRule('.k-mediaplayer .playlist li:hover, .k-mediaplayer .playlist li.selected { background-color: #ddd; }');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Create templates for rendering to DOM\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0initElements: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var templateHtml = '';\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BUILD AND CACHE OUTPUT FOR RENDERING MEDIA CONTROL\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.element.html(this._createMediaTag());\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement = this.element.find(this.options.type)[0];\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BUILD PLAYLIST TEMPLATE IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.enablePlaylist) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BUILD OUTPUT FOR RENDERING PLAYLIST\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0templateHtml += this.options.playlistTemplate\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| ('&lt;ul class=\"playlist\"&gt;# for (var i = 0; i &lt; data.length; i++) { #'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ '&lt;li data-file=\"#= data[i].file #\"&gt;#= data[i].title #&lt;\/li&gt;'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ '# } #&lt;\/ul&gt;');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/CACHE CONTENT PLACEHOLDERS FOR LATER USE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.element.append('&lt;div class=\"content-wrapper\"&gt;&lt;\/div&gt;');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.contentElement = this.element.find('.content-wrapper');\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/COMPILE TEMPLATE FOR LATER USE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.template = kendo.template(templateHtml);\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Bind events\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0initEvents: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var me = this;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var $document = $(document.body);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/DETERMINE CLICK EVENT TO USE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/http:\/\/stackoverflow.com\/questions\/10165141\/jquery-on-and-delegate-doesnt-work-on-ipad\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var clickEventName = (kendo.support.mobileOS &amp;&amp; kendo.support.mobileOS.browser == 'mobilesafari')\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? 'touchstart' : 'click';\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BIND MEDIA EVENTS (FOR NON-MVVM)\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(DURATIONCHANGE, this.options.durationChange);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(ENDED, this.options.ended);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(ERROR, this.options.error);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(LOADEDDATA, this.options.loadedData);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(LOADEDMETADATA, this.options.loadedMetadata);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(LOADSTART, this.options.loadStart);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(PAUSE, this.options.pause);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(PLAY, this.options.play);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(PLAYING, this.options.playing);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(PROGRESS, this.options.progress);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(RATECHANGE, this.options.rateChange);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(SEEKED, this.options.seeked);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(SEEKING, this.options.seeking);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(TIMEUPDATE, this.options.timeUpdate);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(VOLUMECHANGE, this.options.volumeChange);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE PLAYLIST IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._bindMedia(ENDED, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE LAST ITEM IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (me.isLastMedia()) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/EXECUTE CALLBACK FOR ENDED PLAYLIST\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.trigger(PLAYLISTENDED);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/LOOP TO BEGINNING IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (me.options.enableLoopAll) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.next();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.stop();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/PLAY NEXT ITEM IN PLAYLIST IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (me.options.enableContinuous) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.next();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.stop();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE PLAYLIST ENDED EVENT IF APPLICABLE (FOR NON-MVVM)\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.playlistEnded) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.bind(PLAYLISTENDED, this.options.playlistEnded);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/SCRUB MEDIA PROPERTIES IF NEEDED\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.bind(DATABINDING, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var data = this.dataSource.data();\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ITERATE THROUGH MEDIA\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (var i = 0; i &lt; data.length; i++) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ASSIGN TITLE IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!data[i].title) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data[i].title = me._convertFileToTitle(data[i].file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE PLAYLIST EVENTS\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.enablePlaylist) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ALLOW NAVIGATION OF PLAYLIST ITEMS\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.contentElement.on('click', '.playlist li', function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/LOAD SELECTED ITEM FROM PLAYLIST\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.play($(this).attr('data-file'));\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/SUBSCRIBE EVENTS TO CUSTOM SELECTORS IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.playSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.playSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.play();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.pauseSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.pauseSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.pause();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.stopSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.stopSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.stop();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.previousSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.previousSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.previous();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.nextSelector) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$document.on(clickEventName, this.options.nextSelector, function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.next();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Creates the data source\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0initDataSource: function() {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/IF DATA SOURCE IS DEFINED AND THE REFRESH HANDLER IS WIRED UP,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/UNBIND BECAUSE DATA SOURCE MUST BE REBUILT\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.dataSource &amp;&amp; this._refreshHandler) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/UNBIND SO BINDING CAN BE WIRED UP AFTER DATA SOURCE CREATION\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.dataSource.unbind(CHANGE, this._refreshHandler);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/CREATE CONNECTION BETWEEN INTERNAL _refreshHandler AND PUBLIC REFRESH FUNCTION\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._refreshHandler = $.proxy(this.refresh, this);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/CREATE DATA SOURCE FROM ARRAY OR CONFIG OBJECT\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.dataSource = kendo.data.DataSource.create(this.options.dataSource);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/NOW BIND DATA SOURCE TO REFRESH OF WIDGET\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.dataSource.bind(CHANGE, this._refreshHandler);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/FETCH DATA FIRST TIME IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.autoBind) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.dataSource.fetch();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Change data source dynamically via MVVM\r\n\u00a0\u00a0\u00a0\u00a0 * @param dataSource\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0setDataSource: function(dataSource) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/SET THE INTERNAL DATA SOURCE EQUAL TO THE ONE PASSED IN BY MVVM\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.options.dataSource = dataSource;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/REBUILD THE DATA SOURCE IF NECESSARY OR JUST REASSIGN\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.initDataSource();\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * DOM elements that represent the output for MVVM\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0items: function() {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.element.find('.playlist li');\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Re-renders the widget with all associated data\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0refresh: function() {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/TRIGGER DATA BINDING BEFORE RENDER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.trigger(DATABINDING);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/INITIALIZE VARIABLES\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var view = this.dataSource.view(),\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0html = view.length ? this.template(view) : '';\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/RENDER DATA TO DOM PLACEHOLDER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.contentElement.html(html);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/REPLACE MEDIA DOM ELEMENT IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.type != this.mediaElement.tagName.toLowerCase()) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var temp = $(this._createMediaTag());\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$(this.mediaElement).replaceWith(temp);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement = temp[0];\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/POPULATE FIRST MEDIA IF NONE LOADED OR DOES NOT EXIST\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (view.length\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&amp;&amp; (!this.mediaSrc() || !this.getMediaByFile(this.mediaSrc()))) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaSrc(view[0].file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.refreshDisplay();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/TRIGGER DATA BINDING AFTER RENDER COMPLETE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.trigger(DATABOUND);\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Updates the interface based on new or updated media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0refreshDisplay: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var me = this;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var playlistItems = this.contentElement.find('.playlist li');\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/RESET DISPLAY\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0playlistItems.removeClass('selected');\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/SELECT ACTIVE MEDIA FROM PLAYLIST IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.mediaSrc()) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0playlistItems.each(function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var $this = $(this);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/MATCH LOADED MEDIA TO PLAYLIST ITEM\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ($this.attr('data-file') == me.mediaSrc()) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ACTIVATE ELEMENT\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this.addClass('selected');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Set media source for HTML element\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0mediaSrc: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (value || value === '') {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement.src = value;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (value) this.mediaElement.load();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $(this.mediaElement).attr('src');\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Gets media by file from data source\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0getMediaByFile: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/VALIDATE INPUT\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!value) return;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var data = this.dataSource.data();\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (var i = 0; i &lt; data.length; i++) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/FIND MATCHING MEDIA FRoM DATA SOURCE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (value == data[i].file) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return data[i];\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Get currently loaded media\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {*}\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0getLoadedMedia: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.getMediaByFile(this.mediaSrc());\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Is the loaded media the last in the playlist\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {boolean}\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0isLastMedia: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/VALIDATE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!this.mediaSrc() || !this.dataSource.total())\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/DETERMINE IF LOADED MEDIA IS THE LAST TO PLAY\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.getLoadedMedia().file\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0== this.dataSource.at(this.dataSource.total() - 1).file;\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Add media to data source\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0add: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/VALIDATE INPUT\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!value) return;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/CONVERT FILE TO OBJECT IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (typeof value == 'string') {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value = {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file: value\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (value.file) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ASSIGN TITLE IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!value.title) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value.title = this._convertFileToTitle(value.file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ADD TO DATA SOURCE AND RETURN VALUE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.dataSource.add(value);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return value;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Plays media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0play: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE SUPPLIED MEDIA IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/RETRIEVE DATA FROM SOURCE IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (typeof value == 'string') {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ADD OR GET EXISTING MEDIA OBJECT\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value = this.getMediaByFile(value)\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| this.add(value);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else if (!this.getMediaByFile(value.file)) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/ADD TO DATA SOURCE IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value = this.add(value);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/LOAD MEDIA TO PLAYER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaSrc(value.file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/POPULATE FIRST MEDIA IF APPLICABLE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!this.mediaSrc() &amp;&amp; this.dataSource.total()) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaSrc(this.dataSource.at(0).file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/PLAY MEDIA\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement.play();\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/UPDATE INTERFACE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.refreshDisplay();\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Pauses media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0pause: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement.pause();\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Stops media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0stop: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.pause();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaSrc('');\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/UPDATE INTERFACE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.refreshDisplay();\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * The current rate at which the media is being played back.\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {*}\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0playbackRate: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ($.isNumeric(value)) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement.playbackRate = value;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.mediaElement.playbackRate;\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * The readiness state of the media.\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0readyState: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.mediaElement.readyState;\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Indicates whether the media is in the process of seeking to a new position.\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0seeking: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.mediaElement.seeking;\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Seek to specified seconds\r\n\u00a0\u00a0\u00a0\u00a0 * or returns the number of seconds the browser has played\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0currentTime: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ($.isNumeric(value)) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement.currentTime = value;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.mediaElement.currentTime;\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Increase or decrease volume of player\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 * @returns volume\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0volume: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ($.isNumeric(value)) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement.volume = value;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.mediaElement.volume;\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Gets or sets muting the player\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {*}\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0muted: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (value === true || value === false) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement.muted = value;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.mediaElement.muted;\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Go to the previous media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0previous: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var data = this.dataSource.data();\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (var i = 0; i &lt; data.length; i++) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.mediaSrc() == data[i].file) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/LAST FILE IN PLAYLIST\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i == 0) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.stop();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/UPDATE MEDIA PLAYER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.play(data[i - 1].file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Go to the next media\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0next: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var data = this.dataSource.data();\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (var i = 0; i &lt; data.length; i++) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.mediaSrc() == data[i].file) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/LAST FILE IN PLAYLIST\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i == data.length - 1) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/DETERMINE NEXT IF AT THE END\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.options.enableLoopAll) this.play(data[0].file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else this.stop();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/UPDATE MEDIA PLAYER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.play(data[i + 1].file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Enables or disables controls\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0toggleControls: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.options.enableControls = this._toggleMediaAttribute('controls', value);\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Enables or disables loop functionality\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0toggleLoop: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.options.enableLoop = this._toggleMediaAttribute('loop', value);\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Enables or disables loop all functionality\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0toggleLoopAll: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.options.enableLoopAll = value\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| (value !== false &amp;&amp; !this.options.enableLoopAll);\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Enables or disables continuous functionality\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0toggleContinuous: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.options.enableContinuous = value\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| (value !== false &amp;&amp; !this.options.enableContinuous);\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Build media tag for HTML DOM\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {string|string}\r\n\u00a0\u00a0\u00a0\u00a0 * @private\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0_createMediaTag: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BUILD MEDIA HTML TAG\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.options.template\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|| ('&lt;' + this.options.type + ' src=\"\"'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ ' preload=\"' + this.options.preload + '\"'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ (this.options.enableControls ? ' controls' : '')\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ (this.options.enableLoop ? ' loop' : '')\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ (this.options.autoPlay ? ' autoplay' : '')\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ '&gt;&lt;p&gt;Your browser does not support the ' + this.options.type + ' element.&lt;\/p&gt;'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ '&lt;\/' + this.options.type + '&gt;');\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Converts file path to title\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 * @returns {XML|string|void}\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0_convertFileToTitle: function (value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return value ? value.split('\/').pop().replace(\/\\.[^\/.]+$\/, '') : '';\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Toggles attribute on media element\r\n\u00a0\u00a0\u00a0\u00a0 * @param attr\r\n\u00a0\u00a0\u00a0\u00a0 * @param value\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0_toggleMediaAttribute: function (attr, value) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var enable = value || (value !== false &amp;&amp; !this.mediaElement.hasAttribute(attr));\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (enable) this.mediaElement.setAttribute(attr, '');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else this.mediaElement.removeAttribute(attr);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return enable;\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\/**\r\n\u00a0\u00a0\u00a0\u00a0 * Binds event to media player\r\n\u00a0\u00a0\u00a0\u00a0 * @param name\r\n\u00a0\u00a0\u00a0\u00a0 * @param callback\r\n\u00a0\u00a0\u00a0\u00a0 *\/\r\n\u00a0\u00a0\u00a0\u00a0_bindMedia: function (name, callback) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (name &amp;&amp; callback) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE BINDING FOR MEDIA PLAYER AFTER RENDER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.bind(DATABOUND, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (this.mediaElement) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/BIND EVENT TO MEDIA PLAYER AFTER IT RENDERS\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.mediaElement.addEventListener(name, callback);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\r\n}));\r\n\u00a0\r\n\/\/CREATE BINDER NAMESPACE\r\nkendo.data.binders.widget.mediaplayer = {};\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.controls = kendo.data.Binder.extend({\r\n\u00a0\u00a0\u00a0\u00a0refresh: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var value = this.bindings.controls.get();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var widget = this.element;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0widget.toggleControls(value);\r\n\u00a0\u00a0\u00a0\u00a0}\r\n});\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.loop = kendo.data.Binder.extend({\r\n\u00a0\u00a0\u00a0\u00a0refresh: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var value = this.bindings.loop.get();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var widget = this.element;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0widget.toggleLoop(value);\r\n\u00a0\u00a0\u00a0\u00a0}\r\n});\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.loopAll = kendo.data.Binder.extend({\r\n\u00a0\u00a0\u00a0\u00a0refresh: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var value = this.bindings.loopAll.get();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var widget = this.element;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0widget.toggleLoopAll(value);\r\n\u00a0\u00a0\u00a0\u00a0}\r\n});\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.continuous = kendo.data.Binder.extend({\r\n\u00a0\u00a0\u00a0\u00a0refresh: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var value = this.bindings.continuous.get();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var widget = this.element;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0widget.toggleContinuous(value);\r\n\u00a0\u00a0\u00a0\u00a0}\r\n});\r\n\u00a0\r\nkendo.data.binders.widget.mediaplayer.playlistended = kendo.data.Binder.extend({\r\n\u00a0\u00a0\u00a0\u00a0init: function (widget, bindings, options) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var me = this;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kendo.data.Binder.fn.init.call(this, widget, bindings, options);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE BINDING FOR MEDIA PLAYER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0widget.bind(PLAYLISTENDED, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/EXECUTE CALLBACK OPTION\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.bindings.playlistended.get();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0refresh: function () {}\r\n});\r\n\u00a0\r\n\/\/BASE BINDER FOR MVVM MEDIA EVENTS\r\nvar MediaBinder = kendo.data.Binder.extend({\r\n\u00a0\u00a0\u00a0\u00a0eventName: null,\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0init: function (widget, bindings, options) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var me = this;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kendo.data.Binder.fn.init.call(this, widget, bindings, options);\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/HANDLE BINDING FOR MEDIA PLAYER\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0widget._bindMedia(this.eventName, function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.bindings[me.eventName].get();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0refresh: function () {}\r\n});\r\n\u00a0\r\n\/\/BIND MVVM MEDIA EVENTS\r\nkendo.data.binders.widget.mediaplayer.durationchange = MediaBinder.extend({ eventName: DURATIONCHANGE });\r\nkendo.data.binders.widget.mediaplayer.ended = MediaBinder.extend({ eventName: ENDED });\r\nkendo.data.binders.widget.mediaplayer.error = MediaBinder.extend({ eventName: ERROR });\r\nkendo.data.binders.widget.mediaplayer.loadeddata = MediaBinder.extend({ eventName: LOADEDDATA });\r\nkendo.data.binders.widget.mediaplayer.loadedmetadata = MediaBinder.extend({ eventName: LOADEDMETADATA });\r\nkendo.data.binders.widget.mediaplayer.loadstart = MediaBinder.extend({ eventName: LOADSTART });\r\nkendo.data.binders.widget.mediaplayer.pause = MediaBinder.extend({ eventName: PAUSE });\r\nkendo.data.binders.widget.mediaplayer.play = MediaBinder.extend({ eventName: PLAY });\r\nkendo.data.binders.widget.mediaplayer.playing = MediaBinder.extend({ eventName: PLAYING });\r\nkendo.data.binders.widget.mediaplayer.progress = MediaBinder.extend({ eventName: PROGRESS });\r\nkendo.data.binders.widget.mediaplayer.ratechange = MediaBinder.extend({ eventName: RATECHANGE });\r\nkendo.data.binders.widget.mediaplayer.seeked = MediaBinder.extend({ eventName: SEEKED });\r\nkendo.data.binders.widget.mediaplayer.seeking = MediaBinder.extend({ eventName: SEEKING });\r\nkendo.data.binders.widget.mediaplayer.timeupdate = MediaBinder.extend({ eventName: TIMEUPDATE });\r\nkendo.data.binders.widget.mediaplayer.volumechange = MediaBinder.extend({ eventName: VOLUMECHANGE });<\/pre>\n<p>The screenshot for mobile was already supplied. It should make more sense now how I was able to wire up the tab strip to the player. In the <em>initEvents<\/em> method, it is looking for any available selectors supplied and calling the widget methods to manipulate the player. Here is what the HTML declaration looks like:<\/p>\n<pre class=\"lang:js decode:true\">&lt;section data-role=\"layout\" data-id=\"default\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0&lt;header data-role=\"header\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;div data-role=\"navbar\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;a data-role=\"button\" data-icon=\"sounds\" data-align=\"left\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data-click=\"kendo.mobile.application.options.modelScope.viewModel.onAudioLoadedClick\"&gt;&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;span data-role=\"view-title\"&gt;&lt;\/span&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;a data-role=\"button\" data-icon=\"organize\" data-align=\"right\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data-click=\"kendo.mobile.application.options.modelScope.viewModel.onVideoLoadedClick\"&gt;&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0&lt;\/header&gt;\r\n\u00a0\u00a0\u00a0\u00a0&lt;footer data-role=\"footer\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;div data-role=\"tabstrip\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;a data-icon=\"rewind\" class=\"previous\"&gt;Previous&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;a data-icon=\"pause\" class=\"pause\"&gt;Pause&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;a data-icon=\"play\" class=\"play\"&gt;Play&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;a data-icon=\"stop\" class=\"stop\"&gt;Stop&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;a data-icon=\"fastforward\" class=\"next\"&gt;Next&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0&lt;\/footer&gt;\r\n&lt;\/section&gt;\r\n\u00a0\r\n&lt;div data-role=\"view\" data-layout=\"default\"\r\n\u00a0\u00a0\u00a0\u00a0data-title=\"Kendo Media Player\"\r\n\u00a0\u00a0\u00a0\u00a0data-model=\"viewModel\"\r\n\u00a0\u00a0\u00a0\u00a0data-bind=\"events: { init: onViewInit, show: onViewShow }\"&gt;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0&lt;div data-role=\"mediaplayer\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data-play-selector=\".km-footer .play\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data-pause-selector=\".km-footer .pause\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data-stop-selector=\".km-footer .stop\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data-previous-selector=\".km-footer .previous\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data-next-selector=\".km-footer .next\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data-bind=\"source: mediaSource, ended: onMediaEnded, playlistended: onMediaPlaylistEnded, controls: enableControls, loop: enableLoop, loopAll: enableLoopAll, continuous: enableContinuous\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0&lt;\/div&gt;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0&lt;ul data-role=\"listview\" class=\"audio-options\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data-style=\"inset\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data-type=\"group\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;li&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Configuration\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;ul&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;li&gt;Controls &lt;input type=\"checkbox\" class=\"controls\" data-role=\"switch\" data-bind=\"checked: enableControls\"&gt;&lt;\/li&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;li&gt;Loop &lt;input type=\"checkbox\" class=\"loop\" data-role=\"switch\" data-bind=\"checked: enableLoop\"&gt;&lt;\/li&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;li&gt;Loop All &lt;input type=\"checkbox\" class=\"loop-all\" data-role=\"switch\" data-bind=\"checked: enableLoopAll\"&gt;&lt;\/li&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;li&gt;Continuous &lt;input type=\"checkbox\" class=\"continuous\" data-role=\"switch\" data-bind=\"checked: enableContinuous\"&gt;&lt;\/li&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\/ul&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\/li&gt;\r\n\u00a0\u00a0\u00a0\u00a0&lt;\/ul&gt;\r\n&lt;\/div&gt;\r\n\u00a0\r\n&lt;script&gt;\r\n\u00a0\u00a0\u00a0\u00a0\/\/INITIALIZE APP\r\n\u00a0\u00a0\u00a0\u00a0require([\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'kendo.mediaplayer'\r\n\u00a0\u00a0\u00a0\u00a0], function() {\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var viewModel = kendo.observable({\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableControls: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableLoop: false,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableLoopAll: false,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enableContinuous: true,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mediaSource: [],\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0videoSource: [\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: 'Wildlife',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file: 'https:\/\/archive.org\/download\/Windows7WildlifeSampleVideo\/Wildlife_512kb.mp4'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: 'Clematis',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file: 'https:\/\/archive.org\/download\/CEP304\/CEP304_512kb.mp4'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0audioSource: [\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: 'Jungle River',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file: 'https:\/\/ia600506.us.archive.org\/17\/items\/Sounds_of_Nature_Collection\/02_Jungle_River.mp3'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: 'Tropical Rain Forest',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file: 'https:\/\/ia700506.us.archive.org\/17\/items\/Sounds_of_Nature_Collection\/04_A_Tropical_Rain_Forest.mp3'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: 'Thunder and River',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file: 'https:\/\/ia600506.us.archive.org\/17\/items\/Sounds_of_Nature_Collection\/20_Thunder_And_Rain.mp3'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file: 'https:\/\/ia600506.us.archive.org\/17\/items\/Sounds_of_Nature_Collection\/41_Ocean_Waves.mp3'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: 'Frog Chorus',\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file: 'https:\/\/ia700506.us.archive.org\/17\/items\/Sounds_of_Nature_Collection\/53_Frog_Chorus.mp3'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onViewInit: function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/DEFAULT TO AUDIO SOURCE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.set('mediaSource', this.get('audioSource'));\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onViewShow: function (e) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/CLEAR MEDIA CONTROLS ON FIRST LOAD\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.clearMediaControls();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onMediaEnded: function() {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Media ended!');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onMediaPlaylistEnded: function() {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Playlist ended!');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onAudioLoadedClick: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var context = kendo.mobile.application.options.modelScope.viewModel;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/CONVERT TO AUDIO SOURCE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$('[data-role=\"mediaplayer\"]').getKendoMediaPlayer().options.type = 'audio';\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.set('mediaSource', context.get('audioSource'));\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.clearMediaControls();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onVideoLoadedClick: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var context = kendo.mobile.application.options.modelScope.viewModel;\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/CONVERT TO VIDEO SOURCE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$('[data-role=\"mediaplayer\"]').getKendoMediaPlayer().options.type = 'video';\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.set('mediaSource', context.get('videoSource'));\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.clearMediaControls();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clearMediaControls: function () {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kendo.widgetInstance($('.km-footer [data-role=\"tabstrip\"]')).clear();\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/INITIALIZE MOBILE APP\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new kendo.mobile.Application(document.body, {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0modelScope: {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0viewModel: viewModel\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\r\n\u00a0\u00a0\u00a0\u00a0});\r\n&lt;\/script&gt;<\/pre>\n<p>And here is the screenshot again:<\/p>\n<h2><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2014\/08\/kendo-media-player.png\" alt=\"\" width=\"321\" height=\"567\" class=\"aligncenter size-full wp-image-41437\" \/><\/h2>\n<h2>Conclusion<\/h2>\n<p>As you can see, Kendo UI is a very powerful framework for creating rich and complex widgets. The ability to integrate with <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/docs.telerik.com\/kendo-ui\/getting-started\/framework\/mvvm\/overview\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">MVVM<\/a> and <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/docs.telerik.com\/kendo-ui\/getting-started\/framework\/datasource\/overview\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">DataSource<\/a> takes you to a whole new level of web development. It creates a clear separation of concerns and provides automatic capability.<\/p>\n<p>This source code is posted to our <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/https:\/\/github.com\/FalafelSoftwareInc\/kendo-ui-media-player\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">GitHub repo<\/a>. Also, you can try out this demo live by <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/demos.falafeldev.com\/kendo-ui-media-player\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">clicking here for the mobile<\/a>and <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/http:\/\/demos.falafeldev.com\/kendo-ui-media-player\/index.desktop.html\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">here for the desktop<\/a> versions. I plan on adding this to <a href=\"https:\/\/web.archive.org\/web\/20170817041957\/https:\/\/github.com\/telerik\/kendo-ui-core\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Kendo UI\u2019s source code at GitHub<\/a> and create a pull request for it. \u00a0Please provide any feedback or issues.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n<\/div>\n","link":"https:\/\/basememara.com\/new-kendo-ui-media-player-widget-with-mvvm\/","comment_count":0,"author":2,"featured_media":141,"terms":[3,8,14],"meta":{"_series_part":""},"created":"2014-08-21T01:56:05","modified":"2018-10-21T13:33:06"},{"id":230,"title":"Back to the Basics with JavaScript","slug":"back-to-the-basics-with-javascript","type":"post","excerpt":"In case you haven't heard.. JAVASCRIPT IS MAKING A COME BACK!! And it is not the same JavaScript you fiddled around with in the pre-AJAX era. It has become reborn with the help of HTML5, mobile, and even Windows 8 (see Create your first Metro style app using JavaScript). Understanding JavaScript is becoming essential and can no longer be dismissed as a \"weakly-typed, toy language with no compilation checks,\" but instead as a versatile, dynamic, cross-platform language.","content":"<p>In case you haven&#8217;t heard..\u00a0<em>JAVASCRIPT IS MAKING A COME BACK!!<\/em>\u00a0And it is not the same JavaScript you fiddled around with in the pre-AJAX era. It has become reborn with the help of HTML5, mobile, and even Windows 8 (see\u00a0<a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/windows\/apps\/br211385.aspx\" target=\"_blank\" rel=\"noopener\">Create your first Metro style app using JavaScript<\/a>). Understanding JavaScript is becoming essential and can no longer be dismissed as a &#8220;weakly-typed, toy language with no compilation checks,&#8221; but instead as a versatile, dynamic, cross-platform language&#8230; <a href=\"https:\/\/web.archive.org\/web\/20160526234607\/http:\/\/blog.falafel.com\/back-to-the-basics-with-javascript\/\" target=\"_blank\" rel=\"noopener\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/back-to-the-basics-with-javascript\/","comment_count":0,"author":2,"featured_media":null,"terms":[3],"meta":{"_series_part":""},"created":"2012-03-12T16:13:10","modified":"2018-10-21T13:17:08"},{"id":122,"title":"JavaScript says, \"let\" there be block-scope!","slug":"javascript-says-let-there-be-block-scope","type":"post","excerpt":"Variable in JavaScript has always been a leaky concept. We all know global variables are evil, but \"hoisted\" variables within a certain scope can lead to unexpected bugs that are hard to track down. Introducing the new \"let\" keyword!","content":"<p>Variables in JavaScript has always been a leaky concept. We all know global variables are evil, but \u201choisted\u201d variables within a certain scope can lead to unexpected bugs that are hard to track down.\u00a0Take the following example:<\/p>\n<pre class=\"lang:js decode:true  \">function whatsMyName() {\r\n\u00a0\u00a0if (true) {\r\n\u00a0\u00a0\u00a0\u00a0var name = 'Basem';\r\n\u00a0\u00a0}\r\n\u00a0\u00a0alert(name); \/\/ Basem\r\n}<\/pre>\n<p>In other languages, the \u201cname\u201d variable is scoped within the if-statement only. Not true in JavaScript! Any variable created inside a function is pinned\u00a0to the top of the function, no matter where you declare it. This behavior is known as <em>\u201choisting\u201d<\/em>.<\/p>\n<p>The example above can be better understood like this:<\/p>\n<pre class=\"lang:js decode:true \">function whatsMyName() {\r\n\u00a0\u00a0var name; \/\/ Variable hoisted to the top\r\n\u00a0\r\n\u00a0\u00a0if (true) {\r\n\u00a0\u00a0\u00a0\u00a0name = 'Basem';\r\n\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0alert(name); \/\/ Basem\r\n}<\/pre>\n<p>Now, let there be proper scoping\u00a0in JavaScript! Introducing the new <em>\u201clet\u201d<\/em> keyword.<\/p>\n<pre class=\"lang:js decode:true\">function whatsMyName() {\r\n\u00a0\u00a0if (true) {\r\n\u00a0\u00a0\u00a0\u00a0let name = 'Basem';\r\n\u00a0\u00a0}\r\n\u00a0\u00a0alert(name); \/\/ Error: Name is undefined\r\n}<\/pre>\n<p>Another way to see this is the following:<\/p>\n<pre class=\"lang:js decode:true \">function whatsMyName() {\r\n\u00a0\u00a0var name = 'John';\r\n\u00a0\r\n\u00a0\u00a0if (true) {\r\n\u00a0\u00a0\u00a0\u00a0let name = 'Basem';\r\n\u00a0\u00a0\u00a0\u00a0alert(name); \/\/ Basem\r\n\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0alert(name); \/\/ John\r\n}<\/pre>\n<p>The \u201clet\u201d keyword is block-scoped, while \u201cvar\u201d continues to be function-scoped. Let the refactoring begin!<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/javascript-says-let-there-be-block-scope\/","comment_count":0,"author":2,"featured_media":123,"terms":[19,3],"meta":{"_series_part":""},"created":"2015-01-30T21:06:16","modified":"2018-10-21T12:49:14"},{"id":276,"title":"Getting Started with TypeScript","slug":"getting-started-with-typescript","type":"post","excerpt":"Any doubt you may have had about TypeScript should have melted away with the recent announcement of Angular 2 being written in TypeScript. Google and Microsoft putting aside their egos (and money) to build an open source project together certainly indicates something amazing about AngularJS and TypeScript. I don't need to tell you how awesome AngularJS is, so in this post I'd like to show you how awesome TypeScript is.","content":"<p>Any doubt you may have had about\u00a0<a href=\"https:\/\/web.archive.org\/web\/20160302191644\/http:\/\/www.typescriptlang.org\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">TypeScript<\/a> should have melted away with the recent announcement of\u00a0<a href=\"https:\/\/web.archive.org\/web\/20160302191644\/http:\/\/techcrunch.com\/2015\/03\/05\/microsoft-and-google-collaborate-on-typescript-hell-has-not-frozen-over-yet\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Angular 2 being\u00a0written in TypeScript<\/a>.\u00a0Google and Microsoft putting aside their egos (and money) to build an open source project together certainly indicates something amazing about <a href=\"https:\/\/web.archive.org\/web\/20160302191644\/https:\/\/angular.io\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">AngularJS<\/a> and TypeScript. I don\u2019t need to tell you how awesome AngularJS is, so in this post I\u2019d like to show you how awesome TypeScript is.<\/p>\n<h2>Dude, Where\u2019s My\u00a0Types?<\/h2>\n<p>One of the flexible things about JavaScript is that it\u2019s a dynamic language. Pass in a string, number, or even function into the same parameter and JavaScript won\u2019t complain. When creating large scale JavaScript applications though, this can become a maintenance and debugging\u00a0nightmare. Also producing an API for your application for other developers make it daunting to use and heavily reliant\u00a0on good documentation. Enter TypeScript\u2026 you can optionally decorate your parameters with annotations as so:<\/p>\n<div id=\"crayon-56d73c1cd2e56679922450\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true \">function getPerson(id: number) {\r\n\u00a0\u00a0return {\r\n\u00a0\u00a0\u00a0\u00a0id: id,\r\n\u00a0\u00a0\u00a0\u00a0firstName: 'John',\r\n\u00a0\u00a0\u00a0\u00a0lastName: 'Doe'\r\n\u00a0\u00a0};\r\n}<\/pre>\n<p>You see the <em>\u201c: number\u201d<\/em> in the parameter? That will infer the type throughout the application and even give you intellisense assistance and compiling checks. Intellisense and compiling checks are included in Visual Studio, but are made open source for any IDE to use freely (which many do\u00a0already).<\/p>\n<\/div>\n<\/div>\n<h2>Interfaces<\/h2>\n<p>Giving structure to your objects no longer make it a guessing game in JavaScript. For example, I can define the return type of the function above:<\/p>\n<div id=\"crayon-56d73c1cd2e66160632271\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">function getPerson(id: number): Person {\r\n\u00a0\u00a0return {\r\n\u00a0\u00a0\u00a0\u00a0id: id,\r\n\u00a0\u00a0\u00a0\u00a0firstName: 'John',\r\n\u00a0\u00a0\u00a0\u00a0lastName: 'Doe'\r\n\u00a0\u00a0};\r\n}<\/pre>\n<\/div>\n<\/div>\n<p>The function is returning a <em>\u201cPerson\u201d<\/em> type, which can be an interface as so:<\/p>\n<div id=\"crayon-56d73c1cd2e6d192005561\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">interface Person {\r\n\u00a0\u00a0id: number;\r\n\u00a0\u00a0firstName: string;\r\n\u00a0\u00a0lastName: string;\r\n}<\/pre>\n<\/div>\n<\/div>\n<p>If my return object doesn\u2019t match this signature, I will get an intellisense and compile error.<\/p>\n<h2>Adding Some\u00a0Class<\/h2>\n<p>It would make sense if we made <em>\u201cPerson\u201d<\/em> a class instead of an interface. That way, we can create new instances of <em>\u201cPerson\u201d<\/em>:<\/p>\n<div id=\"crayon-56d73c1cd2e77584312574\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">class Person {\r\n\u00a0\u00a0id: number;\r\n\u00a0\u00a0firstName: string;\r\n\u00a0\u00a0lastName: string;\r\n\u00a0\r\n\u00a0\u00a0constructor(id: number, firstName: string, lastName: string) {\r\n\u00a0\u00a0\u00a0\u00a0this.id = id;\r\n\u00a0\u00a0\u00a0\u00a0this.firstName = firstName;\r\n\u00a0\u00a0\u00a0\u00a0this.lastName = lastName;\r\n\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0get fullName() {\r\n\u00a0\u00a0\u00a0\u00a0return this.firstName + ' ' + this.lastName;\r\n\u00a0\u00a0}\r\n}<\/pre>\n<\/div>\n<\/div>\n<p>Declaring\u00a0classes in TypeScript looks sexy because it is taken from the <a title=\"JavaScript classes with ECMAScript 6\" href=\"https:\/\/web.archive.org\/web\/20160302191644\/http:\/\/blog.falafel.com\/javascript-classes-ecmascript-6\/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">EcmaScript 6 specification<\/a>. I even added a dynamic property called <em>\u201cfullName\u201d<\/em> that concatenates first and last name on the fly.<\/p>\n<p>Now I can do this with my original function:<\/p>\n<div id=\"crayon-56d73c1cd2e7f644156201\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">function getPerson(id: number) {\r\n\u00a0\u00a0return new Person(id, 'John', 'Doe');\r\n}<\/pre>\n<\/div>\n<\/div>\n<p>I don\u2019t have to tell TypeScript that <em>\u201cgetPerson\u201d<\/em> has a return type of <em>\u201cPerson\u201d<\/em>\u00a0anymore since it is inferred in the return statement. And I still get all the goodies of intellisense and compiling checks.<\/p>\n<p>I can even define\u00a0the parameters in my\u00a0constructor as <em>public<\/em> properties without needing to explicitly assign them in the constructor logic:<\/p>\n<div id=\"crayon-56d73c1cd2e86999821983\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">class Person {\r\n\u00a0\r\n\u00a0\u00a0constructor(public id: number, public firstName: string, public lastName: string) {\r\n\u00a0\u00a0\u00a0\u00a0\/\/ Don't have to do anything here anymore\r\n\u00a0\u00a0}\r\n\u00a0\r\n\u00a0\u00a0get fullName() {\r\n\u00a0\u00a0\u00a0\u00a0return this.firstName + ' ' + this.lastName;\r\n\u00a0\u00a0}\r\n}<\/pre>\n<\/div>\n<\/div>\n<h2>Conclusion<\/h2>\n<p>Are you in love yet? This is only the tip of the iceberg of what TypeScript is. Also, everything gets compiled into pure JavaScript files, so keep in mind that TypeScript was created for the development process, yet remains cross-browser compliant. Add arrow functions, class inheritance, function overloading,\u00a0module dependency management, and you have a true <em>object-oriented paradigm<\/em>\u00a0in JavaScript. Marry that with AngularJS and we\u00a0have a solid path to the\u00a0JavaScript promise land.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/getting-started-with-typescript\/","comment_count":0,"author":2,"featured_media":277,"terms":[22,19,3,44],"meta":{"_series_part":""},"created":"2015-03-09T19:15:27","modified":"2018-10-21T12:39:52"},{"id":1714,"title":"Full Stack iOS and WordPress in Swift","slug":"full-stack-ios-and-wordpress-in-swift","type":"post","excerpt":"","content":"<p>WordPress has been around\u00a0for almost a decade and a half.\u00a0It survived the CMS wars and remained relevant during the mobile shift. It&#8217;s been battle-tested under\u00a0various scenarios and load.\u00a0It showed us what a thriving 3rd party marketplace looks like.\u00a0Now, WordPress is realizing a grander vision!<\/p>\n<p>In\u00a0the release of WordPress 4.7, the <a href=\"https:\/\/wptavern.com\/wp-rest-api-officially-approved-for-merge-into-wordpress-4-7\" target=\"_blank\" rel=\"noopener\">REST API plugin was merged into core<\/a>\u00a0and\u00a0enabled\u00a0by default. This means you can request\u00a0the\u00a0data format\u00a0of any WordPress 4.7+ site out there. Go ahead, try this very blog out for yourself:\u00a0<a href=\"http:\/\/basememara.com\/wp-json\/wp\/v2\/posts\" target=\"_blank\" rel=\"noopener\">http:\/\/basememara.com\/wp-json\/wp\/v2\/posts:<\/a><\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_118-500x800.png\" width=\"300\" height=\"481\" class=\"aligncenter wp-image-1717\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_118-500x800.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_118-768x1230.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_118-639x1024.png 639w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_118.png 990w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p>It&#8217;s\u00a0what <a href=\"https:\/\/www.ted.com\/talks\/tim_berners_lee_on_the_next_web\" target=\"_blank\" rel=\"noopener\">the next web<\/a> looks like\u00a0&#8211; data!\u00a0WordPress is trying to live beyond the browser, where the Internet is being taken over by\u00a0IoT, AI, microservices, {<em>enter latest geek buzzword here<\/em>}, etc. In this post, I&#8217;d like to show how we can\u00a0leverage\u00a0WordPress and use it as a solid backend\u00a0for our native Swift app.<\/p>\n<h2>The Project Plan<\/h2>\n<p>It usually helps to work backwards from a goal,\u00a0so below is\u00a0the app we will end up with. It&#8217;s actually the <a href=\"https:\/\/itunes.apple.com\/app\/id1021806851\" target=\"_blank\" rel=\"noopener\">live app<\/a> for\u00a0this blog and is fully <a href=\"https:\/\/github.com\/ZamzamInc\/SwiftyPress\" target=\"_blank\" rel=\"noopener\">open source<\/a>:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/IMG_2127-e1485341794877-464x800.png\" width=\"464\" height=\"800\" class=\"aligncenter wp-image-1718 size-medium\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/IMG_2127-e1485341794877-464x800.png 464w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/IMG_2127-e1485341794877-594x1024.png 594w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/IMG_2127-e1485341794877.png 750w\" sizes=\"(max-width: 464px) 100vw, 464px\" \/><\/p>\n<p>First, a\u00a0few ground rules before we start building this WordPress app:<\/p>\n<ul>\n<li><strong>Offline:<\/strong>\u00a0The app has to work with no internet connection (that&#8217;s a major advantage over a website!).<\/li>\n<li><strong>Updates:<\/strong> The content should be fresh and up-to-date on the app.<\/li>\n<li><strong>Reusable:<\/strong>\u00a0Being able to package this as an app framework and easily used for other WordPress sites.<\/li>\n<\/ul>\n<p>The last one might be too ambitious, but I&#8217;ve already done it! See <a href=\"https:\/\/itunes.apple.com\/app\/id992314096\" target=\"_blank\" rel=\"noopener\">this app<\/a>\u00a0which uses\u00a0the same framework, but a different\u00a0WordPress site and &#8220;theme&#8221;.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_120-462x800.png\" alt=\"\" width=\"462\" height=\"800\" class=\"aligncenter size-medium wp-image-1730\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_120-462x800.png 462w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_120-768x1329.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_120-592x1024.png 592w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_120.png 786w\" sizes=\"(max-width: 462px) 100vw, 462px\" \/><\/p>\n<p>Ok, now that you know the plan:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/lets-begin.jpg\" width=\"250\" height=\"250\" class=\"aligncenter wp-image-712\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/lets-begin.jpg 400w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/lets-begin-150x150.jpg 150w\" sizes=\"(max-width: 250px) 100vw, 250px\" \/><\/p>\n<h2>The Framework<\/h2>\n<p>As part of our goals, this has to be a framework so we can reuse it. In my previous post, called &#8220;<a href=\"http:\/\/basememara.com\/creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods\/\" target=\"_blank\" rel=\"noopener\">Creating Cross-Platform Swift Frameworks<\/a>&#8220;, I cover how we can setup a fresh Xcode workspace for a framework so it can be distributed across projects. The framework structure will look like this:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_126-335x800.png\" alt=\"\" width=\"335\" height=\"800\" class=\"aligncenter size-medium wp-image-1740\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_126-335x800.png 335w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_126-429x1024.png 429w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_126.png 620w\" sizes=\"(max-width: 335px) 100vw, 335px\" \/><\/p>\n<p>Now we have a place\u00a0to code!<\/p>\n<h2>The Configuration<\/h2>\n<p>Before we go much further, we need a simple and manageable\u00a0way to store configuration values. I cover how we can read values from a plist file in my <a href=\"http:\/\/basememara.com\/reading-values-plist-bundle-swift\/\" target=\"_blank\" rel=\"noopener\">previous post<\/a>. In the end, our plist configuration file will look something like this:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_122-500x363.png\" alt=\"\" width=\"500\" height=\"363\" class=\"aligncenter size-medium wp-image-1734\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_122-500x363.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_122-768x558.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_122-1024x744.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_122.png 1062w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>This way, apps consuming the framework only have to set a few configuration values in a plist file to wire it to their WordPress site, as well as add some look and feel changes. This will get read into memory when the app starts up:<\/p>\n<pre class=\"lang:swift decode:true \">class AppDelegate: UIResponder, UIApplicationDelegate, AppPressable {\r\n\r\n    var window: UIWindow?\r\n\r\n    override init() {\r\n        super.init()\r\n        UserDefaults.standard.registerDefaults(\"Settings.plist\")\r\n    }\r\n\r\n    ...\r\n}<\/pre>\n<p>This is extending\u00a0Apple&#8217;s native &#8220;<em>UserDefaults<\/em>&#8221; function called &#8220;<a href=\"https:\/\/developer.apple.com\/reference\/foundation\/userdefaults\/1417065-register\" target=\"_blank\" rel=\"noopener\">register(defaults:)<\/a>&#8221; to store a dictionary into the user defaults. In this case, it&#8217;s first converting the plist into a dictionary, then using the underlying native &#8220;<em>register<\/em>&#8221; call to store the values into user defaults for later use.<\/p>\n<h2>Ground Zero: The Database<\/h2>\n<p>An application is only as good as its data. That&#8217;s why it&#8217;s important to think of what the data schema will look like. Seeing what the WordPress JSON looks like out of the box, things can get messy and confusing. Instead, I&#8217;d like to extend the new <a href=\"https:\/\/developer.wordpress.org\/rest-api\/\" target=\"_blank\" rel=\"noopener\">WordPress REST API<\/a> to provide my own slim, simplified endpoint:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_119-500x572.png\" alt=\"\" width=\"500\" height=\"572\" class=\"aligncenter size-medium wp-image-1722\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_119-500x572.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_119-768x879.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_119-894x1024.png 894w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_119.png 1394w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Fortunately, the new REST API is super flexible and well thought out to do this. Below is\u00a0the WordPress extension point to make this happen, or\u00a0you can install my\u00a0WordPress <a href=\"https:\/\/github.com\/ZamzamInc\/SwiftyPress-WP\" target=\"_blank\" rel=\"noopener\">SwiftyPress plugin<\/a>\u00a0to get it done\u00a0(ya, it&#8217;s in PHP):<\/p>\n<pre class=\"lang:php decode:true \">&lt;?php\r\n\r\nclass SwiftyPress_REST_Post_Controller {\r\n \r\n    \/\/ Here initialize our namespace and resource name.\r\n    public function __construct() {\r\n        $this-&gt;namespace = '\/swiftypress\/v2';\r\n        $this-&gt;resource_name = 'posts';\r\n        $this-&gt;date_format = 'Y-m-d\\TH:i:s';\r\n    }\r\n \r\n    \/\/ Register our routes.\r\n    public function register_routes() {\r\n        register_rest_route($this-&gt;namespace, '\/' . $this-&gt;resource_name, array(\r\n            array(\r\n                'methods' =&gt; 'GET',\r\n                'callback' =&gt; array($this, 'get_items')\r\n            ),\r\n            'schema' =&gt; array($this, 'get_item_schema')\r\n        ));\r\n\r\n        register_rest_route($this-&gt;namespace, '\/' . $this-&gt;resource_name . '\/(?P&lt;id&gt;[\\d]+)', array(\r\n            array(\r\n                'methods' =&gt; 'GET',\r\n                'callback' =&gt; array($this, 'get_item')\r\n            ),\r\n            'schema' =&gt; array($this, 'get_item_schema')\r\n        ));\r\n    }\r\n \r\n    \/**\r\n     * Grabs the five most recent posts and outputs them as a rest response.\r\n     *\r\n     * @param WP_REST_Request $request Current request.\r\n     *\/\r\n    public function get_items($request) {\r\n        \/\/ Construct query options\r\n        $params = array();\r\n\r\n        if (isset($request['per_page'])) {\r\n            $per_page = (int)$request['per_page'];\r\n            if ($per_page &gt; 0) {\r\n                $params['posts_per_page'] = $per_page;\r\n\r\n                if (isset($request['page'])) {\r\n                    $page_nbr = (int)$request['page'];\r\n                    $params['offset'] = $page_nbr * $per_page;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isset($request['orderby'])) {\r\n            $params['orderby'] = $request['orderby'];\r\n        }\r\n\r\n        if (isset($request['order'])) {\r\n            $params['order'] = strtoupper($request['order']);\r\n        }\r\n\r\n        $posts = get_posts($params);\r\n        $data = array();\r\n \r\n        if (empty($posts)) {\r\n            return rest_ensure_response($data);\r\n        }\r\n \r\n        foreach ($posts as $post) {\r\n            $response = $this-&gt;prepare_item_for_response($post, $request);\r\n            $data[] = $this-&gt;prepare_response_for_collection($response);\r\n        }\r\n \r\n        \/\/ Return all response data.\r\n        return rest_ensure_response($data);\r\n    }\r\n \r\n    \/**\r\n     * Grabs the five most recent posts and outputs them as a rest response.\r\n     *\r\n     * @param WP_REST_Request $request Current request.\r\n     *\/\r\n    public function get_item($request) {\r\n        $id = (int)$request['id'];\r\n        $post = get_post($id);\r\n \r\n        if (empty($post)) {\r\n            return rest_ensure_response(array());\r\n        }\r\n \r\n        $response = $this-&gt;prepare_item_for_response($post, $request);\r\n \r\n        \/\/ Return all response data.\r\n        return $response;\r\n    }\r\n \r\n    \/**\r\n     * Matches the post data to the schema we want.\r\n     *\r\n     * @param WP_Post $post The comment object whose response is being prepared.\r\n     *\/\r\n    public function prepare_item_for_response($post, $request) {\r\n        $post_data = array();\r\n \r\n        $schema = $this-&gt;get_item_schema($request);\r\n \r\n        \/\/ We are also renaming the fields to more understandable names.\r\n        if (isset($schema['properties']['id'])) {\r\n            $post_data['id'] = (int)$post-&gt;ID;\r\n        }\r\n\r\n        if (isset($schema['properties']['title'])) {\r\n            $post_data['title'] = $post-&gt;post_title;\r\n        }\r\n        \r\n        if (isset($schema['properties']['slug'])) {\r\n            $post_data['slug'] = $post-&gt;post_name;\r\n        }\r\n        \r\n        if (isset($schema['properties']['type'])) {\r\n            $post_data['type'] = $post-&gt;post_type;\r\n        }\r\n        \r\n        if (isset($schema['properties']['excerpt'])) {\r\n            $post_data['excerpt'] = $post-&gt;post_excerpt;\r\n        }\r\n        \r\n        if (isset($schema['properties']['date'])) {\r\n            $post_data['date'] = get_the_date($this-&gt;date_format, $post-&gt;ID);\r\n        }\r\n        \r\n        if (isset($schema['properties']['modified'])) {\r\n            $post_data['modified'] = get_post_modified_time($this-&gt;date_format, null, $post-&gt;ID);\r\n        }\r\n        \r\n        if (isset($schema['properties']['comment_count'])) {\r\n            $post_data['comment_count'] = (int)$post-&gt;comment_count;\r\n        }\r\n        \r\n        if (isset($schema['properties']['link'])) {\r\n            $post_data['link'] = get_permalink($post-&gt;ID);\r\n        }\r\n        \r\n        if (isset($schema['properties']['author'])) {\r\n            $post_data['author'] = array(\r\n                'id' =&gt; (int)$post-&gt;post_author,\r\n                'username' =&gt; get_the_author_meta('user_login', $post-&gt;post_author),\r\n                'email' =&gt; get_the_author_meta('user_email', $post-&gt;post_author),\r\n                'name' =&gt; get_the_author_meta('display_name', $post-&gt;post_author),\r\n                'link' =&gt; get_the_author_meta('url', $post-&gt;post_author),\r\n                'avatar' =&gt; get_avatar_url($post-&gt;post_author),\r\n                'description' =&gt; get_the_author_meta('description', $post-&gt;post_author)\r\n            );\r\n        }\r\n        \r\n        if (isset($schema['properties']['featured_media'])) {\r\n            $attachment_id = get_post_thumbnail_id($post-&gt;ID);\r\n            \r\n            if ($attachment_id &gt; 0) {\r\n                $full = wp_get_attachment_image_src($attachment_id, 'full');\r\n                $thumbnail = wp_get_attachment_image_src($attachment_id, 'medium');\r\n                \r\n                $post_data['featured_media'] = array(\r\n                    'link' =&gt; $full[0],\r\n                    'width' =&gt; (int)$full[1],\r\n                    'height' =&gt; (int)$full[2],\r\n                    'thumbnail_link' =&gt; $thumbnail[0],\r\n                    'thumbnail_width' =&gt; (int)$thumbnail[1],\r\n                    'thumbnail_height' =&gt; (int)$thumbnail[2]\r\n                );\r\n            } else {\r\n                $post_data['featured_media'] = null;\r\n            }\r\n        }\r\n        \r\n        if (isset($schema['properties']['categories'])) {\r\n            $terms = get_the_category($post-&gt;ID);\r\n\r\n            if (!empty($terms)) {\r\n                $post_data['categories'] = array_map( \r\n                    function($item) {\r\n                        return array(\r\n                            'id' =&gt; (int)$item-&gt;term_id,\r\n                            'parent' =&gt; (int)$item-&gt;parent,\r\n                            'name' =&gt; $item-&gt;name,\r\n                            'slug' =&gt; $item-&gt;slug,\r\n                            'taxonomy' =&gt; $item-&gt;taxonomy\r\n                        );\r\n                    }, \r\n                    $terms\r\n                );\r\n            } else {\r\n                $post_data['categories'] = [];\r\n            }\r\n        }\r\n        \r\n        if (isset($schema['properties']['tags'])) {\r\n            $terms = get_the_tags($post-&gt;ID);\r\n            if (!empty($terms)) {\r\n                $post_data['tags'] = array_map( \r\n                    function($item) {\r\n                        return array(\r\n                            'id' =&gt; (int)$item-&gt;term_id,\r\n                            'parent' =&gt; (int)$item-&gt;parent,\r\n                            'name' =&gt; $item-&gt;name,\r\n                            'slug' =&gt; $item-&gt;slug,\r\n                            'taxonomy' =&gt; $item-&gt;taxonomy\r\n                        );\r\n                    }, \r\n                    $terms\r\n                );\r\n            } else {\r\n                $post_data['tags'] = [];\r\n            }\r\n        }\r\n \r\n        if (isset($schema['properties']['content'])) {\r\n            $post_data['content'] = apply_filters('the_content', $post-&gt;post_content, $post);\r\n        }\r\n \r\n        return rest_ensure_response($post_data);\r\n    }\r\n \r\n    \/**\r\n     * Prepare a response for inserting into a collection of responses.\r\n     *\r\n     * This is copied from WP_REST_Controller class in the WP REST API v2 plugin.\r\n     *\r\n     * @param WP_REST_Response $response Response object.\r\n     * @return array Response data, ready for insertion into collection data.\r\n     *\/\r\n    public function prepare_response_for_collection($response) {\r\n        if (!($response instanceof WP_REST_Response)) {\r\n            return $response;\r\n        }\r\n \r\n        $data = (array)$response-&gt;get_data();\r\n        $server = rest_get_server();\r\n \r\n        if (method_exists($server, 'get_compact_response_links')) {\r\n            $links = call_user_func(array($server, 'get_compact_response_links'), $response);\r\n        } else {\r\n            $links = call_user_func(array($server, 'get_response_links'), $response);\r\n        }\r\n \r\n        if (!empty($links)) {\r\n            $data['_links'] = $links;\r\n        }\r\n \r\n        return $data;\r\n    }\r\n \r\n    \/**\r\n     * Get our sample schema for a post.\r\n     *\r\n     * @param WP_REST_Request $request Current request.\r\n     *\/\r\n    public function get_item_schema($request) {\r\n        $schema = array(\r\n            \/\/ This tells the spec of JSON Schema we are using which is draft 4.\r\n            '$schema' =&gt; 'http:\/\/json-schema.org\/draft-04\/schema#',\r\n            \/\/ The title property marks the identity of the resource.\r\n            'title' =&gt; 'post',\r\n            'type' =&gt; 'object',\r\n            \/\/ In JSON Schema you can specify object properties in the properties attribute.\r\n            'properties' =&gt; array(\r\n                'id' =&gt; array(\r\n                    'description' =&gt; esc_html__('Unique identifier for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'integer',\r\n                    'context' =&gt; array('view', 'edit', 'embed'),\r\n                    'readonly' =&gt; true\r\n                ),\r\n                'title' =&gt; array(\r\n                    'description' =&gt; esc_html__('The title for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'string'\r\n                ),\r\n                'slug' =&gt; array(\r\n                    'description' =&gt; esc_html__('The slug for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'type' =&gt; array(\r\n                    'description' =&gt; esc_html__('The type for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'excerpt' =&gt; array(\r\n                    'description' =&gt; esc_html__('The excerpt for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'date' =&gt; array(\r\n                    'description' =&gt; esc_html__('The date for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'modified' =&gt; array(\r\n                    'description' =&gt; esc_html__('The modified for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'comment_count' =&gt; array(\r\n                    'description' =&gt; esc_html__('The comment count for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'integer'\r\n                ),\r\n                'link' =&gt; array(\r\n                    'description' =&gt; esc_html__('The link for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'author' =&gt; array(\r\n                    'description' =&gt; esc_html__('The author for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'object'\r\n                ),\r\n                'featured_media' =&gt; array(\r\n                    'description' =&gt; esc_html__('The featured media for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'object'\r\n                ),\r\n                'content' =&gt; array(\r\n                    'description' =&gt; esc_html__('The content for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'categories' =&gt; array(\r\n                    'description' =&gt; esc_html__('The categories for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'object'\r\n                ),\r\n                'tags' =&gt; array(\r\n                    'description' =&gt; esc_html__('The tags for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'object'\r\n                )\r\n            )\r\n        );\r\n \r\n        return $schema;\r\n    }\r\n \r\n    \/\/ Sets up the proper HTTP status code for authorization.\r\n    public function authorization_status_code() {\r\n        return is_user_logged_in() ? 403 : 401;\r\n    }\r\n}<\/pre>\n<p>It&#8217;s mostly boilerplate code, but now I get my own route with endpoints and schemas. Here is what we&#8217;re working with now:\u00a0<a href=\"http:\/\/basememara.com\/wp-json\/swiftypress\/v2\/posts\" target=\"_blank\" rel=\"noopener\">http:\/\/basememara.com\/wp-json\/swiftypress\/v2\/posts<\/a>.\u00a0The <a href=\"https:\/\/developer.wordpress.org\/rest-api\/extending-the-rest-api\/controller-classes\/\">WordPress documentation<\/a> provides some more details and samples in creating your own custom endpoints.<\/p>\n<p>Designing the app as <em>offline-first<\/em> is important so we don&#8217;t jam ourselves into a corner\u00a0later. So\u00a0we need a way to persist this data locally in the app to ensure it works offline;\u00a0for this we will use <a href=\"http:\/\/realm.io\/docs\/swift\/latest\/\" target=\"_blank\" rel=\"noopener\">Realm<\/a>. Here&#8217;s\u00a0how the database will look like\u00a0in the app:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_121-500x210.png\" alt=\"\" width=\"500\" height=\"210\" class=\"aligncenter size-medium wp-image-1731\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_121-500x210.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_121-768x323.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_121-1024x430.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<h2>The Models<\/h2>\n<p>We have our\u00a0database and the endpoints to update it, now we can start designing our Swift models. Let&#8217;s first start with the &#8220;<em>Post<\/em>&#8221; model:<\/p>\n<pre class=\"lang:swift decode:true \">public protocol Postable: class {\r\n    \r\n    var id: Int { get set }\r\n    var title: String { get set }\r\n    var content: String { get set }\r\n    var excerpt: String { get set }\r\n    var slug: String { get set }\r\n    var type: String { get set }\r\n    var link: String { get set }\r\n    var date: Date? { get set }\r\n    var modified: Date? { get set }\r\n    var commentCount: Int { get set }\r\n    \r\n    var media: Media? { get set }\r\n    var author: User? { get set }\r\n    var categories: List&lt;Term&gt; { get }\r\n    var tags: List&lt;Term&gt; { get }\r\n}\r\n\r\npublic class Post: Object, Postable {\r\n    \r\n    public dynamic var id = 0\r\n    public dynamic var title = \"\"\r\n    public dynamic var content = \"\"\r\n    public dynamic var excerpt = \"\"\r\n    public dynamic var slug = \"\"\r\n    public dynamic var type = \"\"\r\n    public dynamic var link = \"\"\r\n    public dynamic var date: Date?\r\n    public dynamic var modified: Date?\r\n    public dynamic var commentCount = 0\r\n    \r\n    public dynamic var media: Media?\r\n    public dynamic var author: User?\r\n    public var categories = List&lt;Term&gt;()\r\n    public var tags = List&lt;Term&gt;()\r\n    \r\n    public override static func primaryKey() -&gt; String? {\r\n        return \"id\"\r\n    }\r\n    \r\n    public override static func indexedProperties() -&gt; [String] {\r\n        return [\r\n            \"title\",\r\n            \"slug\",\r\n            \"date\"\r\n        ]\r\n    }\r\n    \r\n    public convenience init(json: JSON) {\r\n        self.init()\r\n        \r\n        id = json[.id]\r\n        title = json[.title]\r\n        content = json[.content]\r\n        excerpt = json[.excerpt]\r\n        slug = json[.slug]\r\n        type = json[.type]\r\n        link = json[.link]\r\n        date = json[.date]\r\n        modified = json[.modified]\r\n        commentCount = json[.commentCount]\r\n        \r\n        \/\/ Retrieve associated models\r\n        author = User(json: json[.author])\r\n        categories = List&lt;Term&gt;(json[.categories].map(Term.init))\r\n        tags = List&lt;Term&gt;(json[.tags].map(Term.init))\r\n        \r\n        let image = Media(json: json[.media])\r\n        if !image.link.isEmpty {\r\n            media = image\r\n        }\r\n    }\r\n}<\/pre>\n<p>Notice my &#8220;<em>convenient init<\/em>&#8220;, where I can instantiate the model from JSON. I&#8217;m using a Swifty library called <a href=\"https:\/\/github.com\/delba\/JASON\" target=\"_blank\" rel=\"noopener\">JASON<\/a>, but you can choose another library or manually do the conversion.<\/p>\n<p>You can see the <a href=\"https:\/\/github.com\/ZamzamInc\/SwiftyPress\/tree\/master\/Sources\/Models\" target=\"_blank\" rel=\"noopener\">source code for the other models<\/a>, but basically I created models for: <em>Media (images), Post, Term (categories and tags), and User (author)<\/em>.<\/p>\n<h2>The Service<\/h2>\n<p>We need a way to query the data from the local Realm and remote WordPress databases. We can create a centralized service per model to do this, such as &#8220;<em>PostService<\/em>&#8220;:<\/p>\n<pre class=\"lang:swift decode:true\">public struct PostService {\r\n\r\n    public func get(complete: @escaping ([Post]) -&gt; Void) {\r\n        guard let realm = Realm(), let list = realm.objects(Post.self) else { return [] }\r\n        complete(list)\r\n    }\r\n  \r\n    func getFromRemote(id: Int, complete: @escaping (Post) -&gt; Void) {\r\n        Alamofire.request(PostRouter.readPost(id))\r\n            .responseJASON { response in\r\n                guard let json = response.result.value, response.result.isSuccess else { return }\r\n                complete(Post(json: json))\r\n        }\r\n    }\r\n}<\/pre>\n<p>The first &#8220;<em>get<\/em>&#8221; function retrieves the posts from the local Realm database. We will also need the &#8220;<em>getFromRemote<\/em>&#8221; function to retrieve data from the cloud (WordPress), which passes in\u00a0the remote JSON to the model&#8217;s <em>convenient init<\/em>\u00a0to be saved into Realm later.<\/p>\n<p>To make things maintainable and more elegant, I created a &#8220;<em>PostRouter<\/em>&#8221; that houses all our REST API calls via\u00a0<a href=\"https:\/\/github.com\/Alamofire\/Alamofire#routing-requests\" target=\"_blank\" rel=\"noopener\">Alamofire&#8217;s nifty &#8220;<span class=\"s1\"><em>URLRequestConvertible<\/em>&#8221; protocol<\/span><\/a>. This way, the\u00a0REST API calls can be changed and managed in one place:<\/p>\n<pre class=\"lang:swift decode:true \">enum PostRouter: URLRequestConvertible {\r\n    case readPost(Int)\r\n    case readPosts(Int, Int, String, Bool)\r\n    case commentCount(Int)\r\n    case commentsCount\r\n    \r\n    static let baseURLString = \"http:\/\/basememara.com\"\r\n    static let baseRESTString = \"wp-json\/swiftypress\/v2\"\r\n\r\n    var method: HTTPMethod {\r\n        switch self {\r\n        case .readPost: return .get\r\n        case .readPosts: return .get\r\n        case .commentCount: return .get\r\n        case .commentsCount: return .get\r\n        }\r\n    }\r\n\r\n    var path: String {\r\n        switch self {\r\n        case .readPost(let id):\r\n            return \"\/posts\/\\(id)\"\r\n        case .readPosts(_, _, _, _):\r\n            return \"\/posts\"\r\n        case .commentCount(let id):\r\n            return (\"\/comments\/\\(id)\/count\")\r\n        case .commentsCount:\r\n            return \"\/comments\/count\"\r\n        }\r\n    }\r\n    \r\n    func asURLRequest() throws -&gt; URLRequest {\r\n        let url = try PostRouter.baseURLString.asURL()\r\n        var urlRequest = URLRequest(url: url\r\n            .appendingPathComponent(PostRouter.baseRESTString)\r\n            .appendingPathComponent(path))\r\n        urlRequest.httpMethod = method.rawValue\r\n\r\n        switch self {\r\n        case .readPosts(let page, let perPage, let orderBy, let ascending):\r\n            urlRequest = try URLEncoding.default.encode(urlRequest, with: [\r\n                \"page\": page,\r\n                \"per_page\": perPage,\r\n                \"orderby\": orderBy,\r\n                \"order\": ascending ? \"asc\" : \"desc\"\r\n            ])\r\n        case .commentsCount, .commentCount(_):\r\n            urlRequest = try URLEncoding.default.encode(urlRequest, with: [\r\n                \"cache\": Date().timeIntervalSince1970 as Any\r\n            ])\r\n        default: break\r\n        }\r\n\r\n        return urlRequest\r\n    }\r\n}<\/pre>\n<p>This allows me to query the REST API services without knowing the URL or parameters all the time. We&#8217;re ready to connect the pipes to seed the database.<\/p>\n<h2>App Lift Off!<\/h2>\n<p>In the launch of the app, we will seed the fresh database with posts saved from the server. In &#8220;<em>AppDelegate.didFinishLaunchingWithOptions<\/em>&#8221; we will check if the database exists. The first time it will need to be created and seeded with data.<\/p>\n<p>To do this, we will need a function on our &#8220;<em>PostService<\/em>&#8221; to update the local data from the remote server. A good way to do this is to query the posts sorted by descending modified date order, then merge them into Realm if the local modified date is older than the server or doesn&#8217;t exist at all:<\/p>\n<pre class=\"lang:swift decode:true \">func updateFromRemote(page: Int = 0, perPage: Int = 50, orderBy: String = \"post_modified\", ascending: Bool = false, complete: ((Result&lt;Void&gt;) -&gt; Void)? = nil) {\r\n    Alamofire.request(PostRouter.readPosts(page, perPage, orderBy, false))\r\n        .responseJASON { response in\r\n            guard response.result.isSuccess,\r\n                let realm = try? Realm(),\r\n                let json = response.result.value,\r\n                !json.arrayValue.isEmpty else {\r\n                    complete?(.failure(response.result.error ?? PressError.emptyPosts))\r\n                    return\r\n                }\r\n            \r\n            \/\/ Parse JSON to array\r\n            let list: [Post] = json.map(Post.init).filter {\r\n                \/\/ Skip if latest changes already persisted\r\n                if let persisted = AppGlobal.realm?.object(ofType: Post.self, forPrimaryKey: $0.id),\r\n                    let localDate = persisted.modified,\r\n                    let remoteDate = $0.modified,\r\n                    localDate &gt;= remoteDate {\r\n                        return false\r\n                }\r\n            \r\n                return true\r\n            }\r\n            \r\n            if !list.isEmpty {\r\n                do {\r\n                    try realm.write {\r\n                        realm.add(List(list), update: true)\r\n                    }\r\n                } catch {\r\n                    \/\/ TODO: Log error\r\n                }\r\n            }\r\n            \r\n            complete?(.success())\r\n        }\r\n}<\/pre>\n<p>It retrieves the JSON from WordPress, compares the <em>modified<\/em> property to the local post model in Realm, then persists it if it is older or doesn&#8217;t exist.<\/p>\n<p>This is great for updating the last few posts, but seeding the database from scratch will need to be handled different since there can be hundreds or even thousands of posts. We can do this using a recursive function that persists\u00a0posts via pagination:<\/p>\n<pre class=\"lang:swift decode:true \">func seedFromRemote(for page: Int = 0, complete: (() -&gt; Void)? = nil) {\r\n    updateFromRemote(page: page, orderBy: \"post_date\") {\r\n        guard $0.isSuccess else { complete?(); return }\r\n        self.seedFromRemote(for: page + 1, complete: complete)\r\n    }\r\n}<\/pre>\n<p>This function calls the previous &#8220;<em>updateFromRemote<\/em>&#8221; function several times until there are no more pages left. Run this function called\u00a0<span>&#8220;<\/span><em>PostService.seedFromRemote<\/em><span>&#8221;\u00a0<\/span>in the\u00a0<span>&#8220;<\/span><em>AppDelegate.didFinishLaunchingWithOptions<\/em><span>&#8221; so the recursive scraping begins!<\/span><\/p>\n<h4>Optimizing the App Startup<\/h4>\n<p>We can achieve\u00a0a huge performance boost\u00a0by running the app\u00a0in our development environment and get the completed database from the app to use as a seed database for new app installs. This is much more performant to copy the seed database instead of querying the data page-by-page and parsing it. Here&#8217;s the function you can use to copy the seed database to the user&#8217;s Realm space:<\/p>\n<pre class=\"lang:swift decode:true\">func setupDatabase() {\r\n    let fileManager = FileManager.default\r\n\r\n    \/\/ Skip if database already exists\r\n    guard let realmFileURL = Realm.Configuration.defaultConfiguration.fileURL,\r\n        !fileManager.fileExists(atPath: realmFileURL.path)\r\n            else { return }\r\n    \r\n    \/\/ Seed data to fresh database\r\n    guard let seedFileURL = Bundle.main.url(forResource: \"seed\", withExtension: \"realm\", subdirectory: \"\\(AppGlobal.userDefaults[.baseDirectory])\/data\"),\r\n        fileManager.fileExists(atPath: seedFileURL.path) else {\r\n            \/\/ Construct from a series of REST requests\r\n            return PostService().seedFromRemote()\r\n        }\r\n    \r\n    \/\/ Use pre-created seed database\r\n    do { try fileManager.copyItem(at: seedFileURL, to: realmFileURL) }\r\n    catch { \/*TODO: Log error*\/ }\r\n}<\/pre>\n<p>It checks if the Realm database exists. If it doesn&#8217;t, it will look for the seed database to copy to the user&#8217;s Realm database path. It will fallback to our recursive function that will seed the database from cloud via REST API and pagination if the seed database doesn&#8217;t exist.<\/p>\n<p>The seeding of the database should\u00a0also be running in the &#8220;<em>AppDelegate<\/em>&#8220;. However, it\u00a0must be run on first installs only or the database will be overwritten every time. I&#8217;m using a neat library called <a href=\"https:\/\/github.com\/KyleGoslan\/UpdateKit\" target=\"_blank\" rel=\"noopener\">UpdateKit<\/a> to know when the app is freshly installed or even when the app updates:<\/p>\n<pre class=\"lang:swift mark:3-5 decode:true\">class AppDelegate: UIResponder, UIApplicationDelegate\r\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\r\n        UpdateKit().firstLaunch {\r\n            setupDatabase()\r\n        }\r\n    }\r\n}<\/pre>\n<h4>Keeping Posts Updated<\/h4>\n<p>For subsequent new or modified\u00a0posts, we will read the last 50 modified posts in the view controller&#8217;s load in a throttled manner using a great library called <a href=\"https:\/\/github.com\/soffes\/RateLimit\" target=\"_blank\" rel=\"noopener\">RateLimit<\/a>:<\/p>\n<pre class=\"lang:swift decode:true \">class HomeViewController: UIViewController {\r\n    let refreshLimit = TimedLimiter(limit: 10800)\r\n\r\n    override func viewWillAppear(_ animated: Bool) {\r\n        super.viewWillAppear(animated)\r\n        \r\n        \/\/ Retrieve latest posts not more than every X hours\r\n        refreshLimit.execute {\r\n            service.updateFromRemote()\r\n        }\r\n    }\r\n}<\/pre>\n<p>Great, now we should everything we need to build the rest of the app!<\/p>\n<h2>The UI<\/h2>\n<p>Since a few pages will need to display posts, such favorites, most popular, and just browsing all or by category, we should create a couple base classes. One for tables and another for collections. Here&#8217;s what the base table class called &#8220;<em>RealmPostTableViewController<\/em>&#8221; looks like:<\/p>\n<pre class=\"lang:swift decode:true\">class RealmPostTableViewController: UITableViewController, RealmControllable {\r\n    var notificationToken: NotificationToken?\r\n    var models: Results&lt;Post&gt;?\r\n    let service = PostService()\r\n    let cellNibName: String? = \"PostTableViewCell\"\r\n    \r\n    var categoryID: Int = 0 {\r\n        didSet { \r\n            applyFilterAndSort(categoryID &gt; 0\r\n                ? \"ANY categories.id == \\(categoryID)\" : nil)\r\n            didCategorySelect()\r\n        }\r\n    }\r\n    \r\n    override func viewWillAppear(_ animated: Bool) {\r\n        super.viewWillAppear(animated)\r\n        \r\n        \/\/ Retrieve latest posts not more than every X hours\r\n        AppGlobal.postRefreshLimit.execute {\r\n            service.updateFromRemote()\r\n        }\r\n    }\r\n    \r\n    func didCategorySelect() {\r\n        \/\/ Override in derived classes if needed\r\n    }\r\n}\r\n\r\nextension RealmPostTableViewController {\r\n    \r\n    override func numberOfSections(in tableView: UITableView) -&gt; Int {\r\n        return 1\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {\r\n        return models?.count ?? 0\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {\r\n        let cell = tableView[indexPath] as! PostTableViewCell\r\n        guard let model = models?[indexPath.row] else { return cell }\r\n        return cell.bind(model)\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\r\n        performSegue(withIdentifier: PostDetailViewController.segueIdentifier, sender: nil)\r\n    }\r\n}<\/pre>\n<p>To create the counterpart collection base class, I&#8217;m using a protocol called &#8220;<em>RealmControllable<\/em>&#8221;\u00a0<span>to unify the table and collection views. I\u00a0cover this<\/span>\u00a0in\u00a0my previous post\u00a0called &#8220;<em><a href=\"http:\/\/basememara.com\/protocol-oriented-tableview-collectionview\/\" target=\"_blank\" rel=\"noopener\">Protocol-Oriented TableView and CollectionView in Swift<\/a><\/em>&#8220;.<\/p>\n<pre class=\"lang:swift decode:true\">protocol RealmControllable: DataControllable {\r\n    associatedtype ServiceType: Serviceable\r\n    associatedtype DataType: Object\r\n    \r\n    var notificationToken: NotificationToken? { get set }\r\n    var service: ServiceType { get }\r\n    var models: Results&lt;DataType&gt;? { get set }\r\n}\r\n\r\nextension RealmControllable {\r\n\r\n    var sortProperty: String {\r\n        return \"date\"\r\n    }\r\n\r\n    var sortAscending: Bool {\r\n        return false\r\n    }\r\n    \r\n    func setupDataSource() {\r\n        models = AppGlobal.realm?.objects(DataType.self).sorted(\r\n            byKeyPath: sortProperty, ascending: sortAscending)\r\n        \r\n        \/\/ Set results notification block\r\n        notificationToken = models?.addNotificationBlock { [unowned self] (changes: RealmCollectionChange) in\r\n            switch changes {\r\n            case .initial, .update:\r\n                self.dataView.reloadData()\r\n            case .error(let err):\r\n                \/\/ An error occurred while opening the Realm file\r\n                \/\/ on the background worker thread\r\n                fatalError(\"\\(err)\")\r\n            }\r\n        }\r\n        \r\n        dataView.reloadData()\r\n    }\r\n    \r\n    func applyFilterAndSort(_ filter: String? = nil, sort: String? = nil, ascending: Bool? = nil) {\r\n        guard let realm = AppGlobal.realm else { return }\r\n        \r\n        var temp = realm.objects(DataType.self)\r\n            .sorted(byKeyPath: sortProperty, ascending: ascending ?? sortAscending)\r\n        \r\n        if let filter = filter, !filter.isEmpty {\r\n            temp = temp.filter(filter)\r\n        }\r\n        \r\n        if let sort = sort, !sort.isEmpty {\r\n            temp = temp.sorted(byKeyPath: sort, ascending: ascending ?? sortAscending)\r\n        }\r\n\r\n        models = temp\r\n\r\n        dataView.reloadData()\r\n        dataView.scrollToTop()\r\n    }\r\n}<\/pre>\n<p>The Realm &#8220;<em>NotificationToken<\/em>&#8221; is wiring up the\u00a0database updates reactively to the table or collection views. When an update happens in the database, it reloads the UI automatically. Also, there is filter and sort functions that the derived view controllers can use easily.<\/p>\n<p>For the table cell, we are simply binding the data to the cell view and configuring its style:<\/p>\n<pre class=\"lang:swift decode:true \">public class PostTableViewCell: UITableViewCell {\r\n\r\n    @IBOutlet public weak var itemImage: UIImageView!\r\n    @IBOutlet public weak var itemTitle: UILabel!\r\n    @IBOutlet public weak var itemContent: UILabel!\r\n\r\n    public func bind(_ model: Post) -&gt; Self {\r\n        configure()\r\n    \r\n        itemTitle.text = model.title.decodeHTML()\r\n        itemContent.text = model.excerpt.decodeHTML().stripHTML()\r\n        itemImage.setURL(model.media?.link)\r\n        \r\n        return self\r\n    }\r\n    \r\n    func configure() {\r\n        \/\/ Optimize\r\n        layer.shouldRasterize = true\r\n        layer.rasterizationScale = UIScreen.main.scale\r\n        \r\n        \/\/ Style\r\n        itemImage.layer.shadowOffset = .zero\r\n        itemImage.layer.shadowRadius = 1\r\n        itemImage.layer.shadowOpacity = 1\r\n        itemImage.layer.masksToBounds = false\r\n        \r\n    }\r\n}<\/pre>\n<p>Finally for the view controller, we will end up with\u00a0something\u00a0super lightweight and flexible:<\/p>\n<pre class=\"lang:swift decode:true \">class PopularViewController: RealmPostTableViewController {\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        \r\n        \/\/ Lock post list to the popular category\r\n        categoryID = 595\r\n    }\r\n}<\/pre>\n<p>We can use this rapid development pattern for all our view controllers that need to display a list of posts. For example, here&#8217;s one that displays a user&#8217;s favorite posts:<\/p>\n<pre class=\"lang:swift decode:true \">class FavoritesViewController: RealmPostTableViewController {\r\n    \r\n    override func viewWillAppear(_ animated: Bool) {\r\n        super.viewWillAppear(animated)\r\n        applyFavoriteFilter()\r\n    }\r\n    \r\n    func applyFavoriteFilter(_ reload: Bool = true) {\r\n        let favorites = AppGlobal.userDefaults[.favorites]\r\n            .map(String.init)\r\n            .joined(separator: \",\")\r\n        \r\n        applyFilterAndSort(\"id IN {\\(favorites)}\", reload: reload)\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {\r\n        return AppGlobal.userDefaults[.favorites].count\r\n    }\r\n        \r\n    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -&gt; Bool {\r\n        return true\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {\r\n        if let model = models?[indexPath.row], editingStyle == .delete {\r\n            service.removeFavorite(model.id)\r\n            tableView.deleteRows(at: [indexPath], with: .fade)\r\n            applyFavoriteFilter(false)\r\n        }\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? {\r\n        return models?.count ?? 0 == 0 ? \"No favorites to show.\" : nil\r\n    }\r\n}\r\n<\/pre>\n<h2>The\u00a0App<\/h2>\n<p>After getting all our framework pieces in place, our apps will be super lightweight but still configurable. Here&#8217;s what an app using the framework will look like:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_124.png\" alt=\"\" width=\"408\" height=\"484\" class=\"aligncenter size-full wp-image-1737\" \/><\/p>\n<p>That&#8217;s incredibly light! Updating the framework underneath would update the all apps across all our projects at once. For wiring it to the framework, all that&#8217;s needed is the &#8220;<em>Settings.plist<\/em>&#8221; to store your app and WordPress configurations, and an HTML file\u00a0used as a template for your post detail views (using <a href=\"https:\/\/github.com\/kylef\/Stencil\" target=\"_blank\" rel=\"noopener\">Stencil<\/a> to bind the values to the HTML). Of course,\u00a0finally the AppDelegate code to glue the framework to the app&#8217;s lifecycle:<\/p>\n<pre class=\"lang:swift decode:true \">class AppDelegate: UIResponder, UIApplicationDelegate, AppPressable {\r\n\r\n    var window: UIWindow?\r\n\r\n    override init() {\r\n        super.init()\r\n        AppGlobal.userDefaults.registerSite()\r\n    }\r\n\r\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\r\n        return didFinishLaunchingSite(application, launchOptions: launchOptions)\r\n    }\r\n    \r\n    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -&gt; Void) -&gt; Bool {\r\n        return continueUserActivity(application, userActivity: userActivity, restorationHandler: restorationHandler)\r\n    }\r\n}\r\n<\/pre>\n<p>That&#8217;s it! Here&#8217;s what the app looks like with only a few files in the app source code:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_125.png\" alt=\"\" width=\"391\" height=\"508\" class=\"aligncenter size-full wp-image-1739\" \/><\/p>\n<h2>Conclusion<\/h2>\n<p>Although this post was about WordPress, the concepts are generic enough to extend the framework to support different providers. This would allow integrating\u00a0other CMS or REST endpoint with the same code. As long as the JSON structure is the same then you&#8217;re good, but even the JSON structure can be abstracted away under each provider model for even more flexibility.<\/p>\n<p>To view the full working source code, see <a href=\"https:\/\/github.com\/ZamzamInc\/SwiftyPress\" target=\"_blank\" rel=\"noopener\">SwiftyPress GitHub repo<\/a>. The big payoff is replicating this for multiple WordPress sites becomes a breeze \ud83d\ude09<\/p>\n<p><strong><em>Happy Coding!!<\/em><\/strong><\/p>\n<hr \/>\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!<\/h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https:\/\/iosmentor.io\/webinars\/swift-frameworks\/\" target=\"_blank\" rel=\"noopener\"><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" \/><\/a><\/p>\n","link":"https:\/\/basememara.com\/full-stack-ios-and-wordpress-in-swift\/","comment_count":11,"author":2,"featured_media":1739,"terms":[53,50,55,72],"meta":{"_series_part":""},"created":"2017-01-25T19:54:17","modified":"2018-10-21T03:47:58"},{"id":26200,"title":"Protocol-Oriented Routing in Swift","slug":"protocol-oriented-router-in-swift","type":"post","excerpt":"There are hundreds of complex routing frameworks and libraries in iOS. Usually they're overly complex to retrofit into an existing app or they completely bypass Storyboards. In this post, I'd like to offer a simple, native-like routing mechanism that leverages Storyboards like a boss to handle navigation.","content":"<p>There are hundreds of complex routing frameworks and libraries in iOS. Usually they&#8217;re overly complex to retrofit into an existing app or they completely bypass Storyboards. In this post, I&#8217;d like to offer a simple, native-like routing mechanism that leverages Storyboards like a boss to handle navigation.<\/p>\n<h2>The &#8220;Normal&#8221; Way<\/h2>\n<p>Let&#8217;s examine the <em>&#8220;normal&#8221;<\/em> way of handling navigation between view controllers. First, avoid segue&#8217;s at all costs since they lock you into a certain navigation flow that&#8217;s rigid and inflexible. Instead, we&#8217;ll create an instance of the target view controller and then use the <a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewcontroller\/1621377-show\" target=\"_blank\" rel=\"noopener\"><em>show<\/em><\/a> or <a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/uiviewcontroller\/1621380-present\" target=\"_blank\" rel=\"noopener\"><em>present<\/em><\/a> API&#8217;s of <code>UIViewController<\/code>\u00a0against it to handle the navigation.<\/p>\n<p>To do this, let&#8217;s stick with a\u00a0feature-based app structure and create one storyboard-per-view-controller.\u00a0Here&#8217;s what our sample app would look like:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/Xcode-Storyboard-Feature-Based.png\" alt=\"\" width=\"300\" height=\"383\" class=\"aligncenter wp-image-26240\" \/><\/p>\n<p>Once we add the view controller onto the storyboard via <em>Interface Builder<\/em>, assign the class to it, and checkmark <em>&#8220;Is Initial View Controller&#8221;<\/em>, we can create an instance of the view controller by first getting a reference to the storyboard and calling the <a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/uistoryboard\/1616213-instantiateinitialviewcontroller\" target=\"_blank\" rel=\"noopener\"><em>instantiateInitialViewController<\/em><\/a> API from it:<\/p>\n<pre class=\"lang:swift decode:true \">let storyboard = UIStoryboard(name: \"Login\", bundle: nil)\r\n\r\nguard let controller = storyboard.instantiateInitialViewController()\r\n    else { fatalError(\"Invalid controller for storyboard.\") }\r\n\r\nshow(controller, sender: nil)<\/pre>\n<p>Since we have to route the user several times within the app life cycle, the above code can get verbose and it isn&#8217;t compile-safe either.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/normal-meme-500x520.jpg\" alt=\"\" width=\"400\" height=\"416\" class=\"aligncenter wp-image-26245\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/normal-meme-500x520.jpg 500w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/normal-meme.jpg 700w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><\/p>\n<h2>The Routable Protocol Way<\/h2>\n<p>In the WWDC 2015 talk called &#8220;<a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2015-411\/?time=1593\" target=\"_blank\" rel=\"noopener\">Swift in Practice<\/a>&#8220;, Apple engineers outlined how to make segue identifiers strongly-typed by creating a protocol with an associated <code>RawRepresentable<\/code>\u00a0type that others must conform to:<\/p>\n<pre class=\"lang:swift decode:true\">protocol SegueHandlerType {\r\n    associatedtype SegueIdentifier: RawRepresentable\r\n}<\/pre>\n<p>We&#8217;re throwing segues out the window, but we can still use this clever implementation to handle the storyboard routing:<\/p>\n<pre class=\"lang:swift decode:true \">protocol Routable {\r\n    associatedtype StoryboardIdentifier: RawRepresentable\r\n}<\/pre>\n<p>Let&#8217;s move our original <em>&#8220;normal&#8221;<\/em> routing code above to a protocol extension to abstract it away:<\/p>\n<pre class=\"lang:swift decode:true\">extension Routable where Self: UIViewController, StoryboardIdentifier.RawValue == String {\r\n\r\n    func show(storyboard: StoryboardIdentifier) {\r\n        let storyboard = UIStoryboard(name: storyboard.rawValue, bundle: nil)\r\n        \r\n        guard let controller = storyboard.instantiateInitialViewController())\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n        \r\n        show(controller, sender: self)\r\n    }\r\n}<\/pre>\n<p>Now we can make our view controller conform to the <code>Routable<\/code>\u00a0protocol and provide its enum of storyboards, then feed the enum case to the <code>show<\/code>\u00a0API:<\/p>\n<pre class=\"lang:swift decode:true\">class LoginViewController: UIViewController {\r\n\r\n    @IBAction func loginTapped() {\r\n        show(storyboard: .profile)\r\n    }\r\n}\r\n\r\nextension LoginViewController: Routable {\r\n    \r\n    enum StoryboardIdentifier: String {\r\n        case profile = \"Profile\"\r\n        case more = \"More\"\r\n    }\r\n}<\/pre>\n<p>You can use `show(storyboard: .profile)` a dozen of times and is compile-safe plus sleek.<\/p>\n<h2>Routable Micro-Library<\/h2>\n<p>Let&#8217;s add sugar and spice to make this more reusable and flexible:<\/p>\n<pre class=\"lang:js decode:true\">public protocol Routable {\r\n    associatedtype StoryboardIdentifier: RawRepresentable\r\n    \r\n    func present&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String?, animated: Bool, modalPresentationStyle: UIModalPresentationStyle?, configure: ((T) -&gt; Void)?, completion: ((T) -&gt; Void)?)\r\n    func show&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String?, configure: ((T) -&gt; Void)?)\r\n    func showDetailViewController&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String?, configure: ((T) -&gt; Void)?)\r\n}\r\n\r\npublic extension Routable where Self: UIViewController, StoryboardIdentifier.RawValue == String {\r\n\r\n    \/**\r\n     Presents the intial view controller of the specified storyboard modally.\r\n\r\n     - parameter storyboard: Storyboard name.\r\n     - parameter identifier: View controller name.\r\n     - parameter configure: Configure the view controller before it is loaded.\r\n     - parameter completion: Completion the view controller after it is loaded.\r\n     *\/\r\n    func present&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String? = nil, animated: Bool = true, modalPresentationStyle: UIModalPresentationStyle? = nil, configure: ((T) -&gt; Void)? = nil, completion: ((T) -&gt; Void)? = nil) {\r\n        let storyboard = UIStoryboard(name: storyboard.rawValue)\r\n        \r\n        guard let controller = (identifier != nil\r\n            ? storyboard.instantiateViewController(withIdentifier: identifier!)\r\n            : storyboard.instantiateInitialViewController()) as? T\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n        \r\n        if let modalPresentationStyle = modalPresentationStyle {\r\n            controller.modalPresentationStyle = modalPresentationStyle\r\n        }\r\n        \r\n        configure?(controller)\r\n        \r\n        present(controller, animated: animated) {\r\n            completion?(controller)\r\n        }\r\n    }\r\n    \r\n    \/**\r\n     Present the intial view controller of the specified storyboard in the primary context.\r\n     Set the initial view controller in the target storyboard or specify the identifier.\r\n\r\n     - parameter storyboard: Storyboard name.\r\n     - parameter identifier: View controller name.\r\n     - parameter configure: Configure the view controller before it is loaded.\r\n     *\/\r\n    func show&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String? = nil, configure: ((T) -&gt; Void)? = nil) {\r\n        let storyboard = UIStoryboard(name: storyboard.rawValue)\r\n        \r\n        guard let controller = (identifier != nil\r\n            ? storyboard.instantiateViewController(withIdentifier: identifier!)\r\n            : storyboard.instantiateInitialViewController()) as? T\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n        \r\n        configure?(controller)\r\n        \r\n        show(controller, sender: self)\r\n    }\r\n    \r\n    \/**\r\n     Present the intial view controller of the specified storyboard in the secondary (or detail)\u0080\u009d context.\r\n     Set the initial view controller in the target storyboard or specify the identifier.\r\n\r\n     - parameter storyboard: Storyboard name.\r\n     - parameter identifier: View controller name.\r\n     - parameter configure: Configure the view controller before it is loaded.\r\n     *\/\r\n    func showDetailViewController&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String? = nil, configure: ((T) -&gt; Void)? = nil) {\r\n        let storyboard = UIStoryboard(name: storyboard.rawValue)\r\n        \r\n        guard let controller = (identifier != nil\r\n            ? storyboard.instantiateViewController(withIdentifier: identifier!)\r\n            : storyboard.instantiateInitialViewController()) as? T\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n        \r\n        configure?(controller)\r\n        \r\n        showDetailViewController(controller, sender: self)\r\n    }\r\n}\r\n\r\npublic extension UIStoryboard {\r\n\r\n    \/**\r\n     Creates and returns a storyboard object for the specified storyboard resource file in the main bundle of the current application.\r\n\r\n     - parameter name: The name of the storyboard resource file without the filename extension.\r\n\r\n     - returns: A storyboard object for the specified file. If no storyboard resource file matching name exists, an exception is thrown.\r\n     *\/\r\n    convenience init(name: String) {\r\n        self.init(name: name, bundle: nil)\r\n    }\r\n}<\/pre>\n<p>Notice I&#8217;ve added <code>show<\/code>\u00a0and <code>present<\/code>\u00a0API&#8217;s and a trailing closure to configure the controller before and after its loaded so I can use it like this:<\/p>\n<pre class=\"lang:swift decode:true\">class ProfileViewController: UIViewController {\r\n\r\n    @IBAction func moreTapped() {\r\n        show(storyboard: .more) { (controller: MoreViewController) in\r\n            controller.someProperty = \"\\(Date())\"\r\n        }\r\n    }\r\n}\r\n\r\nextension ProfileViewController: Routable {\r\n    \r\n    enum StoryboardIdentifier: String {\r\n        case more = \"More\"\r\n        case login = \"Login\"\r\n    }\r\n}<\/pre>\n<p>I pushed this into another library so it will be maintained\u00a0<a href=\"https:\/\/github.com\/ZamzamInc\/ZamzamKit\/blob\/master\/Sources\/Protocols\/iOS\/Routable.swift\" target=\"_blank\" rel=\"noopener\">there going forward<\/a>.\u00a0For a complete sample app, you can download a <a href=\"https:\/\/github.com\/basememara\/SwiftyRouter\" target=\"_blank\" rel=\"noopener\">working demo here<\/a>.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/protocol-oriented-router-in-swift\/","comment_count":8,"author":2,"featured_media":26240,"terms":[80,62,78,50,55],"meta":{"_series_part":"3"},"created":"2017-10-01T11:00:54","modified":"2018-10-13T03:37:33"},{"id":5568,"title":"Delegates to Swift Closure Pattern","slug":"swift-delegates-closure-pattern","type":"post","excerpt":"Delegation is a simple and powerful pattern. However, closures are more Swifty and scales better. Let's convert delegates to closures!","content":"<p><a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/General\/Conceptual\/DevPedia-CocoaCore\/Delegation.html\" target=\"_blank\">Delegation<\/a> is a simple and powerful pattern in which one object acts on behalf of another object by holding a reference to the delegate, then sending messages through\u00a0it. This is the pattern Apple has chosen for its frameworks and has worked quite well&#8230; a little awkward at first, but eventually makes sense \ud83d\ude42<\/p>\n<p>Then\u00a0Swift came along and brought new techniques and patterns due to it&#8217;s functional paradigm. The game changed and Apple&#8217;s coding conventions are making a slow shift to becoming\u00a0more Swifty.\u00a0In this post, I&#8217;m going to illustrate how we can convert\u00a0delegates to\u00a0a closures-based pattern.<\/p>\n<h2>What About Delegates?<\/h2>\n<p>Although delegates are powerful, it&#8217;s a bit archaic.\u00a0With reactive and event-driven programing, delegates\u00a0breaks down and lose its elegance.\u00a0See this\u00a0simple delegate pattern example below. Notice\u00a0how the <code>completed<\/code>\u00a0flag gets propagated back to the parent object who was passed into the <code>Todo<\/code>\u00a0initializer:<\/p>\n<pre class=\"lang:swift decode:true\">protocol TodoDelegate: class {\r\n    func completed(todo: Todo)\r\n}\r\n\r\nstruct Todo {\r\n    var id: Int\r\n    var title: String\r\n    \r\n    var completed: Bool = false {\r\n        didSet {\r\n            \/\/ Notify delegate of completion\r\n            guard completed else { return }\r\n            delegate?.completed(todo: self)\r\n        }\r\n    }\r\n    \r\n    weak var delegate : TodoDelegate?\r\n    \r\n    init(_ delegate: TodoDelegate, id: Int, title: String) {\r\n        self.delegate = delegate\r\n        self.id = id\r\n        self.title = title\r\n    }\r\n}\r\n\r\nclass MyParentController: TodoDelegate {\r\n    lazy var todo1: Todo = {\r\n        return Todo(self, id: 1, title: \"Todo item 1\")\r\n    }()\r\n    \r\n    lazy var todo2: Todo = {\r\n        return Todo(self, id: 2, title: \"Todo item 2\")\r\n    }()\r\n    \r\n    lazy var todo3: Todo = {\r\n        return Todo(self, id: 3, title: \"Todo item 3\")\r\n    }()\r\n    \r\n    func completed(todo: Todo) {\r\n        switch todo.id {\r\n        case 1: print(\"Do something with todo: \\(todo.title)\")\r\n        case 2: print(\"Do another thing with todo: \\(todo.title)\")\r\n        case 3: print(\"Do final thing with todo: \\(todo.title)\")\r\n        default: break\r\n        }\r\n    }\r\n}\r\n\r\nlet controller = MyParentController()\r\ncontroller.todo1.completed = true\r\ncontroller.todo2.completed = true\r\ncontroller.todo3.completed = true\r\n\r\n\/\/ Prints the following to the console:\r\n\/\/ Do something with todo: Todo item 1\r\n\/\/ Do something with todo: Todo item 1\r\n\/\/ Do final thing with todo: Todo item 3<\/pre>\n<p>The <code>Todo<\/code>\u00a0objects were\u00a0instantiated in\u00a0<code>MyParentController<\/code>\u00a0and passed itself in as the delegate. It accepted\u00a0the delegate as\u00a0a specific protocol called <code>TodoDelegate<\/code>. This protocol will indicate to the <code>Todo<\/code>\u00a0object what properties and functions the\u00a0delegate has.<\/p>\n<p>In the <code>complete<\/code>\u00a0property of <code>Todo<\/code>, the <code>didSet<\/code>\u00a0event calls the delegate&#8217;s <code>completed<\/code>\u00a0function. It knows that the\u00a0<code>completed<\/code>\u00a0function is there because <code>MyParentController<\/code>\u00a0adopts <code>TodoDelegate<\/code>.<\/p>\n<p>This\u00a0is\u00a0where delegates\u00a0breaks down. The <code>completed<\/code>\u00a0function in <code>MyParentController<\/code>\u00a0is being shared for all <code>Todo<\/code>\u00a0objects. I have to put a <code>switch<\/code>\u00a0statement there to find the one who triggered it and perform the customized action for it.\u00a0What if we we&#8217;re listening to\u00a0hundreds of\u00a0<code>Todo<\/code>\u00a0objects, that <code>switch<\/code>\u00a0statement would get out of control. Even besides this, it feels weird\u00a0that the <code>Todo<\/code>\u00a0object and the triggered function are in two different places.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/03\/awkward_meme.jpg\" width=\"300\" height=\"300\" class=\"aligncenter wp-image-5570\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2017\/03\/awkward_meme.jpg 400w, https:\/\/basememara.com\/wp-content\/uploads\/2017\/03\/awkward_meme-150x150.jpg 150w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<h2>Delegates to Closure Pattern<\/h2>\n<p>We will now convert the above delegate pattern to a closure-based one. This fits more into the functional programming paradigm. Instead of a delegate function getting\u00a0triggered, we will allow callers to &#8220;subscribe&#8221; to the\u00a0<code>Todo<\/code>\u00a0object. The subscriptions will take a closure and queue it for later execution when ready:<\/p>\n<pre class=\"lang:swift decode:true \">struct Todo {\r\n    var id: Int\r\n    var title: String\r\n    \r\n    var completed: Bool = false {\r\n        didSet {\r\n            \/\/ Notify subscribers of completion\r\n            guard completed else { return }\r\n            handlers.forEach { $0(self) }\r\n        }\r\n    }\r\n    \r\n    \/\/ Task queue\r\n    var handlers = [(Todo) -&gt; Void]()\r\n    \r\n    init(id: Int, title: String) {\r\n        self.id = id\r\n        self.title = title\r\n    }\r\n    \r\n    mutating func subscribe(completion: @escaping (Todo) -&gt; Void) {\r\n        handlers += [completion]\r\n    }\r\n}\r\n\r\nclass MyParentController {\r\n    lazy var todo1: Todo = {\r\n        return Todo(id: 1, title: \"Todo item 1\")\r\n    }()\r\n    \r\n    lazy var todo2: Todo = {\r\n        return Todo(id: 2, title: \"Todo item 2\")\r\n    }()\r\n    \r\n    lazy var todo3: Todo = {\r\n        return Todo(id: 3, title: \"Todo item 3\")\r\n    }()\r\n}\r\n\r\nlet controller = MyParentController()\r\n\r\ncontroller.todo1.subscribe {\r\n    print(\"Do something with todo: \\($0.title)\")\r\n}\r\n\r\ncontroller.todo2.subscribe {\r\n    print(\"Do another thing with todo: \\($0.title)\")\r\n}\r\n\r\ncontroller.todo3.subscribe {\r\n    print(\"Do final thing with todo: \\($0.title)\")\r\n}\r\n\r\ncontroller.todo1.subscribe {\r\n    print(\"Another one for fun with todo: \\($0.title)\")\r\n}\r\n\r\ncontroller.todo1.completed = true\r\ncontroller.todo2.completed = true\r\ncontroller.todo3.completed = true\r\n\r\n\/\/ Prints the following to the console:\r\n\/\/ Do something with todo: Todo item 1\r\n\/\/ Another one for fun with todo: Todo item 1\r\n\/\/ Do another thing with todo: Todo item 1\r\n\/\/ Do final thing with todo: Todo item 3<\/pre>\n<p>We got rid of the delegate protocol completely. In fact, the <code>Todo<\/code>\u00a0objects doesn&#8217;t\u00a0even need a reference to\u00a0<code>MyParentController<\/code>\u00a0at all!\u00a0Instead, the caller subscribes to the todo&#8217;s events:<\/p>\n<pre class=\"lang:swift decode:true \">controller.todo1.subscribe {\r\n    print(\"Do something with todo: \\($0.title)\")\r\n}<\/pre>\n<p>This is great because now the focus\u00a0is on the <code>Todo<\/code>\u00a0object. It makes more sense to attach a closure to the <code>Todo<\/code>\u00a0object itself instead of defining it somewhere else in a shared delegate function.<\/p>\n<p>During the <code>subscribe<\/code>\u00a0process, it stores this closure into a queue to be called later when ready:<\/p>\n<pre class=\"lang:swift decode:true\">var handlers = [(Todo) -&gt; Void]()\r\n...\r\nfunc subscribe(completion: @escaping (Todo) -&gt; Void) {\r\n    handlers += [completion]\r\n}<\/pre>\n<p>When it&#8217;s time to trigger the event, it executes the closures\u00a0in the queue one by one:<\/p>\n<pre class=\"lang:swift decode:true \">var completed: Bool = false {\r\n    didSet {\r\n        guard completed else { return }\r\n        handlers.forEach { $0(self) }\r\n    }\r\n}<\/pre>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2017\/03\/brilliant_meme.jpg\" alt=\"\" width=\"350\" height=\"400\" class=\"aligncenter size-full wp-image-5571\" \/><\/p>\n<h2>What About Thread-Safety?<\/h2>\n<p>There&#8217;s one complication you must handle. The queue is simply an array of closures. This can be dangerous if subscriptions were to happen from multiple threads. Therefore, we need some locking or exclusivity mechanism on the queue. The good news is I have already done this in another post called <a href=\"http:\/\/basememara.com\/creating-thread-safe-arrays-in-swift\/\" target=\"_blank\">Creating Thread-Safe Arrays in Swift<\/a>.\u00a0We can use the <code>SynchronizedArray<\/code>\u00a0from there for our queue type:<\/p>\n<pre class=\"lang:swift decode:true\">var handlers = SynchronizedArray&lt;(Todo) -&gt; Void&gt;()\r\n...\r\nfunc subscribe(completion: @escaping (Todo) -&gt; Void) {\r\n    handlers += [completion]\r\n}<\/pre>\n<p>Everything else stays the same because the <code>SynchronizedArray<\/code>\u00a0has many of the same API&#8217;s as a regular array, but is thread-safe!<\/p>\n<h2>Conclusion<\/h2>\n<p>Although this was a simple example, the delegate to closure pattern can be applied to more complex scenarios.\u00a0For example, imagine you can subscribe to GPS location updates instead of sharing a single delegate function:<\/p>\n<pre class=\"lang:swift decode:true \">locationManager.subscribeLocation {\r\n    print(\"Location is: \\($0)\")\r\n}<\/pre>\n<p>This becomes even more useful for shared singletons which\u00a0can only accept one delegate,\u00a0instead of being able to trigger multiple delegates. In a future post, I&#8217;ll convert delegates to closures for native Apple managers like\u00a0<a href=\"https:\/\/developer.apple.com\/reference\/corelocation\/cllocationmanager\" target=\"_blank\">CLLocationManager<\/a>\u00a0and\u00a0<a href=\"https:\/\/developer.apple.com\/reference\/corebluetooth\/cbcentralmanager\" target=\"_blank\">CBCentralManager<\/a>. With a thread-safe queue in place, working with them should\u00a0feel Swifty and robust.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/swift-delegates-closure-pattern\/","comment_count":6,"author":2,"featured_media":5576,"terms":[74,50,55,76,73],"meta":{"_series_part":"1"},"created":"2017-03-03T16:35:14","modified":"2018-10-10T22:01:25"},{"id":791,"title":"What's New in iOS 10 and Beyond","slug":"whats-new-ios-beyond","type":"post","excerpt":"It is clear from this year's WWDC that Apple envisions a new era beyond the traditional apps-in-a-grid-on-your-home-screen model. iOS 10 is more of a revolutionary iteration to the Apple ecosystem and vision. There were many initiatives uncovered that gives us clues to the future of Apple.","content":"<p>This year&#8217;s <a href=\"https:\/\/developer.apple.com\/wwdc\/\" target=\"_blank\">WWDC<\/a> felt\u00a0different than previous years. Things\u00a0have been more evolutionary since iOS 7. However, <a href=\"https:\/\/developer.apple.com\/ios\/\" target=\"_blank\">iOS 10<\/a> seems more of a revolutionary iteration to the Apple ecosystem and vision. There were many initiatives uncovered that gives us clues to the future of Apple.<\/p>\n<h2>AI<\/h2>\n<p>It has been clear from the beginning that Apple takes\u00a0Siri seriously. However,\u00a0it seemed\u00a0Apple has been stagnant in this space since its introduction in 2011 (yes, it&#8217;s been that long!). WWDC showed us that Apple has been working hard in the lab to play catch up. Though, Siri has been under-utilized by many of its users, there&#8217;s been something missing . So what was it? Unlike Google, Apple needed years of data collection to catch up and seems like it&#8217;s finally about to pay off. <a href=\"http:\/\/blog.cryptographyengineering.com\/2016\/06\/what-is-differential-privacy.html\" target=\"_blank\">Differential privacy<\/a> will give this an even bigger boast. However, most of all, opening Siri up to developers with <a href=\"https:\/\/developer.apple.com\/sirikit\/\" target=\"_blank\">SiriKit<\/a> will be the game changer\u00a0that will change the landscape for Apple&#8217;s AI.<\/p>\n<h2>IoT<\/h2>\n<p><a href=\"https:\/\/developer.apple.com\/reference\/homekit\" target=\"_blank\">HomeKit<\/a> has a new Home app and takes a front seat in iOS 10 with a dedicated area\u00a0in Mission Control.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-10-home-app-500x334.jpg\" alt=\"iOS 10 HomeKit\" width=\"300\" class=\"aligncenter size-medium wp-image-792\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-10-home-app-500x334.jpg 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-10-home-app-768x513.jpg 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-10-home-app.jpg 800w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Previously, HomeKit required developers to create their own app to leverage the framework. Now in iOS 10, the Home app is\u00a0baked right into iOS\u00a0and unifies the smart home dream. This is exactly what is needed in the clunky and fragmented smart\u00a0home sector.<\/p>\n<h2>Messaging<\/h2>\n<p>Instant messaging is integral to the technological evolution. It has made email look like fax.\u00a0We are seeing new ways instant messaging platforms\u00a0are being re-imagined by the introduction of chatbots. iMessages is the most used Apple app and now it has also been <a href=\"https:\/\/developer.apple.com\/imessage\/\" target=\"_blank\">opened to developers<\/a>. Although you can expect to see new ways to send kitten GIF&#8217;s in iMessages, expect to also see more profound advances that will move\u00a0iMessages to\u00a0the AI category.<\/p>\n<h2>VoiP<\/h2>\n<p>The new <a href=\"https:\/\/developer.apple.com\/library\/prerelease\/content\/releasenotes\/General\/WhatsNewIniOS\/Articles\/iOS10.html\" target=\"_blank\">CallKit<\/a> framework allows VoiP apps, like Skype, to act as\u00a0first-class phone citizens. You can make VoiP calls from the native contact cards, and even better, receive VoiP calls as if they were regular phone calls. This is the exact disruption we need against\u00a0the traditional cellular\u00a0carriers.\u00a0Get ready to dump your minutes for data.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/callkit-voip-ios10-500x697.png\" alt=\"callkit-voip-ios10\" width=\"300\" class=\"aligncenter size-medium wp-image-794\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/callkit-voip-ios10-500x697.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/callkit-voip-ios10.png 604w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<h2>Widgets<\/h2>\n<p>The Today Widgets and Notifications have been somewhat merged in a sense. Widgets now appear on the lock screen, but that&#8217;s not the only place you see widgets. 3D Touch notifications and even app icons from the home screen pop-up full fledged, interactive widgets.\u00a0Opening apps is becoming less and less of a requirement, widgets from the lock screen and from notifications may be the only thing you need from an app.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios10-widgets-500x362.jpg\" alt=\"ios10-widgets\" width=\"500\" height=\"362\" class=\"aligncenter size-medium wp-image-793\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios10-widgets-500x362.jpg 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios10-widgets.jpg 760w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<h2>Conclusion<\/h2>\n<p>It is clear from this year&#8217;s WWDC that Apple envisions a new era beyond the traditional\u00a0apps-in-a-grid-on-your-home-screen model. Instead, opening up native iOS services to developers allows apps to be automatically served to the user based on context. This is indeed\u00a0a new app-era, which\u00a0shifts\u00a0from the app-centric model to a service-based model. The entry point to your app is no longer opening up your app icon anymore, but opening up native services, such as Siri, Maps, or\u00a0Messages, that will surface your app logic to the user.<\/p>\n","link":"https:\/\/basememara.com\/whats-new-ios-beyond\/","comment_count":0,"author":2,"featured_media":792,"terms":[68,53,67,4],"meta":{"_series_part":""},"created":"2016-06-27T11:17:01","modified":"2018-10-06T14:38:50"},{"id":771,"title":"Memory Leaks and Resource Management in Swift and iOS","slug":"memory-leaks-resource-management-swift-ios","type":"post","excerpt":"Less code and less memory while performing the same task at hand is truly where the art comes in. In this post, I'd like to highlight some of the various pitfalls that lead to memory leaks, which inevitably result in crashes. I will also cover some tools and remedies to resolve these issues.","content":"<p>Someone once told me\u00a0what separates an amateur developer from a seasoned one is their footprint on the system. This is so true;\u00a0less code and less memory while performing the same task at hand is truly where the art comes in. So in this sobering post, I&#8217;d like to highlight some\u00a0of the various pitfalls that lead to memory leaks, which inevitably result in crashes. I will also cover some tools and remedies to resolve these issues.<\/p>\n<h2>Back to the Basics:\u00a0Reference Counting<\/h2>\n<p>On\u00a0the machine-level, memory is allocated for our\u00a0software\u00a0during runtime. Anytime an object, variable, or data\u00a0is created, it&#8217;s stored in memory by the system. How does the software we write access that memory? This is where references, pointers, and handles come in, which are\u00a0basically associations to the memory location. It&#8217;s the glue between our software and the machine; where the virtual and physical world meet.<\/p>\n<p>For example, say I create an instance and pass it around to other variables:<\/p>\n<pre class=\"lang:swift decode:true\">class Car {\r\n    var plate: String\r\n    \r\n    init(plate: String) {\r\n        self.plate = plate\r\n    }\r\n}\r\n\r\nvar car1 = Car(plate: \"ABC123\")\r\nvar car2 = car1\r\nvar car3 = car1<\/pre>\n<p>The instance of &#8220;<em>Car(plate: &#8220;ABC123&#8221;)<\/em>&#8221; is not actually stored in &#8220;car1&#8221;. This actually doesn&#8217;t make sense when you think about it. The variable &#8220;<em>car1<\/em>&#8221; isn&#8217;t memory, its text in your source code that represents a location to memory. This is what a reference is, &#8220;<em>car1<\/em>&#8221; is actually referencing the memory location of the\u00a0&#8220;<em>Car(plate: &#8220;ABC123&#8221;)<\/em>&#8221; instance.<\/p>\n<p>Even though there are 3 variables, &#8220;<em>car1<\/em>&#8220;, &#8220;<em>car2<\/em>&#8220;, and &#8220;<em>car3<\/em>&#8220;, there is only one instance, &#8220;<em>Car(plate: &#8220;ABC123&#8221;)<\/em>&#8220;.\u00a0The 3 variables are referencing that same memory location of the instance. This means the reference count is 3 for that object, <em>therefore reference counting is occurring<\/em>.<\/p>\n<p>If you <em>nil<\/em> one variable out:<\/p>\n<pre class=\"lang:swift decode:true\">car3 = nil<\/pre>\n<p>Now the reference count is down to 2. Now if you do it again:<\/p>\n<pre class=\"lang:swift decode:true \">car1 = nil<\/pre>\n<p>The reference count\u00a0is down to 1. And one more time:<\/p>\n<pre class=\"lang:swift decode:true \">car2 = nil<\/pre>\n<p>Finally, the reference count is zero and now the system deallocates\u00a0the instance from memory and frees up that resource space.<\/p>\n<p>This is garbage collection and the algorithm Apple has chosen for its <em>Cocoa<\/em>, <em>Cocoa Touch<\/em>, and <em>Core Foundation<\/em> ecosystems. It seems archaic compared to tracing\u00a0garbage collections algorithms, such as those used in .NET and Java. However, it is the\u00a0most efficient since memory is freed right\u00a0away and doesn&#8217;t suffer from the performance intensities of sweeping unused memory. These advantages are\u00a0at the cost of burdening\u00a0programmers with\u00a0understanding memory allocation and avoiding\u00a0reference cycles.<\/p>\n<h2>How Memory Leaks Happen<\/h2>\n<p>The reference count increment\/decrement dance I&#8217;ve illustrated used to be a manual process back in the day with\u00a0Objective-C before iOS5. It was painful; <em>retain<\/em>, <em>release<\/em>, and <em>autorelease<\/em>\u00a0had to be manually written out by the programmer\u00a0to allocate and deallocate memory. If you ever forgot or missed deallocating memory for an instance, a memory leak would easily happen.<\/p>\n<p>Then Apple graced us with Automatic Reference Counting (ARC), which took the load off developers having to manually do the reference counting.\u00a0Reference counting didn&#8217;t go away though;\u00a0it\u00a0was just abstracted away by simply doing what\u00a0the developer would do to manage memory. The concept of reference counting lives on and there is another memory leak trap that has to do with reference counting: <em>strong reference cycles<\/em>.<\/p>\n<h2>What is Strong Reference Cycles<\/h2>\n<p>Let&#8217;s add a driver to our previous example:<\/p>\n<pre class=\"lang:swift decode:true\">class Car {\r\n    var plate: String\r\n    var driver: Driver?\r\n    \r\n    init(plate: String) {\r\n        self.plate = plate\r\n    }\r\n}\r\n\r\nclass Driver {\r\n    let name: String\r\n    var cars: [Car] = []\r\n\r\n    init(name: String) {\r\n        self.name = name\r\n    }\r\n}<\/pre>\n<p>The &#8220;<em>Car<\/em>&#8221; class now has a &#8220;d<em>river<\/em>&#8221; property. Also, the &#8220;<em>Driver<\/em>&#8221; class has a property that is an array of &#8220;<em>cars<\/em>&#8220;. This is legitimate since a car can only have one driver, but a driver can have multiple cars.<\/p>\n<p>Now let&#8217;s start assigning instances:<\/p>\n<pre class=\"lang:swift decode:true\">var myCar: Car? = Car(plate: \"ABC123\") \/\/Car instance reference count is 1\r\nvar myDriver: Driver? = Driver(name: \"Neo\") \/\/Driver instance reference count is 1\r\n\r\nmyCar?.driver = myDriver \/\/Driver instance reference count is 2\r\n\r\nif let car = myCar {\r\n    myDriver?.cars.append(car) \/\/Car instance reference count is 2\r\n}<\/pre>\n<p>The reference count for the\u00a0driver and car instances in memory is\u00a02 each. Remember, only one instance is actually stored in memory; the variables and properties only hold a reference to their memory locations.<\/p>\n<p>Now\u00a0wipe out\u00a0<em>myCar<\/em> and <em>myDriver<\/em> variables\u00a0and let&#8217;s see what happens to the memory\u00a0deallocation:<\/p>\n<pre class=\"lang:swift decode:true\">myCar = nil \/\/Car instance reference count is 1\r\nmyDriver = nil \/\/Driver instance reference count is 1<\/pre>\n<p>You just chopped off access to the instances in memory: &#8220;<em>Car(plate: &#8220;ABC123&#8221;)<\/em>&#8221; and &#8220;<em>Driver(name: &#8220;Neo&#8221;)<\/em>&#8220;. Remember, even though those variables have been terminated, the actual instances still exist in memory. Why did the system not deallocate the instances? Because\u00a0they have properties in them that reference each other: <em>&lt;&lt;Car instance&gt;&gt;.driver<\/em> and <em>&lt;&lt;Driver instance&gt;&gt;.cars[0]<\/em>, so their reference count is not zero.\u00a0They are keeping each other alive and we have no way to get to them:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/reference-count.png\" alt=\"reference-count\" width=\"397\" height=\"267\" class=\"aligncenter size-full wp-image-774\" \/><\/p>\n<p>This is a\u00a0strong reference cycle; those instances will never be released from memory and are\u00a0inaccessible too.<\/p>\n<h3>1. Resolving Strong Reference Cycles Like It&#8217;s 1999!<\/h3>\n<p>On a basic level, the strong reference cycle can be prevented by cleaning up all the instances in the correct order the old fashioned way.\u00a0For example, before wiping out the driver variable,\u00a0clear out the &#8220;<em>driver<\/em>&#8221; property of the car instance first:<\/p>\n<pre class=\"lang:swift mark:1 decode:true\">myCar?.driver = nil\r\nmyCar = nil\r\nmyDriver = nil<\/pre>\n<p>Problem solved! No more reference cycle and the instances are released from memory since no reference cycle exists that would keep each other alive. Likewise, you can pop off all the cars from the driver instance instead before wiping out the car variable:<\/p>\n<pre class=\"lang:swift decode:true \">myDriver?.cars.removeAll()\r\nmyCar = nil\r\nmyDriver = nil<\/pre>\n<p>Problem solved again! Just a different way.<\/p>\n<p>However, this is not a very elegant or scalable solution. This is just a small scenario. What happens if there are dozens of properties? And those properties are managed by other modules? How would I know when and if it&#8217;s ok to wipe out the properties and in what order?<\/p>\n<h3>2. Resolving Strong Reference Cycles\u00a0Like a\u00a0Champ!<\/h3>\n<p>Swift offers two keywords that break the strong reference cycle: &#8220;<em>weak<\/em>&#8221; and &#8220;<em>unowned<\/em>&#8220;. These are decorators on the properties that tell the compiler not to increment the counter for those references. Below is how we would break the strong reference cycle:<\/p>\n<pre class=\"lang:swift mark:3 decode:true\">class Car {\r\n    var plate: String\r\n    weak var driver: Driver?\r\n    \r\n    init(plate: String) {\r\n        self.plate = plate\r\n    }\r\n\r\n    deinit {\r\n        print(\"Car deallocated\")\r\n    }\r\n}\r\n\r\nclass Driver {\r\n    let name: String\r\n    var cars: [Car] = []\r\n\r\n    init(name: String) {\r\n        self.name = name\r\n    }\r\n    \r\n    deinit {\r\n        print(\"Driver deallocated\")\r\n    }\r\n}\r\n\r\nvar myCar: Car? = Car(plate: \"ABC123\") \/\/Car instance reference count is 1\r\nvar myDriver: Driver? = Driver(name: \"Neo\") \/\/Driver instance reference count is 1\r\n\r\nmyCar?.driver = myDriver \/\/Driver instance reference count is STILL 1\r\n\r\nif let car = myCar {\r\n    myDriver?.cars.append(car) \/\/Car instance reference count is 2\r\n}\r\n\r\nmyCar = nil \/\/Car instance reference count is 1\r\nmyDriver = nil \/\/Driver instance reference count is zero, also car instance reference count is zero since nothing else holding it<\/pre>\n<p>Notice the &#8220;<em>driver<\/em>&#8221; property of the &#8220;<em>Car<\/em>&#8221; class is decorated with &#8220;<em>weak<\/em>&#8220;. It\u00a0means when this property creates a reference to an instance, do not increment\u00a0the instance&#8217;s reference count. This same concept gets applied to delegates, where it should almost always be declared as &#8220;<em>weak<\/em>&#8220;.<\/p>\n<p>What about &#8220;<em>unowned<\/em>&#8220;? It does the same thing, except this keyword is used for non-optional properties. It\u00a0implies that the property will never become <em>nil<\/em>. A common place this is used is with closures, where strong reference cycles lurk as well. For example,\u00a0let&#8217;s add a closure\u00a0property to the &#8220;<em>Driver<\/em>&#8221; class that outputs all the car plates they own:<\/p>\n<pre class=\"lang:swift decode:true\">class Driver {\r\n    let name: String\r\n    var cars: [Car] = []\r\n    \r\n    lazy var allPlates: () -&gt; String = { [unowned self] in\r\n        return \"Car plates are: \"\r\n            + self.cars.map { $0.plate }.joinWithSeparator(\", \")\r\n    }\r\n\r\n    init(name: String) {\r\n        self.name = name\r\n    }\r\n}<\/pre>\n<p>The property called &#8220;<em>allPlates<\/em>&#8221; doesn&#8217;t own &#8220;<em>self<\/em>&#8220;. It is not possible that the property would exist without the instance, so this makes a good candidate for &#8220;<em>[unowned]<\/em>&#8220;.<\/p>\n<p><em>Note 1:<\/em>\u00a0I could\u00a0have made &#8220;<em>allPlates<\/em>&#8221; a function, but there are scenarios that making a closure property makes sense if subclassing is overkill; instead of subclassing, overwriting the closure property with another closure is possible.<\/p>\n<p><em>Note 2:<\/em> Do not confuse a closure property with a lazy variable:<\/p>\n<pre class=\"lang:swift decode:true\">    lazy var allPlates: String = {\r\n        return \"Car plates are: \"\r\n            + self.cars.map { $0.plate }.joinWithSeparator(\", \")\r\n    }()<\/pre>\n<p>A strong reference cycle is not possible in this case since it is only executed once and deallocates right\u00a0after. In addition, if you were to add cars to the driver after this executed, calling this property would not consider\u00a0new cars so this is not what we want!<\/p>\n<p>Another common area where<em> [unowned self]<\/em> is used is <em>NSNotificationCenter<\/em> blocks:<\/p>\n<pre class=\"lang:swift decode:true\">NSNotificationCenter.defaultCenter()\r\n    .addObserverForName(UIApplicationWillEnterForegroundNotification,\r\n        object: nil,\r\n        queue: nil,\r\n        usingBlock: { [unowned self] notification in\r\n            self.doSomething()\r\n        })<\/pre>\n<p>However, you do not have a possible strong reference cycle in &#8220;<em>UIView.animation<\/em>&#8221; because there&#8217;s no circular reference:<\/p>\n<pre class=\"lang:swift decode:true \">UIView.animateWithDuration(1.0, animations: { _ in\r\n   self.myThing.alpha = 1.0\r\n   self.doSomething()\r\n})<\/pre>\n<p>You should be wondering why do you have to handle strong reference cycles in <em>NSNotificationCenter<\/em> and not\u00a0<em>UIView.animateWithDuration<\/em>. There are some quirks in the Cocoa framework itself that leak\u00a0objects. A couple of examples are\u00a0<a href=\"http:\/\/sealedabstract.com\/code\/nsnotificationcenter-with-blocks-considered-harmful\/\" target=\"_blank\" rel=\"noopener\">NSNotificationCenter<\/a> and <a href=\"http:\/\/stackoverflow.com\/questions\/26383031\/wkwebview-causes-my-view-controller-to-leak\" target=\"_blank\" rel=\"noopener\">WKWebKit<\/a>. There&#8217;s not much you can do about this except to keep your ears to the ground and listen\u00a0to the community, as well as\u00a0poking\u00a0around popular open source libraries that\u00a0have\u00a0been battle tested.<\/p>\n<p>Finally, careful not to unnecessarily use <em>[weak\/unowned self]<\/em>, otherwise your objects will be deallocated right away before you get a chance to use it!<\/p>\n<h3>3. Resolving Strong Reference Cycles\u00a0Like\u00a0a Jedi!<\/h3>\n<p>There is one more way to handle strong reference cycle that is a complete mind shift: <em>use structs over classes!<\/em>\u00a0Value types keep a unique copy of their data, while reference types share a single copy of their data. This is in-line with Swift&#8217;s philosophy of value over reference types.\u00a0Almost everything in the Swift core library is immutable, about 100-to-1 in the source code! Structs are everywhere and rarely will you see a class in Swift. In fact, the Swift team is undertaking a major update\u00a0to the Foundation library, where it will wrap many <a href=\"https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0069-swift-mutability-for-foundation.md\" target=\"_blank\" rel=\"noopener\">reference types to value types<\/a>. \u00a0Choose a struct over a class any day or you better have a good reason!<\/p>\n<p>Let&#8217;s update our &#8220;<em>Car<\/em>&#8221; and &#8220;<em>Driver<\/em>&#8221; classes to structs:<\/p>\n<pre class=\"lang:swift decode:true \">struct Car {\r\n    var plate: String\r\n    var driver: Driver?\r\n    \r\n    init(plate: String) {\r\n        self.plate = plate\r\n    }\r\n}\r\n\r\nstruct Driver {\r\n    let name: String\r\n    var cars: [Car] = []\r\n    \r\n    lazy var allPlates: () -&gt; String = {\r\n        return \"Car plates are: \"\r\n            + self.cars.map{ $0.plate }.joinWithSeparator(\", \")\r\n    }\r\n    \r\n    init(name: String) {\r\n        self.name = name\r\n    }\r\n}<\/pre>\n<p>That&#8217;s it!\u00a0Good-bye strong reference cycles, <em>weak<\/em>, and <em>unowned<\/em>! This is because reference counts are\u00a0always 1 for value types. There are no references to it. Instead, they are copied when assigned to a new variable:<\/p>\n<pre class=\"lang:swift decode:true \">var myCar: Car? = Car(plate: \"ABC123\") \/\/Car instance reference count is 1\r\nvar myDriver: Driver? = Driver(name: \"Neo\") \/\/Driver instance reference count is 1\r\n\r\nmyCar?.driver = myDriver \/\/Driver instance is COPIED, so reference count is 1\r\n\r\nif let car = myCar {\r\n    myDriver?.cars.append(car) \/\/Car instance is COPIED, so reference count is 1\r\n}\r\n\r\nmyCar = nil \/\/Car instance deallocated\r\nmyDriver?.cars[0] \/\/Car instance still lives on, it's a copy!\r\nmyDriver = nil \/\/Driver instance deallocated<\/pre>\n<p>Using value types over reference type is a world of difference with Objective-C and the recommended approach from the Swift team. It&#8217;s safer because many bugs in software arise from unexpected state changes. Of course, there is a place for classes, but as <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2015\/408\/\" target=\"_blank\" rel=\"noopener\">Crusty says<\/a>: Start with a protocol, then a struct, then a class when\u00a0necessary.<\/p>\n<p>The implications of this are vast, see be aware:<\/p>\n<pre class=\"lang:swift decode:true\">\/\/ Classes\r\nvar car1: Car? = Car(plate: \"ABC123\")\r\nvar car2 = car1\r\nvar car3 = car1\r\nprint(car1?.plate ?? \"\") \/\/ABC123\r\ncar3?.plate = \"XYZ987\"\r\nprint(car2?.plate ?? \"\") \/\/XYZ987\r\n\r\n\/\/ Structs\r\nvar car1: Car? = Car(plate: \"ABC123\")\r\nvar car2 = car1\r\nvar car3 = car1\r\nprint(car1?.plate ?? \"\") \/\/ABC123\r\ncar3?.plate = \"XYZ987\"\r\nprint(car2?.plate ?? \"\") \/\/ABC123<\/pre>\n<p>Notice with classes, updating &#8220;<em>car3<\/em>&#8221; affects &#8220;<em>car2<\/em>&#8220;. However with structs, updating &#8220;<em>car3<\/em>&#8221; is self contained and only affects &#8220;<em>car3<\/em>&#8220;. It&#8217;s very functional; inputting a value into function outputs another value without affecting the rest of the application &#8211; very modular! So before using value semantics, ensure you&#8217;re thinking value semantics and let it work for you.<\/p>\n<h2>Other Memory Issues<\/h2>\n<p>We only discussed memory leaks in this post, which is inaccessible memory that has\u00a0no more pointers to it. There are other memory issues that can plague your app that you should be conscious of.<\/p>\n<h3>Abandoned Memory<\/h3>\n<p>This kind of memory still has references to it, but\u00a0are wasted\u00a0since they\u00a0won&#8217;t ever be\u00a0used again.\u00a0There is\u00a0no good reason to access\u00a0that memory so it&#8217;s wasted resources. An example of this is pushing the same view controller over and over again without ever popping\/dismissing\u00a0it. Now you have duplicate\u00a0view controller instance on the view hierarchy. Not only is this wasted resources, but how do you know which one has the latest changes? Fortunately, this is a rookie mistake and easy to spot.<\/p>\n<h3>Cached Memory<\/h3>\n<p>Cache is great thing; whether it be images from the web or data from a database, it saves round trips to the server. However, without proper caching mechanisms in place, they can grow large and drown the resources fast. These are also easy to spot using trivial memory profilers. Implementing caching rules for the specific needs of the apps resolve these issues fast as well. There are some basic rules that can be enforced using the native <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/Cocoa\/Reference\/NSCache_Class\/\" target=\"_blank\" rel=\"noopener\">NSCache<\/a>, or libraries that offer more sophisticated options, such as <a href=\"https:\/\/github.com\/Haneke\/HanekeSwift\" target=\"_blank\" rel=\"noopener\">HanekeSwift<\/a>.<\/p>\n<h2>Clean &amp; Dirty Memory<\/h2>\n<p>There are some hooks and triggers iOS provides that help guide you to manage memory. First we must understand there is the concept of clean and dirty memory.<\/p>\n<p>Clean memory is static resources that are loaded into memory that doesn&#8217;t change. They can be recreated at any time, such as system frameworks, binaries, mapped files, etc. The system gets rid of these first when under memory pressure, since it can always recreate\u00a0it when needed.<\/p>\n<p>Dirty memory is those that are\u00a0changed during runtime. The system can&#8217;t recreate these, so it has to use swap space, but iOS doesn&#8217;t have a swap mechanism. So dirty memory will always be kept in physical memory\u00a0until it reach a certain limit.\u00a0Then the app\u00a0will be terminated and all its memory will be\u00a0recycled by system.<\/p>\n<p>Before getting to this point, iOS will send a few warnings to your app so you can act accordingly.<\/p>\n<h3>UIViewController &#8211;\u00a0didReceiveMemoryWarning<\/h3>\n<p>You&#8217;ve probably seen it before, but habitually deleted it. When you create new app or view controller, this is the template Xcode creates for you:<\/p>\n<pre class=\"lang:swift decode:true\">class ViewController: UIViewController {\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        \/\/ Do any additional setup after loading the view, typically from a nib.\r\n    }\r\n\r\n    override func didReceiveMemoryWarning() {\r\n        super.didReceiveMemoryWarning()\r\n        \/\/ Dispose of any resources that can be recreated.\r\n    }\r\n}<\/pre>\n<p>See the &#8220;<em>didReceiveMemoryWarning<\/em>&#8221; function? That&#8217;s where iOS will trigger it&#8217;s warning for your view controller. Ahhhh, that&#8217;s what that&#8217;s for \ud83d\ude42 . What you&#8217;ll want to do there is purge any\u00a0of the view controller&#8217;s resources\u00a0you don&#8217;t necessarily need\u00a0any more,\u00a0but can recreate later if so. This is also a good place to purge some cache or database resources so it can be recreated later when needed as well. This is why it is good to create everything in a lazy fashion, so resources are requested as needed, and recreated as needed.<\/p>\n<h3>AppDelegate &#8211;\u00a0applicationDidReceiveMemoryWarning<\/h3>\n<p>Implement the <em>applicationDidReceiveMemoryWarning<\/em> method of your application delegate. This is where you will set any app-wide references to objects it can safely free to <em>nil<\/em>. Also in the application delegate, make use of the\u00a0<em>applicationDidEnterBackground\u00a0<\/em>to free any resource so your app isn&#8217;t first line to be terminate from the list of background apps.<\/p>\n<h3>NSNotificationCenter &#8211; UIApplicationDidReceiveMemoryWarningNotification<\/h3>\n<p>Subscribe to the <em>NSNotificationCenter<\/em> if this suits better to free up resources:<\/p>\n<pre class=\"lang:swift decode:true\">NSNotificationCenter.defaultCenter()\r\n    .addObserverForName(UIApplicationDidReceiveMemoryWarningNotification,\r\n        object: nil,\r\n        queue: NSOperationQueue.mainQueue(),\r\n        usingBlock: { [unowned self] notification in\r\n            \/\/ Clean up\r\n        })<\/pre>\n<p>With one or more of these in place, you can use the simulator to trigger a memory warning by\u00a0choosing <em>Hardware\u00a0&gt;\u00a0Simulate Memory Warning<\/em>.<\/p>\n<h2>Debugging<\/h2>\n<p><a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/DeveloperTools\/Conceptual\/InstrumentsUserGuide\/CommonMemoryProblems.html#\/\/apple_ref\/doc\/uid\/TP40004652-CH91-SW1\" target=\"_blank\" rel=\"noopener\">Xcode Instruments<\/a>\u00a0is\u00a0actually quite useful. It will help you monitor memory usage, find abandoned memory,\u00a0find memory leaks,\u00a0find zombies, and more.<\/p>\n<p>To see this in action, <a href=\"https:\/\/github.com\/iosmentor-io\/swift-strong-reference-cycle-sample\" target=\"_blank\" rel=\"noopener\">clone this sample code<\/a> that has a strong reference cycle in it. Once you&#8217;ve opened it in Xcode, go to <em>Product &gt; Profile<\/em>. This will open up the Instruments template list, choose &#8220;<em>Leaks<\/em>&#8220;:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_351-500x381.png\" alt=\"CapturFiles_351\" width=\"500\" height=\"381\" class=\"aligncenter size-medium wp-image-779\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_351-500x381.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_351-768x585.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_351-1024x779.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_351.png 1532w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Click the record button and this will run the app in the profiler. Next, click the button I placed in the app labeled &#8220;<em>Trigger Strong Reference Cycle<\/em>&#8220;. The profiler will display green checkmarks, then boom! A red X will appear to indicate there is a strong reference cycle. It may take awhile for the profiler to catch up, but once you see the red X, stop the recording and click it.<\/p>\n<p>You will see the backtrace highlighting the leak and associated classes. You can even select <em>Details &gt; Cycle &amp; Roots<\/em>\u00a0and\u00a0see a nice reference graph:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_350-500x360.png\" alt=\"Xcode Instruments Swift\" width=\"500\" height=\"360\" class=\"aligncenter size-medium wp-image-780\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_350-500x360.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_350-768x552.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_350-1024x737.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>&nbsp;<\/p>\n<p>For an actual production app, be\u00a0sure to eventually use a real device instead of the simulator since low-level details may not be the same.<\/p>\n<h2>Conclusion<\/h2>\n<p>Swift is a gorgeous language and it also has smarts. It manages memory across the board. In Objective-C for example, Automatic Reference Counting (ARC) is not supported in\u00a0procedural-C code and low-level\u00a0API&#8217;s like Core Graphics. These have been handled in Swift though, so\u00a0the huge memory leaks that a programmer can have in Objective-C are impossible in Swift. This alone is a big win for Swift. However, this doesn&#8217;t mean we&#8217;re home-free for any\u00a0language or platform.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n<h3>Further Reading<\/h3>\n<ul>\n<li><a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/AutomaticReferenceCounting.html\" target=\"_blank\" rel=\"noopener\">The Swift Programming Language:\u00a0Automatic Reference Counting<\/a><\/li>\n<li><a href=\"http:\/\/krakendev.io\/blog\/weak-and-unowned-references-in-swift\" target=\"_blank\" rel=\"noopener\">Weak, Strong, Unowned, Oh My!<\/a><\/li>\n<li><a href=\"https:\/\/realm.io\/news\/hector-matos-memory-management\/\" target=\"_blank\" rel=\"noopener\">The Weak, the Strong, and the Unowned<\/a><\/li>\n<li><a href=\"https:\/\/digitalleaves.com\/blog\/2015\/05\/demystifying-retain-cycles-in-arc\/\" target=\"_blank\" rel=\"noopener\">Demystifying Retain Cycles in ARC<\/a><\/li>\n<li><a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2012\/242\/\" target=\"_blank\" rel=\"noopener\">WWDC 2012:\u00a0iOS App Performance: Memory<\/a><\/li>\n<\/ul>\n<hr \/>\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!<\/h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https:\/\/iosmentor.io\/webinars\/swift-frameworks\/\" target=\"_blank\" rel=\"noopener\"><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" \/><\/a><\/p>\n","link":"https:\/\/basememara.com\/memory-leaks-resource-management-swift-ios\/","comment_count":5,"author":2,"featured_media":777,"terms":[80,53,66,50,55,47],"meta":{"_series_part":"5"},"created":"2016-05-24T10:19:06","modified":"2018-09-30T11:49:10"},{"id":41294,"title":"So Swift, So Clean Architecture for iOS","slug":"swift-clean-architecture","type":"post","excerpt":"The topic of iOS app architecture has evolved a long way from MVC. Unfortunately, the conversation becomes a frameworks and patterns war. The reality is: Rx is a framework; MVVM is a presentation pattern; and so on. Frameworks and patterns always come and go, but architectures are timeless. In this post, we will examine the Clean Architecture for building scalable apps in iOS.","content":"<blockquote><p>You are not paid to code; you are paid to create solutions.<\/p><\/blockquote>\n<p>The topic of iOS app architecture has evolved a long way from MVC. Unfortunately, the conversation becomes a frameworks and patterns war. The reality is: Rx is a framework; MVVM is a presentation pattern; and so on. Frameworks and patterns always come and go, but architectures are timeless.\u00a0In this post, we will examine the Clean Architecture for building scalable apps in iOS.<\/p>\n<h2>What About Bob?<\/h2>\n<p>The Clean Architecture\u00a0was coined by Uncle Bob almost 20 years ago. It is independent of platforms, frameworks, databases, or UI. It is testable. It&#8217;s a way of life (ok, software life). Sound good?<\/p>\n<p>If you have an hour to spare for learning, I highly suggest watching this lecture called\u00a0<strong>The Principles of Clean Architecture by Uncle Bob Martin<\/strong> <em>(skip to 10:00 if you don&#8217;t want the biology lesson, although still interesting)<\/em>:<\/p>\n<p><iframe width=\"500\" height=\"281\" src=\"https:\/\/www.youtube.com\/embed\/o_TH-Y78tt4?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen><\/iframe><\/p>\n<h2>A Thing About Screaming Architecture<\/h2>\n<p>Regarding project structure, let&#8217;s first get the feature vs. type debate out the way. The application should scream what it does without any IDE or explanation at all. Anyone should be able to open up the file system and know exactly what the application does.\u00a0Take a look at the two apps below:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/feature-vs-type-project.png\" alt=\"\" width=\"266\" height=\"568\" class=\"aligncenter size-full wp-image-41299\" \/><\/p>\n<p>In the first app, all it tells me is that it&#8217;s an MVC project and has something to do with products and users. Why do I have to know MVC to figure out what it does? I have to compile and run it in my mind to figure out what it does. What&#8217;s worse, I have to expand all the folders to start investigating. In a complex app, imagine hundreds of controllers or views polluting your eyes. Maintaining and debugging are nightmare too, jumping back and forth between folders is like a game of ping pong.<\/p>\n<p>Now take a look at the second app. Right off the bat, I can tell it lists products, displays it, and shows a user&#8217;s profile. I don&#8217;t have to expand the folders to know what it is. I don&#8217;t have to know what framework or pattern it&#8217;s using. I don&#8217;t even have to know what language it&#8217;s written in!<\/p>\n<p>Another way to look at it is would you rather organize drawers by just throwing everything into three drawers, or is it better to have several\u00a0small well-defined and well-labeled drawers?<\/p>\n<p>Ok let&#8217;s move on&#8230;<\/p>\n<h2>The Anatomy of the Clean Architecture<\/h2>\n<p>There are actually many variations and flavours of the Clean Architecture. You&#8217;ve probably heard of <a href=\"https:\/\/mutualmobile.com\/posts\/meet-viper-fast-agile-non-lethal-ios-architecture-framework\" target=\"_blank\" rel=\"noopener\">VIPER<\/a> or <a href=\"https:\/\/clean-swift.com\" target=\"_blank\" rel=\"noopener\">Clean Swift<\/a>. When you jump into other platforms like Android or .NET, there even exists more flavours. The one I will show you in this post was <em>heavily<\/em> inspired by Clean Swift. I put my own spin to it after battle-testing it and maintaining it across several teams, platforms, and environments.<\/p>\n<p>To get started, we have to get some terminology out the way. Below are a list of components in the architecture:<\/p>\n<ul>\n<li><strong>View:<\/strong> The interface where user interactions occur, such as the <code>Storyboard<\/code> or <code>XIB<\/code>.<\/li>\n<li><strong>Controller:<\/strong> The layer which binds the view to code, this being the <code>UIViewController<\/code> in our case.<\/li>\n<li><strong>Interactor:<\/strong> The business logic layer where the controller must send requests through.<\/li>\n<li><strong>Presenter:<\/strong> The layer that formats the response from the Interactor and sends it back to the controller.<\/li>\n<li><strong>Router:<\/strong> The layer that transports the user to another use case scene, usually an event that occurs in the controller.<\/li>\n<\/ul>\n<p>The core pieces of the architecture is the <em>Controller, Interactor, and Presenter<\/em>. The important thing to notice is that it has a uni-directional flow!\u00a0This tremendously reduces complexity and makes it easy to manage. Since a picture is worth a thousand words, I have summed up the entire architecture in a single diagram:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/Clean-Architecture-Cycle-2-500x518.png\" alt=\"\" width=\"500\" height=\"518\" class=\"aligncenter wp-image-41346 size-medium\" \/><\/p>\n<p>Follow the flow below to understand how the architecture works:<\/p>\n<ol>\n<li>User interacts with <strong><em>View<\/em><\/strong><\/li>\n<li><strong><em>Controller<\/em><\/strong> event fires, builds a request model, and calls the <strong><em>Interactor<\/em><\/strong><\/li>\n<li>The <strong><em>Interactor<\/em><\/strong> calls the underlying core library with all your workers to access the data (could even subscribe to an observable here if needed)<\/li>\n<li>The <strong><em>Interactor<\/em><\/strong> receives data from the worker and wraps it in a response model to send to the <strong><em>Presenter<\/em><\/strong><\/li>\n<li>The <strong><em>Presenter<\/em><\/strong> calls app-level helpers if needed to format or localize the response and builds a view model to send to the <strong><em>Controller<\/em><\/strong><\/li>\n<li>The <strong><em>Controller<\/em><\/strong> receives the view model in a function and binds it to the <strong><em>View<\/em><\/strong><\/li>\n<li>Repeat the cycle&#8230;<\/li>\n<\/ol>\n<p>Also notice the architecture is cross-platform. It doesn&#8217;t care that the view is served by an iOS app, Android app, web browser, or even a REST API endpoint. Once it gets past the view, everything should be identical across platforms. In fact, an iOS and Android app can be eerily similar with just the <code>Storyboard<\/code> vs <code>Layout<\/code> being the difference. Even the iOS\u00a0<code>UIViewController<\/code>\u00a0and Android <code>Activity<\/code>\u00a0code would almost be identical except for the binding logic. This makes collaboration and bug fixing tight between teams!<\/p>\n<h2>The Details<\/h2>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/show_me_the_code.jpg\" alt=\"\" width=\"306\" height=\"165\" class=\"aligncenter size-full wp-image-41304\" \/><\/p>\n<p>It&#8217;s time to see how this plays out in code. We can do this by first examining the protocols that is the blueprint for a use case; this is important so the boundaries are defined and components are decoupled:<\/p>\n<pre class=\"lang:swift decode:true\">protocol ListProductsDisplayable: class { \/\/ View Controller\r\n    func displayFetchedProducts(with viewModel: ListProductsModels.ViewModel)\r\n    func display(error: AppModels.Error)\r\n}\r\n\r\nprotocol ListProductsBusinessLogic { \/\/ Interactor\r\n    func fetchProducts(with request: ListProductsModels.FetchRequest)\r\n}\r\n\r\nprotocol ListProductsPresentable { \/\/ Presenter\r\n    func presentFetchedProducts(for response: ListProductsModels.Response)\r\n    func presentFetchedProducts(error: DataError)\r\n}\r\n\r\nprotocol ListProductsRoutable: AppRoutable { \/\/ Router\r\n    func showProduct(for id: Int)\r\n}<\/pre>\n<p>Here&#8217;s what happens when the controller loads via <code>viewDidLoad<\/code>: <em>interactor.fetchProducts &gt; presenter.presentFetchedProducts &gt; controller.displayFetchedProducts<\/em>. Do you see it yet? The cycle is there.\u00a0Let&#8217;s take another look&#8230;<\/p>\n<p><em>Controller:<\/em><\/p>\n<pre class=\"lang:swift decode:true\">class ListProductsViewController: UIViewController {\r\n\r\n    private lazy var interactor: ListProductsBusinessLogic = ListProductsInteractor(\r\n        presenter: ListProductsPresenter(viewController: self),\r\n        productsWorker: ProductsWorker(store: ProductsMemoryStore())\r\n    )\r\n    \r\n    private lazy var router: ListProductsRoutable = ListProductsRouter(\r\n        viewController: self\r\n    )\r\n\r\n    private var viewModel: ListProductsModels.ViewModel?\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n\r\n        interactor.fetchProducts(\r\n            with: ListProductsModels.FetchRequest()\r\n        )\r\n    }\r\n}\r\n\r\nextension ListProductsViewController: ListProductsDisplayable {\r\n    \r\n    func displayFetchedProducts(with viewModel: ListProductsModels.ViewModel) {\r\n        self.viewModel = viewModel\r\n        tableView.reloadData()\r\n    }    \r\n\r\n    func display(error: AppModels.Error) {\r\n        let alertController = UIAlertController(\r\n            title: error.title,\r\n            message: error.message,\r\n            preferredStyle: .alert\r\n        )\r\n        \r\n        alertController.addAction(\r\n            UIAlertAction(title: \"OK\", style: .default, handler: nil)\r\n        )\r\n        \r\n        present(alertController, animated: true, completion: nil)\r\n    }\r\n}\r\n\r\nextension ListProductsViewController: UITableViewDelegate {\r\n    \r\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\r\n        guard let model = viewModel?.products[indexPath.row] else { return }\r\n        router.showProduct(for: model.id)\r\n    }\r\n}<\/pre>\n<p>The controller creates the instances to the interactor, injects the presenter, and also creates the router. When loaded, it creates a request model and calls the interactor:<\/p>\n<pre class=\"lang:swift decode:true\">struct ListProductsInteractor {\r\n    private let presenter: ListProductsPresentable\r\n    private let productsWorker: ProductsWorkerType\r\n    \r\n    init(presenter: ListProductsPresentable, productsWorker: ProductsWorkerType) {\r\n        self.presenter = presenter\r\n        self.productsWorker = productsWorker\r\n    }\r\n}\r\n\r\nextension ListProductsInteractor: ListProductsBusinessLogic {\r\n    \r\n    func fetchProducts(with request: ListProductsModels.FetchRequest) {\r\n        productsWorker.fetch {\r\n            guard let value = $0.value, $0.isSuccess else {\r\n                return self.presenter.presentFetchedProducts(error: $0.error ?? .unknownReason(nil))\r\n            }\r\n            \r\n            self.presenter.presentFetchedProducts(\r\n                for: ListProductsModels.Response(products: value)\r\n            )\r\n        }\r\n    }\r\n}\r\n<\/pre>\n<p>The <code>fetchProducts<\/code>\u00a0function in the interactor calls the injected <code>productsWorker<\/code>\u00a0(DI was left out for clarity, see my other post\u00a0<a href=\"http:\/\/basememara.com\/swift-protocol-oriented-dependency-injection\/\" target=\"_blank\" rel=\"noopener\">Swifty Dependency Injection<\/a>\u00a0for that topic). Underneath, it will call the appropriate storage, whether it be Core Data, Realm, or even a file system&#8230; the architecture doesn&#8217;t care and could be swapped out without affecting the cycle! When the data returns from the data storage asynchronously, it will wrap it in a response model and send it to the presenter:<\/p>\n<pre class=\"lang:swift decode:true \">struct ListProductsPresenter: ListProductsPresentable {\r\n    private weak var viewController: ListProductsDisplayable?\r\n    private let currencyFormatter: NumberFormatter\r\n    \r\n    init(viewController: ListProductsDisplayable?) {\r\n        self.viewController = viewController\r\n        self.currencyFormatter = NumberFormatter()\r\n        self.currencyFormatter.numberStyle = .currency\r\n    }\r\n}\r\n\r\nextension ListProductsPresenter {\r\n    \r\n    func presentFetchedProducts(for response: ListProductsModels.Response) {\r\n        let viewModel = ListProductsModels.ViewModel(\r\n            products: response.products.map {\r\n                ListProductsModels.ProductViewModel(\r\n                    id: $0.id,\r\n                    name: $0.name,\r\n                    content: $0.content,\r\n                    price: currencyFormatter.string(from: NSNumber(value: Float($0.priceCents) \/ 100)) ?? \"\\($0.priceCents \/ 100)\"\r\n                )\r\n            }\r\n        )\r\n        \r\n        viewController?.displayFetchedProducts(with: viewModel)\r\n    }\r\n    \r\n    func presentFetchedProducts(error: DataError) {\r\n        \/\/ Handle and parse error\r\n        let viewModel = AppModels.Error(\r\n            title: NSLocalizedString(\"products.error.title\", \"Title for product error\"),\r\n            message: String(format: NSLocalizedString(\"products.error.message\", \"Message for product error\"), error)\r\n        )\r\n        \r\n        viewController?.display(error: viewModel)\r\n    }\r\n}<\/pre>\n<p>The presenter will convert the response into a view model, applying any formatting and localization, and call the controller function to display it. The view model properties are almost always strings because the view will just display.\u00a0If the interactor gave the presenter an error, it will even create a view model out of the error and let the controller display it.<\/p>\n<p>The models are encapsulated in an enum and are only relevant to its own use case. You do not cross boundaries without being wrapped in one of the models:<\/p>\n<pre class=\"lang:swift decode:true \">enum ListProductsModels {\r\n    \r\n    struct FetchRequest {\r\n        \r\n    }\r\n    \r\n    struct SearchRequest {\r\n        let text: String\r\n    }\r\n    \r\n    struct Response {\r\n        let products: [ProductType]\r\n    }\r\n    \r\n    struct ViewModel {\r\n        let products: [ProductViewModel]\r\n    }\r\n    \r\n    struct ProductViewModel {\r\n        let id: Int\r\n        let name: String\r\n        let content: String\r\n        let price: String\r\n    }\r\n}<\/pre>\n<p>Finally the router in case the controller has to send the user to another use case:<\/p>\n<pre class=\"lang:swift decode:true\">struct ListProductsRouter {\r\n    weak var viewController: UIViewController?\r\n    \r\n    init(viewController: UIViewController?) {\r\n        self.viewController = viewController\r\n    }\r\n}\r\n\r\nextension ListProductsRouter: ListProductsRoutable {\r\n    \r\n    func showProduct(for id: Int) {\r\n        let storyboard = UIStoryboard(name: \"ShowProduct\", bundle: nil)\r\n        \r\n        guard let controller = storyboard.instantiateInitialViewController()) as? ShowProductViewController\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n\r\n        controller.productID = id\r\n\r\n        viewController?.present(controller, animated: true)\r\n    }\r\n}<\/pre>\n<p>This way, the the controller is decoupled from the routing decisions and can be used from the controller as:\u00a0<code>router.showProduct(for: productID)<\/code>.<\/p>\n<h2>Conclusion<\/h2>\n<p>The Clean Architecture is flexible, scalable, and maintainable. Although it is more verbose than other architecture designs, it is necessary so components are not tightly coupled. That means everything must reference each other by its protocol, not its concrete types. And when crossing boundaries, data must be wrapped in request \/ response models, or again components will be coupled. In a future post, I will discuss how to unit test the whole stack.<\/p>\n<p>See a <a href=\"https:\/\/github.com\/iosmentor-io\/Swift-Clean-Architecture\" target=\"_blank\" rel=\"noopener\">working example of this Clean Architecture<\/a>\u00a0to try it out for yourself.<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n<hr \/>\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!<\/h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https:\/\/iosmentor.io\/webinars\/swift-frameworks\/\" target=\"_blank\" rel=\"noopener\"><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" \/><\/a><\/p>\n","link":"https:\/\/basememara.com\/swift-clean-architecture\/","comment_count":10,"author":2,"featured_media":41346,"terms":[80,79,53,14,62,50,55],"meta":{"_series_part":"1"},"created":"2018-04-22T22:03:20","modified":"2018-09-30T11:47:51"},{"id":553,"title":"Updating Query String Parameters in Swift","slug":"updating-query-string-parameters-in-swift","type":"post","excerpt":"Adding, updating, and removing query string parameters is a common use case, but very tedious. This Swift function will help make it easy and pleasant leveraging NSURLComponents.","content":"<p>Working with URL&#8217;s is such a frequent task, but very tedious when it comes to parsing and manipulating it. Although there are tons of libraries out there\u00a0dedicated to alleviating URL string woes, it is rare to find anything good natively built into the language. Objective-C and Swift were slow to the scene, but alas Apple has introduced <a href=\"https:\/\/developer.apple.com\/library\/prerelease\/ios\/documentation\/Foundation\/Reference\/NSURLComponents_class\/index.html\" target=\"_blank\" rel=\"noopener\">NSURLComponents<\/a> starting in iOS7. Just in time for implementing <a href=\"http:\/\/blog.hokolinks.com\/how-to-implement-apple-universal-links-on-ios-9\/\" target=\"_blank\" rel=\"noopener\">Universal Links<\/a> \ud83d\ude09<\/p>\n<h2>Query String Parameters<\/h2>\n<p>Adding, updating, and removing query string parameters is a common use case. It&#8217;s a common piece in my coding arsenal across languages. Now it is time to include one for Swift, here&#8217;s the code:<\/p>\n<pre class=\"lang:js decode:true \">\/**\r\nAdd, update, or remove a query string item from the URL\r\n\r\n:param: url   the URL\r\n:param: key   the key of the query string item\r\n:param: value the value to replace the query string item, nil will remove item\r\n\r\n:returns: the URL with the mutated query string\r\n*\/\r\npublic func addOrUpdateQueryStringParameter(url: String, key: String, value: String?) -&gt; String {\r\n    if let components = NSURLComponents(string: url),\r\n        var queryItems = (components.queryItems ?? []) as? [NSURLQueryItem] {\r\n            for (index, item) in enumerate(queryItems) {\r\n                \/\/ Match query string key and update\r\n                if item.name == key {\r\n                    if let v = value {\r\n                        queryItems[index] = NSURLQueryItem(name: key, value: v)\r\n                    } else {\r\n                        queryItems.removeAtIndex(index)\r\n                    }\r\n                    components.queryItems = queryItems.count &gt; 0\r\n                        ? queryItems : nil\r\n                    return components.string!\r\n                }\r\n            }\r\n            \r\n            \/\/ Key doesn't exist if reaches here\r\n            if let v = value {\r\n                \/\/ Add key to URL query string\r\n                queryItems.append(NSURLQueryItem(name: key, value: v))\r\n                components.queryItems = queryItems\r\n                return components.string!\r\n            }\r\n    }\r\n    \r\n    return url\r\n}\r\n    \r\n\/**\r\nAdd, update, or remove a query string parameters from the URL\r\n    \r\n:param: url   the URL\r\n:param: values the dictionary of query string parameters to replace\r\n    \r\n:returns: the URL with the mutated query string\r\n*\/\r\npublic func addOrUpdateQueryStringParameter(url: String, values: [String: String]) -&gt; String {\r\n    var newUrl = url\r\n        \r\n    for item in values {\r\n        newUrl = addOrUpdateQueryStringParameter(newUrl, key: item.0, value: item.1)\r\n    }\r\n        \r\n    return newUrl\r\n}\r\n\r\n\/**\r\nRemoves a query string item from the URL\r\n\r\n:param: url   the URL\r\n:param: key   the key of the query string item\r\n\r\n:returns: the URL with the mutated query string\r\n*\/\r\npublic func removeQueryStringParameter(url: String, key: String) -&gt; String {\r\n    return addOrUpdateQueryStringParameter(url, key: key, value: nil)\r\n}<\/pre>\n<p>First and foremost, I&#8217;m splitting up the URL into pieces using `NSURLComponents`. This will allow me to work with just the query string parameters leaving everything else intact.<\/p>\n<p>Next, I&#8217;m looping through the query items of the URL components and finding the key. If found, I am updating the query string parameter, or removing it if the value is `nil`. The reason why I am checking for `nil` is so I can reuse the function in the `removeQueryString` function by simply passing `nil`.<\/p>\n<p>Finally, I&#8217;m assigning the mutated query items value back into the components and returning the components as a URL string. If there are no query items, I&#8217;m assigning `nil` so I don&#8217;t get an empty `?` appended to the end of the URL.<\/p>\n<p>Notice if the loop doesn&#8217;t return anything, it means that no query string parameters was found, so I am creating a new query items array and assigning it back. It also gets there if the query items was nil or empty to begin with.<\/p>\n<p>And as an added bonus, I&#8217;ve included a function to accept a dictionary of query string parameters to do a bulk update in one pass.<\/p>\n<h2>**UPDATE**<\/h2>\n<p>Refactored code and will be maintained <a href=\"https:\/\/github.com\/ZamzamInc\/ZamzamKit\/blob\/master\/Sources\/Extensions\/URL.swift\" target=\"_blank\" rel=\"noopener\">here<\/a>\u00a0along with unit tests.<\/p>\n<pre class=\"lang:js decode:true\">extension URL {\r\n    \r\n    \/**\r\n     Add, update, or remove a query string parameter from the URL\r\n     \r\n     - parameter url:   the URL\r\n     - parameter key:   the key of the query string parameter\r\n     - parameter value: the value to replace the query string parameter, nil will remove item\r\n     \r\n     - returns: the URL with the mutated query string\r\n     *\/\r\n    func appendingQueryItem(_ name: String, value: Any?) -&gt; String {\r\n        guard var urlComponents = URLComponents(string: absoluteString) else {\r\n            return absoluteString\r\n        }\r\n        \r\n        urlComponents.queryItems = urlComponents.queryItems?\r\n            .filter { $0.name.lowercased() != name.lowercased() } ?? []\r\n        \r\n        \/\/ Skip if nil value\r\n        if let value = value {\r\n            urlComponents.queryItems?.append(URLQueryItem(name: name, value: \"\\(value)\"))\r\n        }\r\n        \r\n        return urlComponents.string ?? absoluteString\r\n    }\r\n    \r\n    \/**\r\n     Add, update, or remove a query string parameters from the URL\r\n     \r\n     - parameter url:   the URL\r\n     - parameter values: the dictionary of query string parameters to replace\r\n     \r\n     - returns: the URL with the mutated query string\r\n     *\/\r\n    func appendingQueryItems(_ contentsOf: [String: Any?]) -&gt; String {\r\n        guard var urlComponents = URLComponents(string: absoluteString), !contentsOf.isEmpty else {\r\n            return absoluteString\r\n        }\r\n        \r\n        let keys = contentsOf.keys.map { $0.lowercased() }\r\n        \r\n        urlComponents.queryItems = urlComponents.queryItems?\r\n            .filter { !keys.contains($0.name.lowercased()) } ?? []\r\n        \r\n        urlComponents.queryItems?.append(contentsOf: contentsOf.flatMap {\r\n            guard let value = $0.value else { return nil } \/\/Skip if nil\r\n            return URLQueryItem(name: $0.key, value: \"\\(value)\")\r\n        })\r\n        \r\n        return urlComponents.string ?? absoluteString\r\n    }\r\n    \r\n    \/**\r\n     Removes a query string parameter from the URL\r\n     \r\n     - parameter url:   the URL\r\n     - parameter key:   the key of the query string parameter\r\n     \r\n     - returns: the URL with the mutated query string\r\n     *\/\r\n    func removeQueryItem(_ name: String) -&gt; String {\r\n        return appendingQueryItem(name, value: nil)\r\n    }\r\n}<\/pre>\n<p><em>Enjoy!<\/em><\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/updating-query-string-parameters-in-swift\/","comment_count":3,"author":2,"featured_media":554,"terms":[53,55,58],"meta":{"_series_part":""},"created":"2015-08-05T14:18:55","modified":"2018-03-08T14:54:10"},{"id":5587,"title":"Swifty Locations with Observables","slug":"swifty-locations-observables","type":"post","excerpt":"Let's use the closure-based pattern to wrap CLLocationManager for allowing callers to subscribe to observables instead of using shared delegate functions.","content":"<p>In a <a href=\"http:\/\/basememara.com\/swift-delegates-closure-pattern\/\" target=\"_blank\" rel=\"noopener noreferrer\">previous post<\/a>, I showed how we can convert delegates to a closure pattern. The limitations of delegates quickly reveal itself when you need multiple delegates. They&#8217;re also pretty awkward in a functional programming language like Swift. Let&#8217;s use this pattern to wrap <a href=\"https:\/\/developer.apple.com\/reference\/corelocation\/cllocationmanager\" target=\"_blank\" rel=\"noopener noreferrer\">CLLocationManager<\/a> to allow callers to subscribe to events instead of using\u00a0shared delegate functions.<\/p>\n<h2>Out of the Box<\/h2>\n<p>First to contrast, see how we can use <code>CLLocationManager<\/code>\u00a0in a view controller:<\/p>\n<pre class=\"lang:swift decode:true\">class ViewController: UIViewController {\r\n    \r\n    @IBOutlet weak var resultLabel: UILabel!\r\n    \r\n    lazy var locationManager: CLLocationManager = {\r\n        $0.delegate = self\r\n        return $0\r\n    }(CLLocationManager())\r\n    \r\n    @IBAction func requestAuthorizationTapped(_ sender: Any) {\r\n        locationManager.requestWhenInUseAuthorization()\r\n    }\r\n    \r\n    @IBAction func requestLocationTapped(_ sender: Any) {\r\n        locationManager.requestLocation()\r\n    }\r\n    \r\n    @IBAction func startLocationTapped(_ sender: Any) {\r\n        locationManager.startUpdatingLocation()\r\n        resultLabel.text = \"startUpdating\"\r\n    }\r\n    \r\n    @IBAction func stopLocationTapped(_ sender: Any) {\r\n        locationManager.stopUpdatingLocation()\r\n        resultLabel.text = \"stopUpdating\"\r\n    }\r\n}\r\n\r\nextension ViewController: CLLocationManagerDelegate {\r\n    \r\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\r\n        guard let location = locations.last else { return }\r\n        resultLabel.text = \"Who triggered a location update?: \\(location)\"\r\n    }\r\n\r\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\r\n        resultLabel.text = \"request authorization: \\(status.rawValue)\"\r\n        \r\n        guard CLLocationManager.locationServicesEnabled(),\r\n            [.authorizedAlways, .authorizedWhenInUse].contains(CLLocationManager.authorizationStatus())\r\n                else { return }\r\n        \r\n        locationManager.startUpdatingLocation()\r\n    }\r\n    \r\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\r\n        debugPrint(error)\r\n    }\r\n}<\/pre>\n<p>There&#8217;s nothing special\u00a0here;\u00a0just a few <code>IBActions<\/code>\u00a0to request authorization, request current location, and toggle the location updates. This calls the underlying <code>CLLocationManager<\/code>\u00a0to perform the actions as normal.\u00a0Then in the delegate functions, we handle the response from the location services.<\/p>\n<h2>Delegate to Closure Pattern<\/h2>\n<p>Now let&#8217;s add some sugar and spice to our <code>CLLocationManager<\/code>. In the end, we can do something like this:<\/p>\n<pre class=\"lang:swift decode:true\">class ViewController: UIViewController {\r\n    \r\n    lazy var locationManager: LocationManager = {\r\n        return $0\r\n    }(LocationManager())\r\n    \r\n    lazy var locationObserver: LocationObserver = Observer {\r\n        print(\"subscribe location from observer property: \\($0)\")\r\n    }\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n\r\n        locationManager.requestAuthorization {\r\n            print(\"request authorization: \\($0)\")\r\n        }\r\n\r\n        locationManager.requestLocation {\r\n            print(\"request location: \\($0)\")\r\n        }\r\n        \r\n        locationManager.didUpdateLocations += locationObserver\r\n    }\r\n    \r\n    deinit {\r\n        locationManager.didUpdateLocations -= locationObserver\r\n    }\r\n}<\/pre>\n<p>Notice no more delegate functions! Instead, the trailing closures are added to the request authorization and location calls:<\/p>\n<pre class=\"lang:swift decode:true\">locationManager.requestLocation {\r\n    print(\"request location: \\($0)\")\r\n}<\/pre>\n<p>Also, the custom <code>LocationManager<\/code>\u00a0allows subscriptions to be registered for later execution when ready in an observable manner. For example, we can subscribe to\u00a0location updates by appending the closure to the &#8220;delegate queue&#8221;:<\/p>\n<pre class=\"lang:swift decode:true\">lazy var locationObserver: LocationObserver = Observer {\r\n    print(\"subscribe location from observer property: \\($0)\")\r\n}\r\n...\r\nlocationManager.didUpdateLocations += locationObserver<\/pre>\n<p>This will fire any time location updates come in. It&#8217;s not just Swifty, but very powerful. Several subscriptions can be registered from anywhere and will all be executed.<\/p>\n<p>Also notice there is an <code>Observer<\/code>\u00a0type that is used to wrap the closures. The reason for this is there isn&#8217;t a way to make closures <code>Equatable<\/code>\u00a0in Swift. However, this is necessary so the observers can be &#8220;unsubscribed&#8221; from the observable (or the queue). With this in place, unsubscribing from the observable becomes as simple as this:<\/p>\n<pre class=\"lang:swift decode:true \">locationManager.didUpdateLocations -= locationObserver<\/pre>\n<h2>Show Me the Money!<\/h2>\n<p>The custom <code>LocationManager<\/code>\u00a0is implemented below. Notice it is using <a href=\"http:\/\/basememara.com\/creating-thread-safe-arrays-in-swift\/\" target=\"_blank\" rel=\"noopener noreferrer\">thread-safe queues<\/a> to store the closures for later execution by the location manager services.<\/p>\n<pre class=\"lang:swift decode:true\">public class LocationManager: NSObject, CLLocationManagerDelegate {\r\n\r\n    \/\/\/ Internal Core Location manager\r\n    fileprivate lazy var manager: CLLocationManager = {\r\n        $0.delegate = self\r\n        if let value = self.desiredAccuracy { $0.desiredAccuracy = value }\r\n        if let value = self.distanceFilter { $0.distanceFilter = value }\r\n        if let value = self.activityType { $0.activityType = value }\r\n        return $0\r\n    }(CLLocationManager())\r\n    \r\n    \/\/\/ Default location manager options\r\n    fileprivate let desiredAccuracy: CLLocationAccuracy?\r\n    fileprivate let distanceFilter: Double?\r\n    fileprivate let activityType: CLActivityType?\r\n    \r\n    public init(\r\n        desiredAccuracy: CLLocationAccuracy? = nil,\r\n        distanceFilter: Double? = nil,\r\n        activityType: CLActivityType? = nil) {\r\n            \/\/ Assign values to location manager options\r\n            self.desiredAccuracy = desiredAccuracy\r\n            self.distanceFilter = distanceFilter\r\n            self.activityType = activityType\r\n        \r\n            super.init()\r\n    }\r\n    \r\n    \/\/\/ Subscribes to receive new location data when available.\r\n    public var didUpdateLocations = SynchronizedArray&lt;LocationObserver&gt;()\r\n    fileprivate var didUpdateLocationsSingle = SynchronizedArray&lt;LocationHandler&gt;()\r\n    \r\n    \/\/\/ Subscribes to receive new authorization data when available.\r\n    public var didChangeAuthorization = SynchronizedArray&lt;AuthorizationObserver&gt;()\r\n    fileprivate var didChangeAuthorizationSingle = SynchronizedArray&lt;AuthorizationHandler&gt;()\r\n    \r\n    deinit {\r\n        \/\/ Empty task queues of references\r\n        didUpdateLocations.removeAll()\r\n        didUpdateLocationsSingle.removeAll()\r\n        didChangeAuthorization.removeAll()\r\n        didChangeAuthorizationSingle.removeAll()\r\n    }\r\n}\r\n\r\n\/\/ MARK: - Nested types\r\npublic extension LocationManager {\r\n\r\n    \/\/\/ Location handler queue type.\r\n    typealias LocationObserver = Observer&lt;LocationHandler&gt;\r\n    typealias LocationHandler = (CLLocation) -&gt; Void\r\n    \r\n    \/\/ Authorization handler queue type.\r\n    typealias AuthorizationObserver = Observer&lt;AuthorizationHandler&gt;\r\n    typealias AuthorizationHandler = (Bool) -&gt; Void\r\n    \r\n    \/\/\/ Permission types to use location services.\r\n    \/\/\/\r\n    \/\/\/ - whenInUse: While the app is in the foreground.\r\n    \/\/\/ - always: Whenever the app is running.\r\n    enum AuthorizationType {\r\n        case whenInUse, always\r\n    }\r\n}\r\n\r\n\/\/ CLLocationManagerDelegate functions\r\npublic extension LocationManager {\r\n\r\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\r\n        guard let location = locations.last else { return }\r\n        \r\n        \/\/ Trigger and empty queues\r\n        didUpdateLocations.forEach { $0.handler(location) }\r\n        didUpdateLocationsSingle.removeAll { $0.forEach { $0(location) } }\r\n    }\r\n    \r\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\r\n        guard status != .notDetermined else { return }\r\n        \r\n        \/\/ Trigger and empty queues\r\n        didChangeAuthorization.forEach { $0.handler(isAuthorized) }\r\n        didChangeAuthorizationSingle.removeAll { $0.forEach { $0(self.isAuthorized) } }\r\n    }\r\n    \r\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\r\n        \/\/ TODO: Injectable logger\r\n        debugPrint(error)\r\n    }\r\n}\r\n\r\n\/\/ MARK: - CLLocationManager wrappers\r\npublic extension LocationManager {\r\n\r\n    \/\/\/ A Boolean value indicating whether the app wants to receive location updates when suspended.\r\n    var allowsBackgroundLocationUpdates: Bool {\r\n        get { return manager.allowsBackgroundLocationUpdates }\r\n        set { manager.allowsBackgroundLocationUpdates = newValue }\r\n    }\r\n    \r\n    \/\/\/ Determines if location services is enabled and authorized for always or when in use.\r\n    var isAuthorized: Bool {\r\n        return CLLocationManager.locationServicesEnabled()\r\n            &amp;&amp; [.authorizedAlways, .authorizedWhenInUse].contains(\r\n                CLLocationManager.authorizationStatus())\r\n    }\r\n    \r\n    \/\/\/ Determines if location services is enabled and authorized for the specified authorization type.\r\n    func isAuthorized(for type: AuthorizationType) -&gt; Bool {\r\n        guard CLLocationManager.locationServicesEnabled() else { return false }\r\n        return (type == .whenInUse &amp;&amp; CLLocationManager.authorizationStatus() == .authorizedWhenInUse)\r\n            || (type == .always &amp;&amp; CLLocationManager.authorizationStatus() == .authorizedAlways)\r\n    }\r\n    \r\n    \/\/\/ Starts the generation of updates that report the user\u2019s current location.\r\n    func startUpdating(enableBackground: Bool = false) {\r\n        manager.allowsBackgroundLocationUpdates = enableBackground\r\n        manager.startUpdatingLocation()\r\n    }\r\n    \r\n    \/\/\/ Stops the generation of location updates.\r\n    func stopUpdating() {\r\n        manager.allowsBackgroundLocationUpdates = false\r\n        manager.stopUpdatingLocation()\r\n    }\r\n}\r\n\r\n\/\/ MARK: - Single requests\r\npublic extension LocationManager {\r\n    \r\n    \/\/\/ Requests permission to use location services.\r\n    \/\/\/\r\n    \/\/\/ - Parameters:\r\n    \/\/\/   - type: Type of permission required, whether in the foreground (.whenInUse) or while running (.always).\r\n    \/\/\/   - startUpdating: Starts the generation of updates that report the user\u2019s current location.\r\n    \/\/\/   - completion: True if the authorization succeeded for the authorization type, false otherwise.\r\n    func requestAuthorization(for type: AuthorizationType = .whenInUse, startUpdating: Bool = false, completion: AuthorizationHandler? = nil) {\r\n        \/\/ Handle authorized and exit\r\n        guard !isAuthorized(for: type) else {\r\n            if startUpdating { self.startUpdating() }\r\n            completion?(true)\r\n            return\r\n        }\r\n        \r\n        \/\/ Request appropiate authorization before exit\r\n        defer {\r\n            switch type {\r\n            case .whenInUse: manager.requestWhenInUseAuthorization()\r\n            case .always: manager.requestAlwaysAuthorization()\r\n            }\r\n        }\r\n        \r\n        \/\/ Handle mismatched allowed and exit\r\n        guard !isAuthorized else {\r\n            if startUpdating { self.startUpdating() }\r\n            \r\n            \/\/ Process callback in case authorization dialog not launched by OS\r\n            \/\/ since user will be notified first time only and inored subsequently\r\n            completion?(false)\r\n            return\r\n        }\r\n        \r\n        if startUpdating {\r\n            didChangeAuthorizationSingle += { _ in self.startUpdating() }\r\n        }\r\n        \r\n        \/\/ Handle denied and exit\r\n        guard CLLocationManager.authorizationStatus() == .notDetermined\r\n            else { completion?(false); return }\r\n        \r\n        if let completion = completion {\r\n            didChangeAuthorizationSingle += completion\r\n        }\r\n    }\r\n    \r\n    \/\/\/ Request the one-time delivery of the user\u2019s current location.\r\n    \/\/\/\r\n    \/\/\/ - Parameter completion: The completion with the location object.\r\n    func requestLocation(completion: @escaping LocationHandler) {\r\n        didUpdateLocationsSingle += completion\r\n        manager.requestLocation()\r\n    }\r\n}<\/pre>\n<p>And the simple <code>Observer<\/code>\u00a0type to workaround equatable closures:<\/p>\n<pre class=\"lang:swift decode:true\">public struct Observer&lt;T&gt; {\r\n    let id: UUID\r\n    let handler: T\r\n    \r\n    public init(_ id: UUID = UUID(), handler: T) {\r\n        self.id = id\r\n        self.handler = handler\r\n    }\r\n}\r\n\r\nextension Observer: Equatable {\r\n     public static func ==(lhs: Observer, rhs: Observer) -&gt; Bool {\r\n        return lhs.id == rhs.id\r\n    }\r\n}<\/pre>\n<h2>Breaking It Down<\/h2>\n<p>In the custom <code>LocationManager<\/code>, the <code>CLLocationManager<\/code>\u00a0is kept private\u00a0internally. Then we route the internal delegate calls to the closure queues for execution, which will notify the listeners who&#8217;ve subscribed.<\/p>\n<pre class=\"lang:swift decode:true\">\/\/\/ Subscribes to receive new location data when available.\r\nvar didUpdateLocations = SynchronizedArray&lt;LocationObserver&gt;()\r\nvar didUpdateLocationsSingle = SynchronizedArray&lt;LocationHandler&gt;()\r\n    \r\n\/\/\/ Subscribes to receive new authorization data when available.\r\nvar didChangeAuthorization = SynchronizedArray&lt;AuthorizationObserver&gt;()\r\nvar didChangeAuthorizationSingle = SynchronizedArray&lt;AuthorizationHandler&gt;()<\/pre>\n<p>We are keeping a queue of\u00a0closures to execute all the time in an observable manner, and the other queue is for single requests like <code>requestLocation,<\/code>\u00a0which will called and removed to prevent duplicate firing. The delegates execute the closures in the arrays:<\/p>\n<pre class=\"lang:swift decode:true\">func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\r\n    guard let location = locations.last else { return }\r\n        \r\n    \/\/ Trigger and empty queues\r\n    didUpdateLocations.forEach { $0.handler(location) }\r\n    didUpdateLocationsSingle.removeAll { $0.forEach { $0(location) } }\r\n}\r\n    \r\nfunc locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\r\n    guard status != .notDetermined else { return }\r\n        \r\n    \/\/ Trigger and empty queues\r\n    didChangeAuthorization.forEach { $0.handler(isAuthorized) }\r\n    didChangeAuthorizationSingle.removeAll { $0.forEach { $0(self.isAuthorized) } }\r\n}<\/pre>\n<p>With these in place, the closures can be added to the location manager to be held in queue until the delegate functions fire them:<\/p>\n<pre class=\"lang:swift decode:true\">locationManager.requestLocation {\r\n    \/\/ Single execution\r\n}\r\n\r\nlocationManager.didUpdateLocations += Observer {\r\n    \/\/ Multiple execution\r\n}<\/pre>\n<h2>Requesting Authorization<\/h2>\n<p>A tricky area is requesting authorization since there are several states the user&#8217;s authorization can fall into. For this reason, this custom <code>LocationManager<\/code>\u00a0has a smarter authorization request implementation:<\/p>\n<pre class=\"lang:swift decode:true \">func requestAuthorization(for type: AuthorizationType = .whenInUse, startUpdating: Bool = false, completion: AuthorizationHandler? = nil) {\r\n    \/\/ Handle authorized and exit\r\n    guard !isAuthorized(for: type) else {\r\n        if startUpdating { self.startUpdating() }\r\n        completion?(true)\r\n        return\r\n    }\r\n    \r\n    \/\/ Request appropiate authorization before exit\r\n    defer {\r\n        switch type {\r\n        case .whenInUse: manager.requestWhenInUseAuthorization()\r\n        case .always: manager.requestAlwaysAuthorization()\r\n        }\r\n    }\r\n    \r\n    \/\/ Handle mismatched allowed and exit\r\n    guard !isAuthorized else {\r\n        if startUpdating { self.startUpdating() }\r\n        \r\n        \/\/ Process callback in case authorization dialog not launched by OS\r\n        \/\/ since user will be notified first time only and inored subsequently\r\n        completion?(false)\r\n        return\r\n    }\r\n    \r\n    if startUpdating {\r\n        didChangeAuthorizationSingle += { _ in self.startUpdating() }\r\n    }\r\n    \r\n    \/\/ Handle denied and exit\r\n    guard CLLocationManager.authorizationStatus() == .notDetermined\r\n        else { completion?(false); return }\r\n    \r\n    if let completion = completion {\r\n        didChangeAuthorizationSingle += completion\r\n    }\r\n}<\/pre>\n<p>A few things\u00a0come into play with this extended <code>requestAuthorization<\/code>\u00a0function:<\/p>\n<ol>\n<li>The permission type\u00a0needed is handled by an enum parameter: <code>requestAuthorization(for: .whenInUse)<\/code>. This way, calling `requestWhenInUseAuthorization` or `requestAlwaysAuthorization` is abstracted away.<\/li>\n<li>The <code>startUpdating<\/code>\u00a0boolean parameter automatically starts the location update services after authorization is offered to the user. It is queued up in the `didChangeAuthorization` when needed to ensure it is called after authorization has been given.<\/li>\n<li>If the required authorization is already given, everything is ignored and start updates occur if specified.<\/li>\n<li>If the authorization is already given, but is not the level\u00a0requested, it will start updates immediately since this can still occur, but will return false in the callback to specify the requested authorization is not given.<\/li>\n<li>If the authorization is denied, it will queue up start updates for later execution.<\/li>\n<\/ol>\n<p>The request authorization can now conveniently be used like this:<\/p>\n<pre class=\"lang:swift decode:true\">locationManager.requestAuthorization(for: .whenInUse, startUpdating: true) {\r\n    \/\/ Presents OS dialog to user if applicable\r\n    \/\/ Then start location updates when authorized\r\n\r\n    guard !$0 else { return }\r\n    \/\/ Present alert to route user to app settings if needed\r\n}<\/pre>\n<h2>Shared Singleton<\/h2>\n<p>Many times, a single `CoreLocation` manager is needed for your entire app. This helps in conserving power and simplifying data\u00a0flow. For this reason, the following pattern was created. In the `AppDelegate`, we add the static location manager:<\/p>\n<pre class=\"lang:swift decode:true\">@UIApplicationMain\r\nclass AppDelegate: UIResponder, UIApplicationDelegate {\r\n\r\n    var window: UIWindow?\r\n\r\n    \/\/\/ Global location manager\r\n    static var locationManager: LocationManager = {\r\n        return $0\r\n    }(LocationManager())\r\n}<\/pre>\n<p>With this global location manager in place and lazily loaded, view controllers can reference the location manager like this:<\/p>\n<pre class=\"lang:swift decode:true\">class LocationController: UIViewController {\r\n\r\n    var locationManager: LocationManager {\r\n        return AppDelegate.locationManager\r\n    }\r\n\r\n    ...\r\n}<\/pre>\n<h2>Conclusion<\/h2>\n<p>The <code>CLLocationManager<\/code>\u00a0has been wrapped in a modern, Swifty closure-based pattern. Subscribing to updates instead of using the one-size-fit-all\u00a0delegate functions seems more natural and scales better.\u00a0For a working sample, you can <a href=\"https:\/\/github.com\/ZamzamInc\/SwiftyLocations\" target=\"_blank\" rel=\"noopener noreferrer\">download the code here<\/a>.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n<hr \/>\n<h2>**UPDATE**<\/h2>\n<p>In favor of a more simplified, native-like experience, I&#8217;ve updated the API to add observers from this:<\/p>\n<pre class=\"lang:swift decode:true \">locationManager.didUpdateLocations += locationObserver<\/pre>\n<p>To this:<\/p>\n<pre class=\"lang:swift decode:true \">locationManager.addObserver(locationObserver)<\/pre>\n<p>This abstracts away the inner workings of the observer arrays. For a complete sample, see the below example. In addition, <code>LocationManager<\/code>\u00a0has been pulled into the\u00a0<a href=\"https:\/\/github.com\/ZamzamInc\/ZamzamKit\" target=\"_blank\" rel=\"noopener noreferrer\">ZamzamKit library<\/a> and will be maintained there going forward. The latest version of the Swifty location manager can be <a href=\"https:\/\/github.com\/ZamzamInc\/ZamzamKit\/blob\/master\/Sources\/Models\/LocationManager.swift\" target=\"_blank\" rel=\"noopener noreferrer\">tracked here<\/a>.<\/p>\n<pre class=\"lang:swift decode:true \">import UIKit\r\nimport CoreLocation\r\nimport ZamzamCore\r\n\r\nclass SecondViewController: UIViewController {\r\n\r\n    @IBOutlet weak var outputLabel: UILabel!\r\n    \r\n    var locationManager: LocationManager = {\r\n        return LocationManager(\r\n            desiredAccuracy: kCLLocationAccuracyThreeKilometers,\r\n            distanceFilter: 1000\r\n        )\r\n    }()\r\n    \r\n    var locationObserver = Observer&lt;LocationManager.LocationHandler&gt; {\r\n        print($0.description)\r\n    }\r\n    \r\n    override func viewDidAppear(_ animated: Bool) {\r\n        super.viewDidAppear(animated)\r\n        \r\n        locationManager.addObserver(locationObserver)\r\n        locationManager.addObserver(headingObserver)\r\n        \r\n        locationManager.requestAuthorization(\r\n            for: .whenInUse,\r\n            startUpdatingLocation: true) {\r\n                guard $0 else {\r\n                    return self.present(\r\n                        alert: \"Allow \u201cMy App\u201d to Access Your Current Location?\".localized,\r\n                        message: \"Coordinates needed to calculate your location.\".localized,\r\n                        buttonText: \"Allow\".localized,\r\n                        includeCancelAction: true,\r\n                        handler: {\r\n                            guard let settings = URL(string: UIApplicationOpenSettingsURLString) else { return }\r\n                            UIApplication.shared.open(settings)\r\n                        }\r\n                    )\r\n                }\r\n                \r\n                self.locationManager.startUpdatingHeading()\r\n        }\r\n    }\r\n    \r\n    override func viewWillDisappear(_ animated: Bool) {\r\n        super.viewWillDisappear(animated)\r\n        locationManager.removeObservers()\r\n    }\r\n    \r\n    deinit {\r\n        locationManager.removeObservers()\r\n    }\r\n}\r\n\r\nextension SecondViewController {\r\n    \r\n    var headingObserver: Observer&lt;LocationManager.HeadingHandler&gt; {\r\n        return Observer {\r\n            print($0.description)\r\n        }\r\n    }\r\n}<\/pre>\n<p>&nbsp;<\/p>\n","link":"https:\/\/basememara.com\/swifty-locations-observables\/","comment_count":3,"author":2,"featured_media":5670,"terms":[75,53,50,55,76,49],"meta":{"_series_part":"2"},"created":"2017-03-04T00:24:39","modified":"2017-05-18T10:53:21"},{"id":3013,"title":"Multi-Threading with Unsafe Resources in Swift","slug":"swifty-threading-for-unsafe-resources","type":"post","excerpt":"GCD is not for thread-unsafe shared resources since it does not guarantee the same thread will be used for the queue. We can use the threads API with a bit of sugar syntax.","content":"<p><a href=\"https:\/\/developer.apple.com\/reference\/dispatch\" target=\"_blank\">Grand Central Dispatch (GCD)<\/a> is very clever in that &#8220;<em>work submitted to dispatch queues are executed on a pool of threads fully managed by the system. No guarantee is made as to the thread on which a task executes.<\/em>&#8221; The last sentence is subtle, but has critical implications: GCD is not for thread-unsafe, shared\u00a0resources.<\/p>\n<h2>The Problem with GCD<\/h2>\n<p>Using serial queues is great for enforcing\u00a0thread-safe\u00a0arrays or collections. However, more complex resources, such as a database, is where GCD falls short.<\/p>\n<p>Take <a href=\"https:\/\/realm.io\/docs\/swift\/latest\/#threading\" target=\"_blank\">Realm<\/a>\u00a0and <a href=\"https:\/\/developer.couchbase.com\/documentation\/mobile\/current\/guides\/couchbase-lite\/native-api\/manager\/index.html#concurrency-support\" target=\"_blank\">Couchbase Lite<\/a> for examples. To achieve data consistency, results retrieved from the database are &#8220;<em>auto-updating<\/em>&#8221; across all threads. When changes are made to the database, internal notifications are triggered to keep your variables updated in real-time. This is possible because the underlying database is shared across various instances.<\/p>\n<p>The problem is when you pass managed resources across threads and changes are made from the other thread. The transaction version would be forked and dangerous to reconcile. So most libraries built around\u00a0shared resources have left it out, others like Core Data have gone the extra step to enable thread safety for\u00a0managed objects, but come with their own\u00a0issues like &#8220;<em><a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/CoreData\/FaultingandUniquing.html\" target=\"_blank\">faulting<\/a><\/em>&#8220;.<\/p>\n<p>You may be thinking to use the same <em>DispatchQueue<\/em> instance to work with your Realm resource for example. However, this will lead to intermittent crashes because creating Realm resources in a dispatch queue is <em>not guaranteed to be run on the same thread<\/em> next time you access it even though its the same <em>DispatchQueue<\/em>\u00a0instance.<\/p>\n<p>Let&#8217;s look at a simple\u00a0example:<\/p>\n<pre class=\"lang:js decode:true\">let list = realm.objects(Automobile.self)\r\n\r\n...\r\n\r\nURLSession.shared.dataTask(with: url) {\r\n    \/\/ Update list\r\n}.resume()<\/pre>\n<p>Data was retrieved from a remote server and we\u00a0would like to persist\u00a0any updates from the server. The catch\u00a0is that the &#8220;<em>URLSession.shared.dataTask<\/em>&#8221; completion handler runs on its own operation queue. We run into a crash because the Realm resources are being updated from another thread.<\/p>\n<h2>Queues\u00a0and Threads Are Not Created Equal<\/h2>\n<p>The solution for resources like these\u00a0is to use &#8216;ol fashion threads instead of <em>GCD:<\/em><\/p>\n<pre class=\"lang:js decode:true\">let list = realm.objects(Automobile.self)\r\nlet thread = Thread.current\r\n...\r\nURLSession.shared.dataTask(with: url) {\r\n    thread.perform(#selector(update), on: self, with: list, waitUntilDone: false)\r\n}.resume()\r\n...\r\nfunc update() {\r\n    \/\/ Update list\r\n}<\/pre>\n<p>Notice I&#8217;m referencing the original thread where the resource was created, which cannot be assumed to be always the main queue.\u00a0Then I&#8217;m performing a process under that thread.<\/p>\n<p>The <a href=\"https:\/\/developer.apple.com\/reference\/foundation\/thread\" target=\"_blank\">Thread<\/a> API&#8217;s are super archaic though, so I&#8217;ve added some helpers to make it more Swifty:<\/p>\n<pre class=\"lang:js decode:true\">extension Thread {\r\n\r\n    private typealias Block = @convention(block) () -&gt; Void\r\n    \r\n    \/**\r\n     Execute block, used internally for async\/sync functions.\r\n     \r\n     - parameter block: Process to be executed.\r\n     *\/\r\n    @objc private func run(block: Block) {\r\n        block()\r\n    }\r\n\r\n    \/**\r\n     Perform block on current thread asynchronously.\r\n     \r\n     - parameter block: Process to be executed.\r\n     *\/\r\n    public func async(execute: Block) {\r\n        guard Thread.current != self else { return execute() }\r\n        perform(#selector(run(block:)), on: self, with: execute, waitUntilDone: false)\r\n    }\r\n\r\n    \/**\r\n     Perform block on current thread synchronously.\r\n     \r\n     - parameter block: Process to be executed.\r\n     *\/\r\n    public func sync(execute: Block) {\r\n        guard Thread.current != self else { return execute() }\r\n        perform(#selector(run(block:)), on: self, with: execute, waitUntilDone: true)\r\n    }\r\n}<\/pre>\n<p>I&#8217;ve added new &#8220;<em>async<\/em>&#8221; and &#8220;<em>sync<\/em>&#8221; functions that accepts a closure. Then performs the process via selector by passing the closure to a private &#8220;<em>run<\/em>&#8221; function. Notice the closure has a type alias with &#8220;<em>convention<\/em>&#8220;. This is so Swift can pass a closure to the C-language underneath for the thread.<\/p>\n<p>With all this abstracted out, now we can do this:<\/p>\n<pre class=\"lang:js decode:true \">let list = realm.objects(Automobile.self)\r\nlet thread = Thread.current\r\n...\r\nURLSession.shared.dataTask(with: url) {\r\n    thread.async {\r\n        \/\/ Update list\r\n    }\r\n}.resume()<\/pre>\n<p>This feels more like GCD in\u00a0Swift \ud83d\ude42<\/p>\n<h2>Bonus<\/h2>\n<p>For creating\u00a0threads\u00a0and adding queue-like API&#8217;s, this\u00a0<a href=\"https:\/\/github.com\/duemunk\/Thread\" target=\"_blank\">Thread library<\/a>\u00a0was a gem to work with.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/swifty-threading-for-unsafe-resources\/","comment_count":4,"author":2,"featured_media":3225,"terms":[53,50,55,71,73],"meta":{"_series_part":"4"},"created":"2017-02-13T18:01:04","modified":"2017-02-14T04:17:53"},{"id":813,"title":"Enum-based Queue Factory for GCD","slug":"enum-based-queue-factory-gcd","type":"post","excerpt":"Grand Central Dispatch (GCD) is a great technology provided by Apple. It provides an elegant level of abstraction to work with threads, queues, and locks. And it went through a much needed make-over in Swift 3. In this post, I would like to take this one step further using enums as a queue factory.","content":"<p><a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/Performance\/Reference\/GCD_libdispatch_Ref\/\" target=\"_blank\">Grand Central Dispatch (GCD)<\/a> is a great technology provided by Apple. It provides an elegant level of abstraction to work with threads, queues, and locks. And it went through a much needed make-over in Swift 3. In this post, I would like to take this one step further using enums as a queue factory.<\/p>\n<h2>Show Me the Code!<\/h2>\n<p>Below is an enum that lists the queues across your app, along with a function to provide the created, configured queue:<\/p>\n<pre class=\"lang:js decode:true \">enum Queue: String {\r\n    private static var pools = [String: DispatchQueue]()\r\n    \r\n    case database = \"io.zamzam.databaseQueue\"\r\n    case transform = \"io.zamzam.transformQueue\"\r\n    case network = \"io.zamzam.networkQueue\"\r\n    \r\n    \/**\r\n     Create dispatch queue.\r\n     *\/\r\n    func create() -&gt; DispatchQueue {\r\n        let qos: DispatchQoS =\r\n            self == .database ? .utility\r\n            : self == .transform ? .userInitiated\r\n            : self == .network ? .userInitiated\r\n            : .background\r\n \r\n        return DispatchQueue(\r\n            label: rawValue,\r\n            attributes: [.serial, qos]\r\n        )\r\n    }\r\n    \r\n    \/**\r\n     Submits a block for asynchronous execution on a dispatch queue.\r\n     *\/\r\n    func async(execute: DispatchWorkItem) {\r\n        let queue = Queue.pools[rawValue] ?? {\r\n            Queue.pools[rawValue] = $0\r\n            return $0\r\n        }(create())\r\n        \r\n        queue.async(execute)\r\n    }\r\n}<\/pre>\n<p>Short and sweet! The enum cases represent the labels of your dispatch queues so they can be run on separate threads.\u00a0Since DispatchQueue labels do not have any correlation to queue instances, I&#8217;m reusing the same queue instance for each enum case by storing it in a dictionary.<\/p>\n<p>Then in the <em>&#8220;async&#8221;<\/em> function, it creates the queue and configures it with the appropriate <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/Performance\/Conceptual\/EnergyGuide-iOS\/PrioritizeWorkWithQoS.html\" target=\"_blank\">Quality of Service (QOS)<\/a>,\u00a0or uses\u00a0the\u00a0existing\u00a0queue instance from memory.<\/p>\n<p>To use it, you simply do the following:<\/p>\n<pre class=\"lang:swift decode:true \">Queue.database.async {\r\n    \/\/ Do my thread-based work\r\n}\r\n\r\nQueue.transform.async {\r\n    \/\/ Do my thread-based work\r\n}\r\n\r\nQueue.network.async {\r\n    \/\/ Do my thread-based work\r\n}<\/pre>\n<p>This helps architect your app into subsystems, with each subsystem represented by an enum case and backed by its own dispatch queue with\u00a0the appropriate quality of service.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/enum-based-queue-factory-gcd\/","comment_count":4,"author":2,"featured_media":814,"terms":[70,50,55,71],"meta":{"_series_part":"3"},"created":"2016-08-14T16:01:36","modified":"2017-02-12T09:57:11"},{"id":796,"title":"Percentage-based Spacing Using Autolayout and Storyboard","slug":"percentage-based-margin-using-autolayout-storyboard","type":"post","excerpt":"Due to the many screen sizes in the mobile world, staying relative to screen size is crucial. Hard-coding margins and sizes based on points can be short-sighted. In this post, we will subclass NSLayoutConstraint to achieve percentage-based margins.","content":"<p>Due to the many screen sizes in the mobile world, staying relative to screen size\u00a0is crucial. Hard-coding margins\u00a0and sizes based on points can be\u00a0short-sighted. For example, 20 pixel spacing between\u00a0views in\u00a0an iPhone 6S may not be\u00a0the desired effect on an iPad Pro. Instead, a 10% space\u00a0may make more sense across all screen sizes and would be forward-compatible for\u00a0future screen sizes as well.<\/p>\n<h2>State of Percentages in Auto\u00a0Layout<\/h2>\n<p>It\u00a0seems\u00a0as if percentages were an after-thought to the Storyboard arena. CSS for the web on the other hand, have percentages baked in as first-class citizens for margins, padding, fonts, etc in the form of\u00a0&#8216;<em>em<\/em>&#8216; or &#8216;<em>vw<\/em>&#8216; keywords to remain relative to the screen size. Android also have wide support for percentages. These spaces were born with various screen sizes in mind.<\/p>\n<p>Apple on the other hand, only started out with one iPhone and remained so for a very long time.\u00a0Then Auto Layout was introduced, then Size Classes, then UIStackViews&#8230; iteration over iteration to bring percentages slowly into the game. There\u00a0was still something missing though.<\/p>\n<p>Spacing\u00a0in Storyboard are heavily based on constants.\u00a0However,\u00a0there actually \u00a0is a way to achieve percentage-based margins. To do this, set your constant to zero and the multiplier to a percentage to fill its superview:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-autolayout-percent-superview-1-500x140.png\" alt=\"ios-autolayout-percent-superview\" width=\"500\" height=\"140\" class=\"aligncenter size-medium wp-image-798\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-autolayout-percent-superview-1-500x140.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-autolayout-percent-superview-1-768x216.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-autolayout-percent-superview-1-1024x287.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-autolayout-percent-superview-1.png 1304w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>However, there is a catch.\u00a0Notice that I have this in a container view, so the superview is not the controller view\u00a0here. This means the percentage is <em>not<\/em> based on the whole screen size, but based on the immediate superview&#8217;s size. Many times, this is not the desire effect.<\/p>\n<p>Instead, we want to keep all our percentages relative to the whole screen size so there is a consistent calculation for the entire layout. This becomes especially important when building screens from a Sketch or Photoshop\u00a0design.\u00a0It would be ridiculous for a designer to build a design per screen size, such as iPhone 4, 5, 6, iPad 2, Pro, etc. It&#8217;s not even possible for the Android world. So the margins and spaces must be responsive or relative using percentages, not points.<\/p>\n<p>One can use proportionate widths against any\u00a0view to give the effect\u00a0of percentage-based margins. However, there&#8217;s an important scenario that cannot be achieved with this. Imaging you want to add a 5% space between two views?<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_30-500x191.png\" alt=\"Percentage-based Spacing\" width=\"500\" height=\"191\" class=\"aligncenter size-medium wp-image-808\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_30-500x191.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_30-768x294.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_30.png 982w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>You can probably get away with using a &#8220;<a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UIStackView_Class_Reference\/\" target=\"_blank\"><em>UIStackView<\/em><\/a>&#8220;, but even this is constant-based. Also, things can get messy if elements are not in a stack form and need percentage-based spacing in more complex scenarios. What is needed here is a percentage-based spacing relative to the screen&#8217;s size.<\/p>\n<h2>What the Hack?!<\/h2>\n<p>This has been a long standing issue in the Xcode \/ Auto Layout world. The community has resolved it using one of two techniques:<\/p>\n<ol>\n<li>Programmatically creating layout constraints in code: <em>NSLayoutConstraint(item: myView1,<\/em><br \/>\n<em> attribute: .Bottom,<\/em><br \/>\n<em> relatedBy: .Equal,<\/em><br \/>\n<em> toItem: myView2,<\/em><br \/>\n<em> attribute: .Top,<\/em><br \/>\n<em> multiplier: 1,<\/em><br \/>\n<em> constant: view.bounds.width * 0.05)<\/em><\/li>\n<li>Creating invisible views as spacers with width\/height and specifying a multiplier against the controller view\u00a0size.<\/li>\n<\/ol>\n<p>There must be a better way&#8230;<\/p>\n<h2>Extending NSLayoutConstraint<\/h2>\n<p>Let&#8217;s subclass <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/AppKit\/Reference\/NSLayoutConstraint_Class\/index.html\" target=\"_blank\"><em>NSLayoutConstraint<\/em><\/a> so we can use this new class in Storyboard and specify percentage margins instead. We do this by\u00a0specifying the subclass in the <em>Identity Inspector<\/em>:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_21-1-500x209.png\" alt=\"CapturFiles_21\" width=\"200\" class=\"aligncenter size-medium wp-image-802\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_21-1-500x209.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_21-1.png 522w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Now, we can specify the margin percentage in the new <em>@IBInspectable<\/em> property:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_31-500x189.png\" alt=\"Percentage-based Space\" width=\"500\" height=\"189\" class=\"aligncenter size-medium wp-image-809\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_31-500x189.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_31-768x291.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/CapturFiles_31-1024x387.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<h2>Show Me the Code!<\/h2>\n<p>Our subclass will add a new Storyboard field\u00a0via <em>@IBInspectable<\/em> to expose our &#8220;<em>marginPercent<\/em>&#8221; property. This will be used to specify the margin percentage relative to the screen view and will be done in the &#8220;<em>awakeFromNib<\/em>&#8221; to update the existing constant. See here for the newly created subclass:<\/p>\n<pre class=\"lang:js decode:true\">\/\/\/ Layout constraint to calculate size based on multiplier.\r\nclass PercentLayoutConstraint: NSLayoutConstraint {\r\n\r\n    @IBInspectable var marginPercent: CGFloat = 0\r\n    \r\n    var screenSize: (width: CGFloat, height: CGFloat) {\r\n        return (UIScreen.mainScreen().bounds.width, UIScreen.mainScreen().bounds.height)\r\n    }\r\n    \r\n    override func awakeFromNib() {\r\n        super.awakeFromNib()\r\n        \r\n        guard marginPercent &gt; 0 else { return }\r\n        NSNotificationCenter.defaultCenter().addObserver(self,\r\n            selector: #selector(layoutDidChange),\r\n            name: UIDeviceOrientationDidChangeNotification,\r\n            object: nil)\r\n    }\r\n    \r\n    \/**\r\n     Re-calculate constant based on orientation and percentage.\r\n     *\/\r\n    func layoutDidChange() {\r\n        guard marginPercent &gt; 0 else { return }\r\n        \r\n        switch firstAttribute {\r\n        case .Top, .TopMargin, .Bottom, .BottomMargin:\r\n            constant = screenSize.height * marginPercent\r\n        case .Leading, .LeadingMargin, .Trailing, .TrailingMargin:\r\n            constant = screenSize.width * marginPercent\r\n        default: break\r\n        }\r\n    }\r\n    \r\n    deinit {\r\n        guard marginPercent &gt; 0 else { return }\r\n        NSNotificationCenter.defaultCenter().removeObserver(self)\r\n    }\r\n}<\/pre>\n<p>Actually, in the &#8220;<em>awakeFromNib<\/em>&#8221; I&#8217;m subscribing to the &#8220;<em>UIDeviceOrientationDidChangeNotification<\/em>&#8221; event so any time the layout changes, the new constant is recreated. It will always fire the first time, so this will call the\u00a0&#8220;<em>layoutDidChange<\/em>&#8221; function early on.\u00a0Here is where the main logic happens.<\/p>\n<p>In &#8220;<em>layoutDidChange<\/em>&#8220;, it is taking the specified &#8220;<em>marginPercentage<\/em>&#8221; value from Storyboard and multiplying it against the screen width or height. If the margin percentage is to be calculated for the sides of the view, it will calculate the percentage based on the screen width. Likewise, if the margin percentage is for the top or bottom of the view, it will calculate the percentage based on the screen height.<\/p>\n<p>Finally, it will use this calculated value to stuff in\u00a0the constant property for the layout constraint.\u00a0Since this logic is triggered every time there is an orientation change, it will fire before the Auto Layout kicks in, which is vital it happens before. What this means is that the constant is being overwritten from what was specified in Storyboard before Auto Layout lays out the views.<\/p>\n<p>That&#8217;s where the caveat is&#8230; the constants in the Storyboard are not used at runtime, but instead are overwritten with the percentage based calculation. So it does require some duplicate effort, once to actually layout the views on Storyboard based on points just so you get a sense of what the screen layout looks like, then percentages\u00a0kick in at runtime.<\/p>\n<p>Maybe a small price to pay compared to specifying constraints in code or invisible views. What are your thoughts&#8230; acceptable trade-off, or could\u00a0there be a\u00a0better way?<\/p>\n","link":"https:\/\/basememara.com\/percentage-based-margin-using-autolayout-storyboard\/","comment_count":3,"author":2,"featured_media":803,"terms":[69,53,4,15,71,47],"meta":{"_series_part":"2"},"created":"2016-06-28T12:04:27","modified":"2016-08-14T18:01:50"},{"id":711,"title":"Swift Utility Belt Series: Introduction","slug":"swift-utility-belt-series-part-1","type":"post","excerpt":"Swift is a powerful and fun language. Its protocol-oriented nature allows you to do retroactive modeling and promotes composition over inheritance. In this series of posts, I will share Swift snippets that I've used across projects that I feel are really helpful in rapid development.","content":"<p>Swift is a powerful and fun language. Its\u00a0protocol-oriented nature allows you to do retroactive modeling and\u00a0promotes composition over inheritance via mixins. This results in slim and\u00a0elegant architectures\u00a0that can\u00a0bend\u00a0legacy and modern\u00a0code\u00a0to your will.\u00a0Many features are not unique to Swift, but combined\u00a0with protocol extensions and vibrant pattern matching capabilities, it is indeed a new breed\u00a0of programming.<\/p>\n<p>So I&#8217;ve decided to start a\u00a0series of posts\u00a0where I\u00a0share\u00a0Swift snippets that I&#8217;ve used across projects that I feel are really helpful in rapid development. Thanks to the <a href=\"https:\/\/github.com\/search?utf8=\u2713&amp;q=language%3ASwift&amp;type=Repositories&amp;ref=advsearch&amp;l=Swift&amp;l=\">Swift community<\/a> and <a href=\"http:\/\/stackoverflow.com\/questions\/tagged\/swift\">Stack Overflow<\/a> \ud83d\ude09<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/lets-begin.jpg\" alt=\"lets-begin\" width=\"300\" height=\"300\" class=\"aligncenter size-full wp-image-712\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/lets-begin.jpg 400w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/lets-begin-150x150.jpg 150w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<h2>Collection Extensions<\/h2>\n<p>To start off, I&#8217;ve included a couple of useful extensions for collections. How many times have you needed to get the first item in a collection that matches a particular predicate? Normally you would do this:<\/p>\n<pre class=\"lang:swift decode:true\">items.filter({ $0.name == \"John\" })?.first<\/pre>\n<p>A bit annoying that I have to filter first. Why not make &#8220;<em>first<\/em>&#8221; accept a predicate? Now you can by extending the &#8220;<em>SequenceType<\/em>&#8221; protocol:<\/p>\n<pre class=\"lang:js decode:true\">public extension SequenceType {\r\n    \r\n    \/**\r\n     Returns the first that satisfies the predicate includeElement, or nil. Similar to `filter` but stops when one element is found.\r\n     \r\n     - parameter predicate: Predicate that the Element must satisfy.\r\n     \r\n     - returns: First element that satisfies the predicate, or nil.\r\n     *\/\r\n    public func first(@noescape predicate: Generator.Element -&gt; Bool) -&gt; Generator.Element? {\r\n        for x in self where predicate(x) { return x }\r\n        return nil\r\n    }\r\n}<\/pre>\n<p>Now you can do this:<\/p>\n<pre class=\"lang:swift decode:true \">items.first { $0.name == \"John\" }<\/pre>\n<p>You can follow the same logic to create one for &#8220;<em>last<\/em>&#8221; by making the for-loop go in reverse. Thanks to <a href=\"https:\/\/bigonotetaking.wordpress.com\/2015\/08\/22\/using-higher-order-methods-everywhere\/\">bigonotetaking<\/a> for this one.<\/p>\n<p>While on the subject of collections, grabbing an item from an array can be risky business. If your index is out of range:<\/p>\n<pre class=\"lang:swift decode:true \">item[8] \/\/ Out of range<\/pre>\n<p>&#8230;then ?! Your app crashes from a simple problem. Instead, let&#8217;s leverage the power of optionals. This next extension will add a function to all arrays that returns the item or <em>nil<\/em> if it doesn&#8217;t exist (instead of crashing):<\/p>\n<pre class=\"lang:js decode:true\">public extension Array {\r\n    \/**\r\n     Optional element by indice.\r\n\r\n     - parameter index: Indice of the array element.\r\n\r\n     - returns: An optional element.\r\n     *\/\r\n    public func get(index: Int) -&gt; Element? {\r\n        return self.indices.contains(index)\r\n            ? self[index] : nil\r\n    }\r\n}<\/pre>\n<p>Now you can safely retrieve an item by index:<\/p>\n<pre class=\"lang:js decode:true\">tabBarController.tabBar.items?.get(2)?.selectedImage<\/pre>\n<h2>View Controllers<\/h2>\n<p>In the future, I&#8217;ll keep these posts short and sweet. Since this is an intro to the series, I&#8217;d like to give you a taste of what&#8217;s to come though. So in this next example, I&#8217;ll extend the &#8220;<em>UIViewController<\/em>&#8220;.<\/p>\n<p>How many times have you needed to display an alert message, but dreaded the thought of the amount of verbose code Apple requires you to write:<\/p>\n<pre class=\"lang:swift decode:true\">let alert = UIAlertController(title: \"My Title\", message: \"This is my message.\", preferredStyle: .Alert)\r\nalert.addAction(UIAlertAction(title: \"OK\", style: .Default) {\r\n    alert in\r\n    print(\"OK tapped\")\r\n}\r\nself.presentViewController(alert, animated: true, completion: nil)<\/pre>\n<p>This has irritated me long enough so\u00a0I created an extension for it with a rich set of optional parameters:<\/p>\n<pre class=\"lang:js decode:true\">public extension UIViewController {\r\n    \r\n    \/**\r\n     Display an alert action in a convenient way.\r\n\r\n     - parameter message:           Body of the alert.\r\n     - parameter title:             Title of the alert.\r\n     - parameter buttonTitle:       Text for the button.\r\n     - parameter additionalActions: Array of alert actions.\r\n     - parameter handler:           Call back handler when main action tapped.\r\n     *\/\r\n    public func alert(title: String,\r\n        message: String? = nil,\r\n        buttonTitle: String = \"OK\",\r\n        additionalActions: [UIAlertAction]? = nil,\r\n        preferredStyle: UIAlertControllerStyle = .Alert,\r\n        includeCancelAction: Bool = false,\r\n        handler: (() -&gt; Void)? = nil) {\r\n            let alertController = UIAlertController(\r\n                title: title,\r\n                message: message,\r\n                preferredStyle: preferredStyle\r\n            )\r\n        \r\n            if includeCancelAction {\r\n                alertController.addAction(UIAlertAction(title: \"Cancel\", style: .Cancel, handler: nil))\r\n            }\r\n            \r\n            if let additionalActions = additionalActions {\r\n                additionalActions.forEach { item in\r\n                    alertController.addAction(item)\r\n                }\r\n            }\r\n            \r\n            alertController.addAction(UIAlertAction(title: buttonTitle) { handler?() })\r\n            \r\n            presentViewController(alertController, animated: true, completion: nil)\r\n    }\r\n}\r\n\r\npublic extension UIAlertAction {\r\n    public convenience init(title: String, handler: (() -&gt; Void)) {\r\n        self.init(title: title, style: .Default) { _ in\r\n            handler()\r\n        }\r\n    }   \r\n}<\/pre>\n<p>Now you can simply do this:<\/p>\n<pre class=\"lang:swift decode:true\">self.alert(\"My Title\", message: \"This is my message.\") {\r\n    print(\"OK tapped\")\r\n}\r\n\r\n\/\/ or even\r\nalert(\"This is my message\")<\/pre>\n<p>Sweet, huh? Thanks JavaScript \ud83d\ude09<\/p>\n<p>You can even take this concept to the &#8220;<em>WKInterfaceController<\/em>&#8221; on\u00a0<em>watchOS<\/em>:<\/p>\n<pre class=\"lang:swift decode:true \">public extension WKInterfaceController {\r\n    \r\n    public func alert(title: String,\r\n        message: String? = nil,\r\n        buttonTitle: String = \"OK\",\r\n        alertControllerStyle: WKAlertControllerStyle = .Alert,\r\n        additionalActions: [WKAlertAction]? = nil,\r\n        includeCancelAction: Bool = false,\r\n        cancelHandler: (() -&gt; Void)? = nil,\r\n        handler: (() -&gt; Void)? = nil) {\r\n            var actions = [WKAlertAction(\r\n                title: buttonTitle,\r\n                style: .Default) {\r\n                    handler?()\r\n                }]\r\n            \r\n            if includeCancelAction {\r\n                actions.append(WKAlertAction(\r\n                    title: \"Cancel\",\r\n                    style: .Cancel) {\r\n                        cancelHandler?()\r\n                    })\r\n            }\r\n            \r\n            \/\/ Add additional actions if applicable\r\n            if let additionalActions = additionalActions\r\n                where !additionalActions.isEmpty {\r\n                    if alertControllerStyle != .SideBySideButtonsAlert {\r\n                        actions += additionalActions\r\n                    } else if actions.count &lt; 2 {\r\n                        \/\/ Only two actions are needed for side by side alert\r\n                        actions.append(additionalActions.first!)\r\n                    }\r\n            }\r\n            \r\n            presentAlertControllerWithTitle(title,\r\n                message: message,\r\n                preferredStyle: alertControllerStyle,\r\n                actions: actions)\r\n    }\r\n    \r\n}<\/pre>\n<p>It&#8217;s much more interesting on the watch because the &#8220;<em>alertControllerStyle<\/em>&#8221; produces vastly different alerts, all wrapped in the same extension with a simple <em>enum<\/em> parameter.<\/p>\n<h2>Conclusion<\/h2>\n<p>As you can see with the collection samples, extending protocols\u00a0is far reaching and makes them magically show up in code everywhere. You can even apply pattern matching on the extensions to zero in on what kind of types they should be applied to instead of a blanket approach. This produces a clean and intendful API and what really sets Swift apart from other languages.\u00a0I hope you enjoyed these\u00a0goodies and you have an idea of what&#8217;s to come. Feel free to share your own too!<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/swift-utility-belt-series-part-1\/","comment_count":0,"author":2,"featured_media":713,"terms":[53,50,55,71,49],"meta":{"_series_part":"1"},"created":"2016-05-04T16:01:54","modified":"2016-08-14T17:57:20"},{"id":783,"title":"Common Initializer Patterns in Swift","slug":"common-initializer-patterns-swift","type":"post","excerpt":"Swift initialization rules are there for very good reasons, but sometimes it can make things tedious. In this post, I will show how to avoid duplicating code across initializers while still obey Swift initialization rules. This pattern uses static functions, tuples, and typealiasing.","content":"<p>Swift has a very well thought-out initializer system in place. With options such as designated and convenience initializers, one must ensure all properties have values\u00a0since\u00a0the compiler will make sure of it. Take a look at my <a href=\"http:\/\/basememara.com\/swift-class-inheritance\/\">other post for more details<\/a>.<\/p>\n<p>The initialization rules are there for very good reasons, but sometimes it can make things tedious. For example, in the &#8220;<em>UIViewController<\/em>&#8221; class, there are 2 initializers you must handle since the view controller\u00a0can be instantiated programmatically or through the storyboard. What this means is redundant code will be present like this:<\/p>\n<pre class=\"lang:swift decode:true\">class SomeViewController: UIViewController {\r\n    private let videoPlayer: AVPlayer\r\n    private let videoPlayerLayer: AVPlayerLayer\r\n    \r\n    override init(nibName: String?, bundle nibBundle: NSBundle?) {\r\n        videoPlayer = AVPlayer(URL: NSURL(fileReferenceLiteral: \"movie.mov\"))\r\n        videoPlayerLayer = AVPlayerLayer(player: videoPlayer)\r\n        \r\n        super.init(nibName: nibName, bundle: nibBundle)\r\n    }\r\n    \r\n    required init?(coder decoder: NSCoder) {\r\n        videoPlayer = AVPlayer(URL: NSURL(fileReferenceLiteral: \"movie.mov\"))\r\n        videoPlayerLayer = AVPlayerLayer(player: videoPlayer)\r\n        \r\n        super.init(coder: decoder)\r\n    }\r\n}<\/pre>\n<p>The compiler is requiring me to declare values for &#8220;<em>videoPlayer<\/em>&#8221; and &#8220;<em>videoPlayerLayer<\/em>&#8221; before calling &#8220;<em>super.init<\/em>&#8220;. It&#8217;s happening in two initializers. This is just a simple example, but you can imagine how the repeated code can get out of hand with more complex initialization needs.<\/p>\n<p>Your first thought may be: why not wrap it in a function and call the function from both initializers. Nope. Can&#8217;t do that because you cannot reference &#8220;<em>self<\/em>&#8221; for the method call before calling &#8220;<em>super.init<\/em>&#8220;, and you can&#8217;t call the method\u00a0after initialization either until you&#8217;ve initialized all properties &#8211; catch 22:<\/p>\n<pre class=\"lang:swift decode:true\">class SomeViewController: UIViewController {\r\n    private let videoPlayer: AVPlayer\r\n    private let videoPlayerLayer: AVPlayerLayer\r\n    \r\n    override init(nibName: String?, bundle nibBundle: NSBundle?) {\r\n        \/\/ ERROR: Cannot use \"self\" before initialization,\r\n        \/\/ but can't use method after initialization until\r\n        \/\/ all properties declared - catch 22\r\n        commonInit()\r\n        \r\n        super.init(nibName: nibName, bundle: nibBundle)\r\n    }\r\n    \r\n    required init?(coder decoder: NSCoder) {\r\n        \/\/ ERROR: Cannot use \"self\" before initialization,\r\n        \/\/ but can't use method after initialization until\r\n        \/\/ all properties declared - catch 22\r\n        commonInit()\r\n        \r\n        super.init(coder: decoder)\r\n    }\r\n    \r\n    func commonInit() {\r\n        videoPlayer = AVPlayer(URL: NSURL(fileReferenceLiteral: \"movie.mov\"))\r\n        videoPlayerLayer = AVPlayerLayer(player: videoPlayer)\r\n    }\r\n}<\/pre>\n<p>So on the <a href=\"https:\/\/github.com\/apple\/swift-evolution\" target=\"_blank\">swift-evolution<\/a> mailing list, I was trying to propose a new &#8220;<em>defer init<\/em>&#8221; keyword for this dilemma, something like this:<\/p>\n<pre class=\"lang:swift decode:true\">class SomeViewController: UIViewController {\r\n    private let videoPlayer: AVPlayer\r\n    private let videoPlayerLayer: AVPlayerLayer\r\n    \r\n    override init(nibName: String?, bundle nibBundle: NSBundle?) {\r\n        super.init(nibName: nibName, bundle: nibBundle)\r\n    }\r\n    \r\n    required init?(coder decoder: NSCoder) {\r\n        super.init(coder: decoder)\r\n    }\r\n   \r\n    defer init() { \/\/ New proposed keyword\r\n        videoPlayer = AVPlayer(URL: NSURL(fileReferenceLiteral: \"movie.mov\"))\r\n        videoPlayerLayer = AVPlayerLayer(player: player)\r\n    }\r\n}<\/pre>\n<p>My thought was this\u00a0would piggy-back off the &#8220;<em>defer<\/em>&#8221; keyword concept used for\u00a0functions. However, someone chimed in and said &#8220;<em>defer init<\/em>&#8221; gives the wrong idea because it makes you think this new initialization keyword would be called after instead of before the super initializers, which I totally agree with so I dropped the idea.<\/p>\n<p>Then something amazing happened. Someone else chimed and said this is how they\u00a0do it:<\/p>\n<pre class=\"lang:swift decode:true \">class SomeViewController: UIViewController {\r\n\r\n    private typealias My = SomeViewController\r\n    \r\n    private let videoPlayer: AVPlayer\r\n    private let videoPlayerLayer: AVPlayerLayer\r\n    \r\n    override init(nibName: String?, bundle nibBundle: NSBundle?) {\r\n        (videoPlayer, videoPlayerLayer) = My.commonInit()\r\n\r\n        super.init(nibName: nibName, bundle: nibBundle)\r\n    }\r\n    \r\n    required init?(coder decoder: NSCoder) {\r\n        (videoPlayer, videoPlayerLayer) = My.commonInit()\r\n\r\n        super.init(coder: decoder)\r\n    }\r\n    \r\n    private static func commonInit() -&gt; (AVPlayer, AVPlayerLayer) {\r\n        let player = AVPlayer(URL: NSURL(fileReferenceLiteral: \"movie.mov\"))\r\n        let layer = AVPlayerLayer(player: player)\r\n        \r\n        return (player,layer)\r\n    }\r\n}<\/pre>\n<p>Wow, nice! Solves the redundant code problem while still abiding by\u00a0the initialization rules. It&#8217;s using a static function to initialize the properties, which indeed can be called before the class is initialized (since it&#8217;s static and not using self).<\/p>\n<p>Secondly, it&#8217;s returning a tuple to initialize multiple properties at once. That&#8217;s cool too! And for the sugar on top, it&#8217;s using a &#8220;<em>typealias<\/em>&#8221; like &#8220;<em>My<\/em>&#8221; or &#8220;<em>I<\/em>&#8221; to keep the static calls short.<\/p>\n<p>This is just one of the many examples of why Swift is such a beautiful language, and also has a remarkable community to go with it. I encourage you to join the <a href=\"https:\/\/lists.swift.org\/mailman\/listinfo\/swift-evolution\" target=\"_blank\">swift-evolution mailing list<\/a> to contribute to the future course of Swift while learning new things from the community.<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n<p><em>*Note:\u00a0In case you&#8217;re interested, here&#8217;s the <a href=\"https:\/\/lists.swift.org\/pipermail\/swift-evolution\/Week-of-Mon-20160425\/016019.html\" target=\"_blank\">thread mentioned here<\/a>\u00a0to see how it played out.<\/em><\/p>\n","link":"https:\/\/basememara.com\/common-initializer-patterns-swift\/","comment_count":11,"author":2,"featured_media":784,"terms":[50,55],"meta":{"_series_part":""},"created":"2016-05-28T04:44:31","modified":"2016-05-30T15:21:38"},{"id":483,"title":"Creating Notifications from WatchKit in Swift","slug":"creating-notifications-from-watchkit-in-swift","type":"post","excerpt":"One of the limitations of WatchKit is being able to schedule notifications. This must be done in the iOS target since the notifications architecture resides in the iPhone, not the Apple Watch. In this post, I would like to show you to get around this and get WatchKit to schedule notifications on the iPhone.","content":"<p>There are several limitations in <a href=\"https:\/\/developer.apple.com\/watchkit\/\" target=\"_blank\">WatchKit<\/a> due to it being dependent on an\u00a0iPhone device. One of\u00a0these limitations is creating notifications from WatchKit because of the context of <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UIApplication_Class\/\" target=\"_blank\">UIApplication<\/a> in WatchKit. In WatchKit, <em>UIApplication<\/em> is the Apple Watch device, which does not handle notifications. The notifications architecture resides in the iPhone, not the Apple Watch. In this post, I would like to show you how to get around this and\u00a0get WatchKit to schedule notifications on the iPhone.<\/p>\n<h2>Show Me the Code!!<\/h2>\n<p>First, you must register the notification actions and settings in the <em>AppDelegate<\/em> of the iPhone like you normally would:<\/p>\n<pre class=\"lang:swift decode:true\">class AppDelegate: UIResponder, UIApplicationDelegate { \/\/ AppDelegate.swift\r\n  func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool {\r\n    \/\/ Notification actions\r\n    var snoozeAction = UIMutableUserNotificationAction()\r\n    snoozeAction.identifier = \"snoozeAction\"\r\n    snoozeAction.title = \"Snooze\"\r\n    snoozeAction.activationMode = .Background\r\n    snoozeAction.destructive = false\r\n    snoozeAction.authenticationRequired = false\r\n        \r\n    \/\/ Notification category\r\n    var mainCategory = UIMutableUserNotificationCategory()\r\n    mainCategory.identifier = \"mainCategory\"\r\n            \r\n    let defaultActions = [snoozeAction]\r\n    let minimalActions = [snoozeAction]\r\n            \r\n    mainCategory.setActions(defaultActions, forContext: .Default)\r\n    mainCategory.setActions(minimalActions, forContext: .Minimal)\r\n            \r\n    \/\/ Configure notifications\r\n    let notificationSettings = UIUserNotificationSettings(\r\n      forTypes: .Alert | .Badge | .Sound,\r\n      categories: NSSet(objects: mainCategory) as Set&lt;NSObject&gt;)\r\n    \r\n    \/\/ Register notifications\r\n    application.sharedApplication().registerUserNotificationSettings(notificationSettings)\r\n        \r\n    return true\r\n  }\r\n}<\/pre>\n<p>Here&#8217;s the tricky part. Normally you would schedule the notification like below, which you would probably try\u00a0in the main interface controller of the Apple Watch extension:<\/p>\n<pre class=\"lang:swift decode:true\">override func awakeWithContext(context: AnyObject?) {\r\n  var notification = UILocalNotification()\r\n  notification.category = \"mainCategory\"\r\n  notification.alertTitle = \"My title\"\r\n  notification.alertBody = \"My scheduling text\"\r\n  notification.fireDate = NSDate(timeIntervalSinceNow: 60)\r\n  notification.applicationIconBadgeNumber = 1\r\n  notification.soundName = UILocalNotificationDefaultSoundName\r\n            \r\n  UIApplication.sharedApplication().scheduleLocalNotification(notification)\r\n}<\/pre>\n<p>This is where you will discover the issue. <em>UIApplication.sharedApplication()<\/em>\u00a0is referring to the Apple Watch. Unfortunately, Apple Watch is so dependent on the iPhone that even notifications are registered, scheduled, and triggered from the iPhone. So doing <em>&#8220;UIApplication.sharedApplication().scheduleLocalNotification(notification)&#8221;<\/em> is nonexistent on Apple Watch. You do not even get any kind of error;\u00a0it just silently passes through without any indication of an issue.<\/p>\n<h2>What the Hack?<\/h2>\n<p>Sometimes you need to schedule a notification from the Apple Watch since some kind of interaction happened there, or your app is primarily a watch app with maybe a few configuration screens on the iPhone.\u00a0To get around the limitation, you must get the Apple Watch to communicate to the iPhone to schedule the notification.\u00a0Thankfully Apple added <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/WatchKit\/Reference\/WKInterfaceController_class\/#\/\/apple_ref\/occ\/clm\/WKInterfaceController\/openParentApplication:reply:\" target=\"_blank\">WKInterfaceController.openParentApplication<\/a> to the WatchKit API at the last minute after a lot of commotion in the dev community. Here&#8217;s how to use it:<\/p>\n<pre class=\"lang:swift decode:true\">override func awakeWithContext(context: AnyObject?) {\r\n  var userInfo = [\r\n    \"scheduleLocalNotification\": true,\r\n    \"category\": \"someCategory\"\r\n    \"alertTitle\": \"My title\"\r\n    \"alertBody\": \"My scheduling text\"\r\n    \"fireDate\": NSDate(timeIntervalSinceNow: 60)\r\n    \"applicationIconBadgeNumber\": 1\r\n    \"soundName\": UILocalNotificationDefaultSoundName\r\n  ]\r\n\r\n  \/\/ Register notifications in iOS\r\n  WKInterfaceController.openParentApplication(userInfo) {\r\n    (replyInfo, error) -&gt; Void in\r\n    \/\/ Callback here if needed                \r\n  }\r\n}<\/pre>\n<p>This will trigger an event in the iPhone&#8217;s <em>AppDelegate<\/em>, then you can do whatever you like. You get to pass data using the <em>&#8220;userInfo&#8221;<\/em> parameter and even a nice, handy callback if needed. This is what you would do on the iPhone&#8217;s <em>AppDelegate<\/em>:<\/p>\n<pre class=\"lang:swift decode:true\">func application(application: UIApplication, handleWatchKitExtensionRequest userInfo: [NSObject : AnyObject]?, reply: (([NSObject : AnyObject]!) -&gt; Void)!) {\r\n  if let value: AnyObject = userInfo?[\"scheduleLocalNotification\"] where value as! Bool {\r\n    var notification = UILocalNotification()\r\n    notification.category = userInfo?[\"category\"] as? String\r\n    notification.alertTitle = userInfo?[\"alertTitle\"] as! String\r\n    notification.alertBody = userInfo?[\"alertBody\"] as? String\r\n    notification.fireDate = userInfo?[\"fireDate\"] as? NSDate\r\n    if let badge: AnyObject = userInfo?[\"applicationIconBadgeNumber\"] {\r\n      notification.applicationIconBadgeNumber = badge as! Int\r\n    }\r\n    notification.soundName = userInfo?[\"soundName\"] as? String\r\n            \r\n    UIApplication.sharedApplication().scheduleLocalNotification(notification)\r\n  }\r\n}<\/pre>\n<p>This new\u00a0<em>handleWatchKitExtensionRequest<\/em>\u00a0function gets triggered by WatchKit on demand, as we did in the <em>awakeWithContext\u00a0<\/em>of the Apple Watch. Then in the iPhone we are just reading the <em>userInfo<\/em> parameter for constructing the <em>UILocalNotification<\/em> object and finally letting the iPhone schedule it itself using it&#8217;s own <em>UIApplication.sharedApplication()<\/em> context. There you have it!<\/p>\n<p><strong>UPDATE: In watchOS 2+, use <a href=\"https:\/\/developer.apple.com\/library\/watchos\/documentation\/WatchConnectivity\/Reference\/WatchConnectivity_framework\/\">WatchConnectivity<\/a>\u00a0to communicate with iOS.<\/strong><\/p>\n<p>In watchOS 2+:<\/p>\n<pre class=\"lang:swift decode:true\">do {\r\n    try WCSession.defaultSession().updateApplicationContext(userInfo)\r\n} catch {\r\n    \/\/ Log error\r\n}<\/pre>\n<p>In iOS&#8217;s AppDelegate:<\/p>\n<pre class=\"lang:swift decode:true \">func session(session: WCSession, didReceiveApplicationContext applicationContext: [String : AnyObject]) {\r\n  if let value = applicationContext[\"scheduleLocalNotification\"] as? Bool {\r\n    var notification = UILocalNotification()\r\n    notification.category = applicationContext[\"category\"] as? String\r\n    notification.alertTitle = applicationContext[\"alertTitle\"] as! String\r\n    notification.alertBody = applicationContext[\"alertBody\"] as? String\r\n    notification.fireDate = applicationContext[\"fireDate\"] as? NSDate\r\n    if let badge = applicationContext[\"applicationIconBadgeNumber\"] as? Int {\r\n      notification.applicationIconBadgeNumber = badge\r\n    }\r\n    notification.soundName = userInfo?[\"soundName\"] as? String\r\n            \r\n    UIApplication.sharedApplication().scheduleLocalNotification(notification)\r\n  }\r\n}<\/pre>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/creating-notifications-from-watchkit-in-swift\/","comment_count":2,"author":2,"featured_media":485,"terms":[53,4,50,55,49],"meta":{"_series_part":""},"created":"2015-05-19T12:00:05","modified":"2016-05-21T20:52:53"},{"id":643,"title":"Getting Started with Swift Class Inheritance","slug":"swift-class-inheritance","type":"post","excerpt":"Swift has a unique and elegant class inheritance system. In this post, I'd like to shed light on all the inheritance goodies in Swift, such as designated, convenience, failable, automatic, and required initializers. Not only are these powerful concepts, but they also enforce safe and intentful code.","content":"<p>Swift has a unique class inheritance system that is both powerful and elegant. Normally with other languages, class inheritance is easy to pick up and just a matter of syntax. However, Swift provides an elaborate\u00a0set of inheritance concepts\u00a0that doesn&#8217;t exist in many other languages. It\u00a0is almost impossible to just <em>&#8220;pick up&#8221;<\/em> without reading the <a href=\"https:\/\/itunes.apple.com\/us\/book\/the-swift-programming-language\/id881256329?mt=11\" target=\"_blank\">details in the documentation<\/a>. So in this post, I&#8217;d like to shed light on all the inheritance goodies in Swift.<\/p>\n<h2>Getting Started<\/h2>\n<p>For due diligence, let&#8217;s look at a simple class inheritance example in Swift:<\/p>\n<pre class=\"lang:swift decode:true\">class Vehicle {\r\n    var passengerCount = 0\r\n    var creationDate: NSDate\r\n\r\n    init() {\r\n        creationDate = NSDate()\r\n    }\r\n}\r\n\r\nclass Ship: Vehicle {\r\n    var hasSails: Bool\r\n\r\n    override init() {\r\n        hasSails = false\r\n\r\n        super.init()\r\n    }\r\n}<\/pre>\n<p>Nothing earth-shattering here&#8230; typical class inheritance as any other language with different syntax. It has a constructor called <em>&#8220;init&#8221;<\/em>, base class implementations can have an\u00a0<em>&#8220;override&#8221;<\/em>, and the base class can be called using the <em>&#8220;super&#8221;<\/em> keyword. However, notice that all properties have to have a value, whether it be in the property declaration or in the initializers (I&#8217;ll talk more about this in a bit).<\/p>\n<p>If this is all there was to class inheritance in Swift, it would be sufficient. Swift doesn&#8217;t stop there though. There are several more inheritance concepts that Swift provides at your disposal.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/02\/class-inheritance-beyond.jpg\" alt=\"class-inheritance-beyond\" width=\"400\" height=\"400\" class=\"aligncenter size-full wp-image-645\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/02\/class-inheritance-beyond.jpg 400w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/02\/class-inheritance-beyond-150x150.jpg 150w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><\/p>\n<h2>Inheritance Lifecycle<\/h2>\n<p>First, let&#8217;s understand that\u00a0the inheritance process in Swift is actually split up into two phases:<\/p>\n<ol>\n<li>In the <span style=\"text-decoration: underline;\"><em>first phase<\/em><\/span>, all class\u00a0properties in the inheritance chain are assigned an initial value. This can be\u00a0done in the property\u00a0declaration or class\u00a0initializers.<\/li>\n<li>Once all properties have an initial value, the <span style=\"text-decoration: underline;\"><em>second phase<\/em><\/span> begins. This phase gives\u00a0each class an\u00a0opportunity to update\u00a0its properties or instance further.<\/li>\n<\/ol>\n<p>The\u00a0two-phase initialization prevents property values from being accessed before they are initialized, and prevents property values from being\u00a0unintentionally\u00a0overwritten.<\/p>\n<h2>Compiler Safety-Checks<\/h2>\n<p>Trying to keep track over which properties have been set to fulfill the phase at the right time would be daunting for large classes. So Swift&#8217;s compiler performs four helpful safety-checks to make sure that two-phase initialization is completed without error.<\/p>\n<ol>\n<li>A designated initializer (or constructor that calls a super constructor) must ensure that all of the properties introduced by its class are initialized before it delegates up to a superclass initializer.<\/li>\n<li>A designated initializer must delegate up to a superclass initializer before assigning a value to an inherited property. If it doesn\u2019t, the new value the designated initializer assigns will be overwritten by the superclass as part of its own initialization.<\/li>\n<li>A convenience initializer (or constructor\u00a0that calls one of its own\u00a0constructors) must delegate to another initializer before assigning a value to <em>any<\/em> property. If it doesn\u2019t, the new value can\u00a0be overwritten by initializer it delegates to.<\/li>\n<li>An initializer cannot call any instance methods, read the values of any instance properties, or refer to self as a value until after the first phase of initialization is complete.<\/li>\n<\/ol>\n<h2>Designated and Convenience Initializers?<\/h2>\n<p>The terms\u00a0<em>&#8220;designated and convenience initializers&#8221;<\/em>\u00a0were briefly mentioned in the last section, but I&#8217;d like to go more in depth about what these kinds of constructors actually mean.<\/p>\n<ul>\n<li><em>Designated initializer<\/em>\u00a0are constructors that fully initializes all properties introduced by that class and calls a superclass initializer to continue the initialization process. Every class must have at least one designated initializer. If none are\u00a0implemented, then <em>&#8220;init()&#8221;<\/em> is implicitly created.<\/li>\n<li><em>Convenience initializer<\/em>\u00a0call a designated initializer from the same class. This allows you to leverage\u00a0other initializers in your class so you don&#8217;t have to set\u00a0values for all the class properties again, but would like to extend or modify the properties or instance.<\/li>\n<\/ul>\n<p>Here&#8217;s an example of the code in action:<\/p>\n<pre class=\"lang:swift decode:true\">class Ship: Vehicle {\r\n    var hasSails: Bool\r\n\r\n    override init() {\r\n        hasSails = false\r\n\r\n        super.init()\r\n    }\r\n\r\n    convenience init(passengerCount: Int) {\r\n        self.init()\r\n        \r\n        self.passengerCount = passengerCount\r\n    }\r\n}<\/pre>\n<p>In the code above, I&#8217;ve added a new initializer that accepts a parameter to update the <em>&#8220;passengerCount&#8221;<\/em> property during initialization. It immediately delegates across to another initializer (using <em>self.init<\/em> not <em>super.init<\/em>). It&#8217;s <em>&#8220;convenient&#8221;<\/em> because it\u00a0effectively passes on the burden to another\u00a0initializer for\u00a0setting properties as required by one of the compiler safety-checks. The <em>&#8220;convenience initializer&#8221;<\/em> is not required to do anything, but allows you to extend existing initializers.<\/p>\n<h2>Automatic Initializers<\/h2>\n<p>A major difference between Swift inheritance and other languages is that initializers are <em>NOT<\/em> inherited by default. You have to explicitly override initializers in the subclass using the <em>&#8220;override&#8221;<\/em> keyword in front of the initializer. This may seem tedious, but there are certain situation where initializers are inherited automatically:<\/p>\n<ol>\n<li>If a\u00a0subclass doesn\u2019t define any designated initializers, it automatically inherits all of its superclass designated initializers.<\/li>\n<li>If a\u00a0subclass provides an implementation of all of its superclass designated initializers\u2014either by inheriting them as per the rule above, or by providing a custom implementation as part of its definition\u2014then it automatically inherits all of the superclass convenience initializers as well.<\/li>\n<\/ol>\n<p>Let&#8217;s look at an example. The subclass in the following example inherits all of its superclass initializers:<\/p>\n<pre class=\"lang:swift decode:true\">class Vehicle {\r\n    var hasEngine = true\r\n    var creationDate: NSDate\r\n\r\n    init() {\r\n        creationDate = NSDate()\r\n    }\r\n\r\n    init(hasEngine: Bool) {\r\n        creationDate = NSDate()\r\n        self.hasEngine = hasEngine\r\n    }\r\n}\r\n\r\nclass Ship: Vehicle {\r\n    var hasSails = false\r\n}\r\n\r\nvar myShip = Ship(hasEngine: false)<\/pre>\n<p>Notice there are no initializers in <em>&#8220;Ship&#8221;<\/em>. This allows all initializers from the superclass to be inherited automatically without having to explicitly override them.<\/p>\n<p>In this next example, the initializers are not automatically inherited anymore:<\/p>\n<pre class=\"lang:swift decode:true\">class Vehicle {\r\n    var hasEngine = true\r\n    var creationDate: NSDate\r\n\r\n    init() {\r\n        creationDate = NSDate()\r\n    }\r\n\r\n    init(hasEngine: Bool) {\r\n        creationDate = NSDate()\r\n        self.hasEngine = hasEngine\r\n    }\r\n}\r\n\r\nclass Ship: Vehicle {\r\n    var hasSails = false\r\n\r\n    override init() {\r\n        super.init()\r\n    }\r\n}\r\n\r\nvar myShip = Ship() \/\/ OK\r\nvar myShip2 = Ship(hasEngine: false) \/\/ DOES NOT WORK!!<\/pre>\n<p>I&#8217;ve added an <em>&#8220;init&#8221;<\/em> initializer in the subclass. Now all other initializers are no longer inherited, so <em>&#8220;Ship(hasEngine: false)&#8221;<\/em>\u00a0cannot be called\u00a0and it will give a compile error.<\/p>\n<p>However, adding only convenient initializers will not break the rule and will still allow all initializers from the superclass to be automatically inherited. The rules say that you must either have no or all <span style=\"text-decoration: underline;\"><em>designated<\/em><\/span> initializers defined in your subclass for automatic initializer inheritance to kick in. Here&#8217;s an example where initializers from the subclass would still be inherited:<\/p>\n<pre class=\"lang:swift decode:true\">class Vehicle {\r\n    var hasEngine = true\r\n    var creationDate: NSDate\r\n    \r\n    init() {\r\n        creationDate = NSDate()\r\n    }\r\n    \r\n    init(hasEngine: Bool) {\r\n        creationDate = NSDate()\r\n        self.hasEngine = hasEngine\r\n    }\r\n}\r\n\r\nclass Ship: Vehicle {\r\n    var hasSails = false\r\n    \r\n    convenience init(creationDate: NSDate) {\r\n        self.init()\r\n        self.creationDate = creationDate\r\n    }\r\n}\r\n\r\nShip(hasEngine: false)<\/pre>\n<p>I just added a <em>&#8220;convenience initializer&#8221;<\/em>\u00a0to the <em>&#8220;Ship&#8221;<\/em> class. This still satisfies the automatic initializer inheritance rules and allows me to call the superclass initializer with the <em>&#8220;hasEngine&#8221;<\/em> parameter for\u00a0the\u00a0subclass initialization.<\/p>\n<h2>Failable Initializers<\/h2>\n<p>This is a very handy type of initializer. Sometimes one\u00a0would like to return a\u00a0<em>&#8220;nil&#8221;<\/em>\u00a0instance if some conditions are not met. In other languages, I&#8217;d be forced to create a static\u00a0instance factory, such as <em>Vehicle.createInstance()<\/em>, that would either return the instance or a null. This works, but Swift has a native way of handling this called <em>failable initializers<\/em>.<\/p>\n<p>The syntax would be to add a question mark (?) after the initializer name to indicate\u00a0that this particular initializer can return a <em>&#8220;nil&#8221;<\/em>:<\/p>\n<pre class=\"lang:swift decode:true\">class Ship: Vehicle {\r\n    var hasSails = false\r\n    \r\n    init?(serialNumber: String?) {\r\n        super.init()\r\n        \r\n        \/\/ Conditions must be met or fail instance\r\n        guard let s = serialNumber where !s.isEmpty else {\r\n            return nil\r\n        }\r\n\r\n        self.serialNumber = s\r\n    }\r\n}\r\n\r\nvar myShip = Ship(serialNumber: \"\") \/\/ Returns nil<\/pre>\n<p>In the above example, the initializer <em>&#8220;init?(serialNumber: String?)&#8221;<\/em> has a <em>guard<\/em> statement that checks whether <em>serialNumber<\/em> is nil or empty. If it is, it will return nil for the entire instance. Note that a\u00a0failable initializer creates an optional value of the type it initializes.<\/p>\n<h2>Required Initializers<\/h2>\n<p>Required initializers indicate that every subclass of the class must implement that initializer. For example:<\/p>\n<pre class=\"lang:swift decode:true\">class Vehicle {\r\n    var manufacturer = \"\"\r\n    var creationDate: NSDate\r\n    \r\n    init() {\r\n        creationDate = NSDate()\r\n    }\r\n    \r\n    required init(manufacturer: String) {\r\n        self.manufacturer = manufacturer\r\n        creationDate = NSDate()\r\n    }\r\n}\r\n\r\nclass Ship: Vehicle {\r\n    var hasSails: Bool\r\n    \r\n    override init() {\r\n        hasSails = false\r\n        super.init()\r\n    }\r\n    \r\n    required init(manufacturer: String) {\r\n        hasSails = false\r\n        super.init(manufacturer: manufacturer)\r\n    }\r\n}<\/pre>\n<p>The subclass is required to implement an initializer of\u00a0<em>&#8220;required init(manufacturer: String)&#8221;<\/em>. Note that automatic initializer inheritance rules still apply, so if those rules pass, required initializers are also inherited as well and do not have to be explicitly implemented in those scenarios.<\/p>\n<h2>Deinitializers<\/h2>\n<p>Swift automatically deallocates your instances when they are no longer needed to free up resources. Usually\u00a0you don\u2019t need to do any\u00a0manual clean-up when instances are deallocated. It would be useful if you could though, such as closing a file or caching a user&#8217;s state. Swift has you covered:<\/p>\n<pre class=\"lang:swift decode:true\">class Vehicle {\r\n\r\n    deinit {\r\n        print(\"Vehicle: Deinit complete.\")\r\n    }\r\n}<\/pre>\n<p>A\u00a0deinitializer is called immediately before a class instance is deallocated. You cannot\u00a0explicitly call a deinitializer yourself since the system calls it automatically. Deinitializers are also inherited by subclasses, which could\u00a0also implement their own deinitializers (they would be called in sequence until it reaches the root superclass).<\/p>\n<h2>The Big Kahuna<\/h2>\n<p>There are so many rules and conventions in Swift inheritance, enough to make your head spin. So for the grand finale to this post, I&#8217;d like to include a massive code sample that illustrates\u00a0just about all of the inheritance rules in one snippet with comments and a console output, so you can study it, plug it into the Swift playground, and see it play out:<\/p>\n<pre class=\"lang:js decode:true\">import Foundation\r\n\r\n\/*\r\n * Cache some reusable variables\r\n *\/\r\nlet formatter = NSDateFormatter()\r\nformatter.dateFormat = \"yyyy\/MM\/dd\"\r\nfunc someFunc(value: AnyObject) {}\r\n\r\n\/*\r\n * Begin class inheritance\r\n *\/\r\nclass Vehicle {\r\n    var name = \"\"\r\n    var manufacturer = \"\"\r\n    var model = \"\"\r\n    var serialNumber = \"\"\r\n    var photoURL = \"\"\r\n    var maxSpeed = 0\r\n    var hasEngine = true\r\n    var isAutonomous = false\r\n    var passengerCount = 0\r\n    var active = true\r\n    var comments = \"\"\r\n    var creationDate: NSDate\r\n    \r\n    \/\/ Implicit if no other designated initializers\r\n    init() {\r\n        print(\"Vehicle: Init start.\")\r\n        \r\n        \/\/ Safety check 1: Ensure all new properties initialized\r\n        creationDate = NSDate()\r\n        print(\"Vehicle.creationDate (\\(creationDate)) assigned from init.\")\r\n        \r\n        print(\"**All Vehicle properties initialized**\")\r\n        \r\n        print(\"***PHASE 1 COMPLETE***\")\r\n        \r\n        \/\/ Safety check 4: Cannot call any instance methods,\r\n        \/\/ read the values of any instance properties, or\r\n        \/\/ refer to self as a value until after the first\r\n        \/\/ phase of initialization is complete\r\n        print(\"Vehicle.getLocation() (\\(getLocation())) called.\")\r\n        \r\n        print(\"Vehicle: Init complete.\")\r\n    }\r\n    \r\n    required init(manufacturer: String) {\r\n        self.manufacturer = manufacturer\r\n        creationDate = NSDate()\r\n    }\r\n    \r\n    deinit {\r\n        print(\"Vehicle: Deinit complete.\")\r\n    }\r\n    \r\n    func getLocation() -&gt;\r\n        (latitude: Double, longitude: Double, altitude: Double) {\r\n        return (0, 0, 0)\r\n    }\r\n    \r\n    func getSpeed() -&gt; Int {\r\n        return 0\r\n    }\r\n}\r\n\r\nclass Ship: Vehicle {\r\n    var hasSails: Bool\r\n    \r\n    override init() {\r\n        print(\"Ship: Init start.\")\r\n        \r\n        \/\/ Safety check 1: Ensure all new properties initialized\r\n        \/\/ before delegating up to superclass\r\n        hasSails = false\r\n        print(\"Ship.hasSails (\\(hasSails)) assigned from init.\")\r\n        \r\n        print(\"**All Ship properties initialized**\")\r\n        \r\n        super.init()\r\n        \r\n        \/\/ Safety check 2: Delegate up to superclass\r\n        \/\/ before assigning value to inherited properties\r\n        creationDate = formatter.dateFromString(\"2000\/01\/01\")!\r\n        print(\"Ship.creationDate (\\(creationDate)) re-assigned from init.\")\r\n        \r\n        \/\/ Safety check 4: Cannot call any instance methods,\r\n        \/\/ read the values of any instance properties, or\r\n        \/\/ refer to self as a value until after the first\r\n        \/\/ phase of initialization is complete\r\n        print(\"Ship.getNearestDock() (\\(getNearestDock())) called from init.\")\r\n        print(\"Ship.hasEngine (\\(hasEngine)) called from init.\")\r\n        someFunc(self)\r\n        \r\n        print(\"Ship: Init complete.\")\r\n    }\r\n    \r\n    required init(manufacturer: String) {\r\n        \/\/ Safety check 1: Ensure all new properties initialized\r\n        \/\/ before delegating up to superclass\r\n        hasSails = false\r\n        \r\n        super.init(manufacturer: manufacturer)\r\n    }\r\n    \r\n    deinit {\r\n        print(\"Ship: Deinit complete.\")\r\n    }\r\n    \r\n    init(hasEngine: Bool) {\r\n        \/\/ Safety check 1: Ensure all new properties initialized\r\n        \/\/ before delegating up to superclass\r\n        hasSails = false\r\n        \r\n        super.init()\r\n        \r\n        \/\/ Safety check 2: Delegate up to superclass\r\n        \/\/ before assigning value to inherited properties\r\n        self.hasEngine = hasEngine\r\n    }\r\n    \r\n    \/\/ Failable initializer\r\n    init?(serialNumber: String?) {\r\n        \/\/ Safety check 1: Ensure all new properties initialized\r\n        \/\/ before delegating up to superclass\r\n        hasSails = false\r\n        \r\n        super.init()\r\n        \r\n        \/\/ Conditions must be met or fail instance\r\n        guard let s = serialNumber where !s.isEmpty else {\r\n            \/\/ A failable initializer can trigger an initialization failure\r\n            \/\/ only after all stored properties introduced have been set \r\n            \/\/ and any initializer delegation has taken place\r\n            return nil\r\n        }\r\n        \r\n        \/\/ Safety check 2: Delegate up to superclass\r\n        \/\/ before assigning values to inherited properties\r\n        self.serialNumber = s\r\n    }\r\n    \r\n    convenience init(passengerCount: Int) {\r\n        print(\"Ship: Convenience init start.\")\r\n        \r\n        self.init()\r\n        \r\n        \/\/ Safety check 3: Convenience initializer must delegate to\r\n        \/\/ another initializer before assigning values to any properties\r\n        self.passengerCount = passengerCount\r\n        print(\"Ship.passengerCount re-assigned from convenience init.\")\r\n        \r\n        print(\"Ship: Convenience init complete.\")\r\n    }\r\n    \r\n    func getNearestDock() -&gt; (latitude: Double, longitude: Double) {\r\n        return (0, 0)\r\n    }\r\n}\r\n\r\nclass Sailboat: Ship {\r\n    \/\/ Automatic Initializer Inheritance\r\n    \/\/ Rule 2: If subclass provides an implementation of all\r\n    \/\/ of its superclass designated initializers\u2014either by \r\n    \/\/ inheriting them without defining any designated\r\n    \/\/ initializers (as per rule 1), or by providing a custom\r\n    \/\/ implementation as part of its definition\u2014then it automatically\r\n    \/\/ inherits all of the superclass convenience initializers\r\n    \r\n    override init() {\r\n        super.init()\r\n        hasSails = true\r\n    }\r\n    \r\n    required init(manufacturer: String) {\r\n        super.init(manufacturer: manufacturer)\r\n        hasSails = false\r\n    }\r\n    \r\n    \/\/ Uncomment so all designated initializers overriden\r\n    \/\/ which will inherit convenience initializers\r\n    \/*\r\n    override init?(serialNumber: String?) {\r\n        super.init(serialNumber: serialNumber)\r\n    }\r\n    \r\n    \/\/ Notice overriden designated initializer can be\r\n    \/\/ implemented as a convenience initializer\r\n    convenience override init(hasEngine: Bool) {\r\n        self.init()\r\n    \r\n        \/\/ Safety check 3: Convenience initializer must delegate to\r\n        \/\/ another initializer before assigning values to any properties\r\n        self.hasEngine = hasEngine\r\n    }\r\n    *\/\r\n}\r\n\r\nclass Submarine: Ship {\r\n    \/\/ Automatic Initializer Inheritance\r\n    \/\/ Rule 1: If subclass doesn\u2019t define any designated initializers,\r\n    \/\/ it automatically inherits all superclass designated initializers\r\n    convenience init(active: Bool) {\r\n        self.init()\r\n        \r\n        \/\/ Safety check 3: Convenience initializer must delegate to\r\n        \/\/ another initializer before assigning values to any properties\r\n        self.active = active\r\n    }\r\n}\r\n\r\n\/*\r\n * Sample instances\r\n *\/\r\nvar myBoat = Ship(passengerCount: 50)\r\nvar mySailBoat = Sailboat()\r\n\/\/ Only available if all designated initializers overriden\r\n\/\/var mySailBoat2 = Sailboat(hasSails: true)\r\nvar mySubmarine = Submarine()\r\nvar mySubmarine2 = Submarine(passengerCount: 100)\r\nvar mySubmarine3 = Submarine(hasEngine: true)\r\nvar myNilShip = Ship(serialNumber: \"\") \/\/ Should return nil\r\nvar myBoat2 = Ship(serialNumber: \"12345678\")\r\nmyBoat2 = nil \/\/ Deallocate will call deinit<\/pre>\n<p>Here is the console output to the first initialization, `Ship(passengerCount: 50)`. This way, you can trace\u00a0the sequence of events:<\/p>\n<pre class=\"lang:sh decode:true\">Ship: Convenience init start.\r\nShip: Init start.\r\nShip.hasSails (false) assigned from init.\r\n**All Ship properties initialized**\r\nVehicle: Init start.\r\nVehicle.creationDate (2016-02-04 15:54:03 +0000) assigned from init.\r\n**All Vehicle properties initialized**\r\n***PHASE 1 COMPLETE***\r\nVehicle.getLocation() ((0.0, 0.0, 0.0)) called.\r\nVehicle: Init complete.\r\nShip.creationDate (2000-01-01 05:00:00 +0000) re-assigned from init.\r\nShip.getNearestDock() ((0.0, 0.0)) called from init.\r\nShip.hasEngine (true) called from init.\r\nShip: Init complete.\r\nShip.passengerCount re-assigned from convenience init.\r\nShip: Convenience init complete.<\/pre>\n<h2>Conclusion<\/h2>\n<p>Object-oriented programming has been the cornerstone for software architecture for\u00a0decades. Not much has changed in those years, but Swift proved there is still room to introduce unique concepts to class inheritance. Not only are these Swift inheritance tools powerful, but\u00a0they also enforce safe and intentful code. As a bonus, if you do not follow the inheritance rules, then most of the time the compiler will give you an error or warning right away.<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/swift-class-inheritance\/","comment_count":1,"author":2,"featured_media":726,"terms":[50,55],"meta":{"_series_part":""},"created":"2016-02-04T16:57:52","modified":"2016-05-13T13:59:02"},{"id":676,"title":"Protocol Conformance Extensions in Swift","slug":"protocol-conformance-extension-swift","type":"post","excerpt":"Swift is a unique language that has some revolutionary ideas. One of which is protocol conformance extension. This concept allows you to take an existing type and force it to adopt another protocol it never knew it existed before.","content":"<p>Swift is a unique language that has some revolutionary ideas. One of which is <em>protocol conformance extension<\/em>. This concept allows you to take an existing type and\u00a0force it\u00a0to adopt\u00a0another\u00a0protocol it never knew it existed before.<\/p>\n<p>For example, in the below code I am grouping two types together that were previously\u00a0unrelated: <em>&#8220;CLKComplicationTemplateCircularSmallRingText&#8221;<\/em> and &#8220;<em>CLKComplicationTemplateModularSmallRingText&#8221;<\/em>. They neither inherit\u00a0an ancestor nor share a protocol in &#8220;<em>ClockKit&#8217;s&#8221;<\/em> source code, even though they both have a `fillFraction` property:<\/p>\n<pre class=\"lang:swift decode:true\">protocol CLKComplicationTemplateRingable {\r\n    var fillFraction: Float { get set }\r\n}\r\n\r\nextension CLKComplicationTemplateCircularSmallRingText: CLKComplicationTemplateRingable {\r\n\r\n}\r\n\r\nextension CLKComplicationTemplateModularSmallRingText: CLKComplicationTemplateRingable {\r\n\r\n}\r\n\r\nclass ComplicationController: NSObject, CLKComplicationDataSource {\r\n    \r\n    func getPlaceholderTemplateForComplication(complication: CLKComplication, withHandler handler: (CLKComplicationTemplate?) -&gt; Void) {\r\n        var template: CLKComplicationTemplate? = nil\r\n        \r\n        switch complication.family {\r\n        case .CircularSmall:\r\n            let familyTemplate = CLKComplicationTemplateCircularSmallRingText()\r\n            \/\/ Do more stuff\r\n            template = familyTemplate\r\n        case .ModularLarge:\r\n            let familyTemplate = CLKComplicationTemplateModularLargeColumns()\r\n            \/\/ Do more stuff\r\n            template = familyTemplate\r\n        case .ModularSmall:\r\n            let familyTemplate = CLKComplicationTemplateModularSmallRingText()\r\n            \/\/ Do more stuff\r\n            template = familyTemplate\r\n        case .UtilitarianLarge:\r\n            let familyTemplate = CLKComplicationTemplateUtilitarianLargeFlat()\r\n            \/\/ Do more stuff\r\n            template = familyTemplate\r\n        case .UtilitarianSmall:\r\n            let familyTemplate = CLKComplicationTemplateUtilitarianSmallFlat()\r\n            \/\/ Do more stuff\r\n            template = familyTemplate\r\n        }\r\n        \r\n        if var t = template as? CLKComplicationTemplateRingable {\r\n            t.fillFraction = 0.77\r\n        }\r\n        \r\n        handler(template)\r\n    }\r\n    \r\n}<\/pre>\n<p>In the native <em>&#8220;ClockKit&#8221;<\/em> API, these\u00a0two templates strangely did not inherit from a base class. However, I wanted to treat them the same\u00a0because in my world they were similar; they both fill a ring. I simply wanted to update the `fillFraction` property in one go, but I did not want to duplicate code and apply the same logic in two switch cases.<\/p>\n<p>Even though I cannot change the original <em>&#8220;ClockKit&#8221;<\/em> source code myself, I taught\u00a0it new tricks by comforming to my code. First I created\u00a0a protocol, called <em>&#8220;CLKComplicationTemplateRingable&#8221;<\/em> here, then\u00a0extended the types I wanted by\u00a0making them conform to my new protocol. Now throughout my code going forward, <em>&#8220;CLKComplicationTemplateCircularSmallRingText&#8221;<\/em> and <em>&#8220;CLKComplicationTemplateModularSmallRingText&#8221;<\/em> have something in common and can refer to them using my new protocol.<\/p>\n<p>Of course, this is a simplistic example, but the implications of it\u00a0is vast. <em>I&#8217;m changing the DNA of source code that I had\u00a0no control over.<\/em>\u00a0This\u00a0contributes to the wonderful world of <em>Protocol-Oriented Programming!<\/em><\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/protocol-conformance-extension-swift\/","comment_count":3,"author":2,"featured_media":725,"terms":[63,64,62,50,55],"meta":{"_series_part":""},"created":"2016-03-28T10:00:59","modified":"2016-05-13T13:58:15"},{"id":704,"title":"Protocol-Oriented TableView and CollectionView in Swift","slug":"protocol-oriented-tableview-collectionview","type":"post","excerpt":"Working with the UITableView and UICollectionView is verbose and inconvenient; also the API's are inconsistent with each other. In this post, I\u2019d like to reconcile the two API\u2019s and add some sugar to make it more pleasant to work with these commonly used controls.","content":"<p>It&#8217;s no secret that working with the <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UITableView_Class\/\">UITableView<\/a> is verbose and inconvenient. It&#8217;s been around since iOS 2.0 and it feels just as archaic. Then, Apple graced us with the <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UICollectionView_class\/\">UICollectionView<\/a> in iOS 6.0 and it was indeed\u00a0much awaited, but the API&#8217;s were inconsistent with the UITableView and still felt just as irritating. In this post, I&#8217;d like to reconcile the two API&#8217;s and add some sugar to make it more pleasant to work with these commonly\u00a0used controls.<\/p>\n<h2>The\u00a0Table and Collection Family Tree<\/h2>\n<p>The UITableView and UICollectionView share an ancestor: <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UIScrollView_Class\/index.html#\/\/apple_ref\/swift\/cl\/c:objc(cs)UIScrollView\">UIScrollView<\/a>. This is the best relationship Apple decided to give between the two; yippie it scrolls! Instead, I&#8217;d like to take on another perspective; they both are <em>containers of data<\/em>. So the first thing I&#8217;d like to do is create a new protocol called &#8220;<em>DataViewable<\/em>&#8221; and force the table and collection views to conform to it (see my previous post about <a href=\"http:\/\/basememara.com\/protocol-conformance-extension-swift\/\">Protocol Conformance Extensions<\/a>):<\/p>\n<pre class=\"lang:js decode:true\">public protocol DataViewable {\r\n    func reloadData()\r\n}\r\n\r\nextension UITableView: DataViewable {}\r\nextension UICollectionView: DataViewable {}<\/pre>\n<p>Both the table and collection views already have the &#8220;<em>reloadData<\/em>&#8221; function, but strangely don&#8217;t exist in any of their shared ancestors. Now that I&#8217;ve forced them to conform to my new &#8220;<em>DataViewable<\/em>&#8221; protocol, I can call this essential\u00a0function on either view without knowing whether it is a table or collection.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/wonka-tables-1-500x496.jpg\" alt=\"wonka-tables\" width=\"300\" height=\"496\" class=\"aligncenter size-medium wp-image-709\" \/><\/p>\n<h2>Extending\u00a0Table and Collection Controllers<\/h2>\n<p>When creating an app that has table and collection screens for\u00a0the same data, it is difficult to create extensions\u00a0with shared logic. The reason is because the table and collection API&#8217;s are so close, but are inconsistent nor do they share data-aware ancestors or protocols. Now\u00a0with the new &#8220;<em>DataViewable<\/em>&#8221; protocol in place, I could execute logic against tables and collections interchangeably.<\/p>\n<p>For example, say I&#8217;m feeding the same data to a UITableViewController screen and a UICollectionViewController screen. I can have them conform to a protocol and extend it with data population and reloading. See the new &#8220;<em>DataControllable<\/em>&#8221; protocol below:<\/p>\n<pre class=\"lang:js decode:true \">public protocol DataControllable: class {\r\n    var models: [Contentable] { get set }\r\n    var dataView: DataViewable { get }\r\n}\r\n\r\npublic extension DataControllable {\r\n    \r\n    public func setupDataSource() {\r\n        MyService.get { items in\r\n            self.models = items\r\n            self.dataView.reloadData()\r\n        }\r\n    }\r\n}<\/pre>\n<p>Instead of working with &#8220;<em>self.tableView<\/em>&#8221; or &#8220;<em>self.collectionView<\/em>&#8220;, my protocol is going to work with &#8220;<em>self.dataView<\/em>&#8220;, which is a &#8220;<em>DataViewable<\/em>&#8221; control that I created earlier. Even though it can either be a table or collection underneath, I can call &#8220;<em>reloadData<\/em>&#8221; on it, or any other relationship I&#8217;d like to bridge\u00a0between tables and collections.<\/p>\n<p>The table and collection view controllers would look something like this:<\/p>\n<pre class=\"lang:js decode:true\">class TableViewController: UITableViewController, DataControllable {\r\n\r\n    var models: [Contentable] = []\r\n\r\n    var dataView: DataViewable {\r\n        return tableView\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        setupDataSource()\r\n    }\r\n}\r\n\r\nclass CollectionViewController: UICollectionViewController, DataControllable {\r\n\r\n    var models: [Contentable] { get set }\r\n\r\n    var dataView: DataViewable {\r\n        return collectionView!\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        setupDataSource()\r\n    }\r\n}<\/pre>\n<p>Notice by simply calling &#8220;<em>setupDataSource<\/em>&#8221; on either the\u00a0table and collection view controllers, it gets populated and refreshed with the same logic.<\/p>\n<h2>What the NIB?!<\/h2>\n<p>There is another glaring inconsistency in the table and collection views: &#8220;<em>registerNib<\/em>&#8220;. For table views, the function signature is the first and the collection views is the bottom:<\/p>\n<pre class=\"lang:js decode:true \">func registerNib(_ nib: UINib?, forCellReuseIdentifier identifier: String) \/\/ UTableView\r\nfunc registerNib(_ nib: UINib?, forCellWithReuseIdentifier identifier: String) \/\/ UICollectionView<\/pre>\n<p>Spot\u00a0the difference?&#8230; &#8220;<em>forCellReuseIdentifier<\/em>&#8221; versus &#8220;<em>forCellWithReuseIdentifier<\/em>&#8220;. This almost looks like a typo, why the difference?! This makes it difficult for them to conform to the same protocol. So before we attempt to marry them, let&#8217;s reconcile the API\u00a0by extending the table and collection views and add an identical &#8220;<em>registerNib<\/em>&#8221; signature, let&#8217;s also make it less burdensome while we&#8217;re at it:<\/p>\n<pre class=\"lang:js decode:true \">public extension UITableView {\r\n\r\n    public static var defaultCellIdentifier: String {\r\n        return \"Cell\"\r\n    }\r\n    \r\n    public func registerNib(nibName: String, cellIdentifier: String = defaultCellIdentifier, bundleIdentifier: String? = nil) {\r\n        self.registerNib(UINib(nibName: nibName,\r\n            bundle: bundleIdentifier != nil ? NSBundle(identifier: bundleIdentifier!) : nil),\r\n            forCellReuseIdentifier: cellIdentifier)\r\n    }\r\n}\r\n\r\npublic extension UICollectionView {\r\n\r\n    public static var defaultCellIdentifier: String {\r\n        return \"Cell\"\r\n    }\r\n\r\n    public func registerNib(nibName: String, cellIdentifier: String = defaultCellIdentifier, bundleIdentifier: String? = nil) {\r\n        self.registerNib(UINib(nibName: nibName,\r\n            bundle: bundleIdentifier != nil ? NSBundle(identifier: bundleIdentifier!) : nil),\r\n            forCellWithReuseIdentifier: cellIdentifier)\r\n    }\r\n\r\n}<\/pre>\n<p>The &#8220;<em>registerNib<\/em>&#8221; signatures are now the same for tables and collections, but I&#8217;ve also made it more convenient by adding optional\u00a0and default\u00a0parameters, like for the cell identifier.\u00a0Also, the function is\u00a0accepting strings instead of forcing the end developer to create <em>nib<\/em> and <em>bundle<\/em> instances first to\u00a0pass them in. I&#8217;ll let the function create instances underneath automatically. This way, I can simply do this:<\/p>\n<pre class=\"lang:js decode:true \">self.dataView.registerNib(\"MyTableViewCell\")\r\nself.dataView.registerNib(\"MyCollectionViewCell\")<\/pre>\n<h2>Sugar and Spice<\/h2>\n<p>For the finale, I&#8217;d like to tackle the dreaded &#8220;<em>dequeueReusableCellWithIdentifier<\/em>&#8221; API. The philosophy of Objective-C is to make everything as verbose as possible. On the other hand, the philosophy of Swift is to make everything as swift as possible. So for this archaic API, I&#8217;d like to convert it to a subscript. Makes sense that you&#8217;d retrieve cells out of a table using subscripts, doesn&#8217;t it?! Here it goes:<\/p>\n<pre class=\"lang:js decode:true\">public extension UITableView {\r\n\r\n    public static var defaultCellIdentifier: String {\r\n        return \"Cell\"\r\n    }\r\n    \r\n    public subscript(indexPath: NSIndexPath) -&gt; UITableViewCell {\r\n        return self.dequeueReusableCellWithIdentifier(UITableView.defaultCellIdentifier, forIndexPath: indexPath)\r\n    }\r\n\r\n    public subscript(indexPath: NSIndexPath, identifier: String) -&gt; UITableViewCell {\r\n        return self.dequeueReusableCellWithIdentifier(identifier, forIndexPath: indexPath)\r\n    }\r\n}<\/pre>\n<p>Now I can simply do this:<\/p>\n<pre class=\"lang:js decode:true\">override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {\r\n    let cell = tableView[indexPath] as! MyTableViewCell\r\n    ...\r\n    return cell\r\n}<\/pre>\n<p>Extracting the cell from the table using &#8220;<em>tableView[indexPath]<\/em>&#8221; instead of &#8220;<em>tableView.dequeueReusableCellWithIdentifier(identifier, forIndexPath: indexPath)<\/em>&#8221; feels so much more natural. I&#8217;ve overloaded it too in case you want to use a different cell identifier.<\/p>\n<h2>Putting It All Together<\/h2>\n<p>We&#8217;ve made some breakthroughs with\u00a0tables and collections in this post. Let&#8217;s\u00a0summarize the evolution.<\/p>\n<p>First is the &#8220;<em>DataViewable<\/em>&#8221; protocol to marry the &#8220;<em>UITableView<\/em>&#8221; and &#8220;<em>UICollectionView<\/em>&#8221; together:<\/p>\n<pre class=\"lang:js decode:true \">public protocol DataViewable {\r\n    func reloadData()\r\n    func registerNib(nibName: String, cellIdentifier: String, bundleIdentifier: String?)\r\n}\r\n\r\nextension UITableView: DataViewable {}\r\nextension UICollectionView: DataViewable {}<\/pre>\n<p>Next is the &#8220;<em>DataControllable<\/em>&#8221; protocol to extend the &#8220;<em>UITableViewController<\/em>&#8221; and <em>UICollectionViewController<\/em>&#8221; simultaneously:<\/p>\n<pre class=\"lang:js decode:true\">public protocol DataControllable: class {\r\n    var models: [Contentable] { get set }\r\n    var dataView: DataViewable { get }\r\n    var cellNibName: String { get }\r\n}\r\n\r\npublic extension DataControllable {\r\n    \r\n    public func setupInterface() {\r\n        self.dataView.registerNib(cellNibName)\r\n    }\r\n    \r\n    public func setupDataSource() {\r\n        MyService.get { items in\r\n            self.models = items\r\n            self.dataView.reloadData()\r\n        }\r\n    }\r\n}<\/pre>\n<p>The &#8220;<em>setupInterface<\/em>&#8221; and &#8220;<em>setupDataSource<\/em>&#8221; functions is where you&#8217;d put your view and data retrieval logic. The table and collection views would both get reloaded too.<\/p>\n<p>Finally, the table view controller would like this in the end:<\/p>\n<pre class=\"lang:js decode:true\">class TableViewController: UITableViewController, DataControllable {\r\n\r\n    let cellNibName = \"TableViewCell\"\r\n    var models: [Contentable] = []\r\n    \r\n    var dataView: DataViewable {\r\n        return tableView\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        setupInterface()\r\n        setupDataSource()\r\n    }\r\n    \r\n    override func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {\r\n        return 1\r\n    }\r\n    \r\n    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {\r\n        return models.count\r\n    }\r\n    \r\n    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {\r\n        let cell = tableView[indexPath] as! TableViewCell\r\n        let model = models[indexPath.row]\r\n        return cell.bind(model)\r\n    }\r\n\r\n}<\/pre>\n<p>Similarly, the collection view controller as well:<\/p>\n<pre class=\"lang:js decode:true\">class CollectionViewController: UICollectionViewController, DataControllable {\r\n\r\n    let cellNibName = \"CollectionViewCell\"\r\n    var models: [Contentable] = []\r\n    \r\n    var dataView: DataViewable {\r\n        return collectionView!\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        setupInterface()\r\n        setupDataSource()\r\n    }\r\n\r\n    override func numberOfSectionsInCollectionView(collectionView: UICollectionView) -&gt; Int {\r\n        return 1\r\n    }\r\n\r\n    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {\r\n        return models.count\r\n    }\r\n\r\n    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&gt; UICollectionViewCell {\r\n        let cell = collectionView[indexPath] as! CollectionViewCell\r\n        let model = models[indexPath.row]\r\n        return cell.bind(model)\r\n    }\r\n\r\n}<\/pre>\n<p>It doesn&#8217;t seem so verbose anymore and the controllers feel much slimmer. To see a full working demo with these concepts in action, check out the <a href=\"https:\/\/github.com\/ZamzamInc\/ExtendedTableCollection\">GitHub repository<\/a>. It contains the protocols discussed, as well as a framework with embedded NIB&#8217;s using the\u00a0<a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UIStackView_Class_Reference\/\">UIStackView<\/a> so you can get a sense how this would work in the real world.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/CapturFiles_330-459x800.png\" alt=\"CapturFiles_330\" width=\"459\" height=\"800\" class=\"aligncenter size-medium wp-image-706\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/CapturFiles_330-459x800.png 459w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/CapturFiles_330-588x1024.png 588w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/CapturFiles_330.png 742w\" sizes=\"(max-width: 459px) 100vw, 459px\" \/><\/p>\n<hr \/>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/CapturFiles_335-1-462x800.png\" alt=\"CapturFiles_335\" width=\"462\" height=\"800\" class=\"aligncenter size-medium wp-image-708\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/CapturFiles_335-1-462x800.png 462w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/CapturFiles_335-1-592x1024.png 592w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/CapturFiles_335-1.png 744w\" sizes=\"(max-width: 462px) 100vw, 462px\" \/><\/p>\n<p>&nbsp;<\/p>\n<p><em><strong>Happy Coding!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/protocol-oriented-tableview-collectionview\/","comment_count":2,"author":2,"featured_media":724,"terms":[62,50,55],"meta":{"_series_part":""},"created":"2016-04-26T10:00:44","modified":"2016-05-13T13:57:28"},{"id":376,"title":"Creating a Framework in Swift","slug":"creating-a-framework-in-swift","type":"post","excerpt":"Are you rocking Swift yet? Now is time to share your code across the whole project for maximum reusability. This becomes even especially essential when creating Apple Watch apps since sharing code between the watch and the phone is a natural occurrence. In this post, I will show you how to create a framework in Swift to do this.","content":"<p>Are you rocking Swift yet? Now is time to share your beautiful code across the whole project for maximum reusability. This becomes even especially essential\u00a0when creating <a title=\"Building an Apple Watch App\" href=\"http:\/\/basememara.com\/building-an-apple-watch-app\/\">Apple Watch apps<\/a>\u00a0since sharing code between the watch and the phone is a natural occurrence. In this post, I will show you how to create a framework in Swift to do this, which was introduce in Xcode 6.<\/p>\n<h2>The Framework<\/h2>\n<p>Ok, you got this killer utility class and you&#8217;d like to use it in both the iPhone and the Apple Watch. In your project, click on the root of your project, then on top click <em>File &gt; New &gt; Target<\/em>. In the popup, select <em>iOS &gt; Framework &amp;\u00a0Library &gt; Cocoa Touch Framework<\/em>:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Target.png\"><img class=\"aligncenter size-medium wp-image-377\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Target-500x293.png\" alt=\"Xcode Swift Framework Target\" width=\"500\" height=\"293\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Target-500x293.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Target-1024x601.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Target-300x176.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Target.png 1452w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Next it will ask you for a <em>&#8220;Product Name&#8221;<\/em>. This acts as the namespace for the framework so it can be imported as a module in other targets. I like the convention of suffixing my framework libraries with <em>&#8220;Kit&#8221;<\/em> like Apple does, so in my case I will call this <em>&#8220;UnitKit&#8221;<\/em>:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Product.png\"><img class=\"aligncenter size-medium wp-image-378\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Product-500x292.png\" alt=\"Xcode Swift Framework Product\" width=\"500\" height=\"292\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Product-500x292.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Product-1024x598.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Product-300x175.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Product.png 1442w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>This will add two areas in your project called <em>&#8220;UnitKit&#8221;<\/em> and <em>&#8220;UnitKitTests&#8221;<\/em>:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-UnitKit.png\"><img class=\"aligncenter size-thumbnail wp-image-379\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-UnitKit-150x150.png\" alt=\"Xcode Swift UnitKit\" width=\"150\" height=\"150\" \/><\/a><\/p>\n<p>If you&#8217;re like me, you might feel filthy that there&#8217;s an Objective-C file there, but we won&#8217;t really use that and is simply used as a bridge to your framework.<\/p>\n<h2>Show Me the Code!<\/h2>\n<p>Let&#8217;s add a Swift file that represents the code we want to share. I like to create a <em>*Manager<\/em> file that does heavy lifting for the rest of my project, so in this case I will call it <em>UnitManager<\/em>. Right-click on your framework and click new file, then add a <em>Swift File<\/em>:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-File.png\"><img class=\"aligncenter wp-image-380 size-medium\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-File-500x295.png\" alt=\"Xcode Swift Framework File\" width=\"500\" height=\"295\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-File-500x295.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-File-1024x604.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-File-300x177.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-File.png 1438w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>In this manager class, add anything you like to test it out. Let&#8217;s make our class look like this:<\/p>\n<pre class=\"lang:swift decode:true \">public class UnitManager: NSObject {\r\n    \r\n    public func getMyStuff(key: String) -&gt; String {\r\n        return \"Here is your \\(key)\"\r\n    }\r\n    \r\n}<\/pre>\n<p>Notice I am prefixing my class and function with <em>public<\/em>, otherwise it won&#8217;t be accessible from outside of the <em>UnitKit<\/em> target.<\/p>\n<p>Now go back into your iPhone or Apple Watch target and go to the view controller. After importing the module at the top using <em>&#8220;import UnitKit&#8221;<\/em>, \u00a0you can now use your shiny new framework in any target in your project like this:<\/p>\n<pre class=\"lang:swift mark:10-11 decode:true\">import WatchKit\r\nimport Foundation\r\nimport UnitKit\r\n\r\nclass InterfaceController: WKInterfaceController {\r\n\r\n    override func awakeWithContext(context: AnyObject?) {\r\n        super.awakeWithContext(context)\r\n        \r\n        var unitManager = UnitManager()\r\n        var test = unitManager.getMyStuff(\"test\")\r\n    }\r\n\r\n}<\/pre>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/creating-a-framework-in-swift\/","comment_count":2,"author":2,"featured_media":377,"terms":[64,4,50,55,47],"meta":{"_series_part":""},"created":"2015-04-22T13:00:55","modified":"2016-05-12T22:47:26"},{"id":313,"title":"Submitting Apple Watch Apps to the App Store","slug":"submitting-apple-watch-apps-to-the-app-store","type":"post","excerpt":"In this post, I've outlined the steps for submitting your shiny new watch app to the App Store. If you done this before with the iPhone, the steps are similar. However, there are slight differences with Apple Watch and also the latest Xcode 6+ makes this a bit easier with some automation.","content":"<p>Back in 2008, the Apple App Store was launched for the iPhone.\u00a0Fast forward to today and the <a href=\"http:\/\/www.cultofmac.com\/309717\/app-store-makes-money-hollywood\/\" target=\"_blank\">App Store makes more money\u00a0than Hollywood<\/a>! Those early developers in the App Store were not only pioneers, but they also became millionaires.<\/p>\n<p>Of course, hind sight is 20\/20, but what if I told you have an opportunity to do it again\u00a0&#8211; to be a pioneer in a new era of mobile devices. No, I&#8217;m not talking about the iPad&#8230; the vision for this is way bigger! I&#8217;m talking about the <a href=\"https:\/\/www.apple.com\/watch\/\" target=\"_blank\">Apple Watch<\/a>. It\u00a0isn&#8217;t the first smart watch, but the iPhone was neither the first smart phone. Like it or not, Apple knows how to\u00a0revolutionize the industry and they are doing it again with smart watches. Now you have a chance to be among the first!<\/p>\n<h2>Watch App Store<\/h2>\n<p>There is a new section in the App Store for the Apple Watch and there isn&#8217;t millions of apps. It&#8217;s clean as a slate and waiting for developers to pour into it&#8230; now is the time.<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-App-Store.png\"><img class=\"aligncenter size-medium wp-image-346\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-App-Store-500x312.png\" alt=\"Apple Watch App Store\" width=\"500\" height=\"312\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-App-Store-500x312.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-App-Store-1024x639.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-App-Store-300x187.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Submitting apps to the App Store has always been a grueling process though &#8211; from certificates, to identifiers, to provisioning, to device UDID&#8217;s, yuck. It&#8217;s almost as painful as bookkeeping for taxes.<\/p>\n<p>So today, I&#8217;d like to show you the steps in submitting your shiny new watch app to the App Store. If you done this before with the iPhone, the steps are similar. However, there are slight differences with Apple Watch and also the latest Xcode 6+ makes this a bit easier with some automation.<\/p>\n<h2>Show Me the Steps!<\/h2>\n<h3>Step 1: Create certificates<\/h3>\n<p>First step is to create a\u00a0production and a development certificate. Although this is annoying, you will only have to do this once ever per machine you develop on. Then it is used for all your apps going forward.<\/p>\n<p>Log into\u00a0<a href=\"https:\/\/developer.apple.com\" target=\"_blank\">https:\/\/developer.apple.com<\/a>\u00a0and click on the <em>&#8220;Member Center&#8221;<\/em> menu item. From here, click on <em>&#8220;Certificates, Identifiers &amp; Profiles&#8221;<\/em>. Click on <em>&#8220;Certificates&#8221;<\/em> link under the <em>iOS Apps<\/em> section. Phew&#8230; are you still with me? The page should look like this for you:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Developer-Certificates-section.png\"><img class=\"aligncenter size-full wp-image-320\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Developer-Certificates-section.png\" alt=\"Apple Developer Certificates section\" width=\"264\" height=\"475\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Developer-Certificates-section.png 264w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Developer-Certificates-section-167x300.png 167w\" sizes=\"(max-width: 264px) 100vw, 264px\" \/><\/a><\/p>\n<p>Cool, now in the middle of the page, click the <em>&#8220;+&#8221;<\/em> sign to add a new certificate. From here, you will simply follow the wizard and instructions to create your certificate. Do this once for <em>Development &gt; &#8220;iOS App Development&#8221;<\/em> and another certificate for <em>Production &gt; &#8220;App Store and Ad Hoc&#8221;<\/em>.<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Create-Apple-Certificate.png\"><img class=\"aligncenter size-medium wp-image-322\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Create-Apple-Certificate-500x438.png\" alt=\"Create Apple Certificate\" width=\"500\" height=\"438\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Create-Apple-Certificate-500x438.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Create-Apple-Certificate-300x263.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Create-Apple-Certificate.png 720w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Once you finish the wizard, download the <em>*.cer<\/em> file and double-click it to make sure it opens on your Mac. It should open your Keychain Access app on your Mac and see your new certificates with private keys:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Keychain-Access-App-Store-Certificates.png\"><img class=\"aligncenter size-medium wp-image-323\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Keychain-Access-App-Store-Certificates-500x394.png\" alt=\"Keychain Access - App Store Certificates\" width=\"500\" height=\"394\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Keychain-Access-App-Store-Certificates-500x394.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Keychain-Access-App-Store-Certificates-300x236.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Keychain-Access-App-Store-Certificates.png 589w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Remember, these certificates should only be created once per machine, not per app! So now you will never have to do this again when submitting more apps (unless you get a new machine).<\/p>\n<h3>Step 2: Add your Apple ID to Xcode<\/h3>\n<p>If you haven&#8217;t done this already, add your Apple ID to <em>Xcode &gt; Preferences &gt; Accounts<\/em>. This way, Xcode will be able to automatically make changes to your <em>Certificates, Identifiers &amp; Profiles<\/em> when it needs to. Trust me, I&#8217;d rather Xcode make changes it needs than bang my head against the keyboard for hours. It should look something\u00a0like this:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Apple-ID.png\"><img class=\"aligncenter size-medium wp-image-325\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Apple-ID-500x364.png\" alt=\"Xcode Apple ID\" width=\"500\" height=\"364\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Apple-ID-500x364.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Apple-ID-1024x745.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Apple-ID-300x218.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Apple-ID.png 1478w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Of course, this also only has to be done once per machine, not per app (unless you are submitting apps to multiple different Apple ID&#8217;s).<\/p>\n<h3>Step 3: Create your project<\/h3>\n<p>Next\u00a0is to create your app in Xcode. If you haven&#8217;t created an Apple Watch app before, be sure to <a href=\"http:\/\/basememara.com\/building-an-apple-watch-app\">check my other post<\/a>.<\/p>\n<h3>Step 4: Add capabilities to your project<\/h3>\n<p>Sometimes you cannot foresee this, but try to add some basic capabilities you are sure to use. Click on your project from the file list, then in the middle select the target you&#8217;d like to apply this to. Then\u00a0click <em>&#8220;Capabilities&#8221;<\/em>\u00a0across the target menu (where it says <em>General, Capabilities, Info, Build Settings, etc<\/em>) and activate what you need.<\/p>\n<p>Most likely, you will need to add App Groups to store data between the watch and phone. When you activate this, Xcode will ask you which account you would like to enable App Groups for. This is the account you set up in the previous step. Select the account to activate it for when Xcode pops up this window:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode_App_Groups_Account.png\"><img class=\"aligncenter wp-image-318\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode_App_Groups_Account-1024x433.png\" alt=\"Xcode App Groups Account\" width=\"500\" height=\"211\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode_App_Groups_Account-1024x433.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode_App_Groups_Account-300x127.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p style=\"text-align: left;\">Don&#8217;t forget to enable what you need from the WatchKit Extension target too!<\/p>\n<p style=\"text-align: left;\"><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode_watch_targets.png\"><img class=\"aligncenter size-full wp-image-319\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode_watch_targets.png\" alt=\"Xcode watch targets\" width=\"414\" height=\"314\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode_watch_targets.png 414w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode_watch_targets-300x228.png 300w\" sizes=\"(max-width: 414px) 100vw, 414px\" \/><\/a><\/p>\n<p style=\"text-align: left;\">Now press <em>Command+B<\/em> to make sure the project builds.<\/p>\n<h3 style=\"text-align: left;\">Step 5: Creating the Provisioning Profiles<\/h3>\n<p style=\"text-align: left;\">If you got to this point, Xcode created a bunch of stuff automatically for you. It create the App ID&#8217;s:<\/p>\n<p style=\"text-align: left;\"><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-App-ID.png\"><img class=\"aligncenter size-medium wp-image-329\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-App-ID-500x298.png\" alt=\"App Store App ID\" width=\"500\" height=\"298\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-App-ID-500x298.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-App-ID-300x179.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-App-ID.png 714w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p style=\"text-align: left;\">And the provisioning profiles:<\/p>\n<p style=\"text-align: left;\"><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Provisioning.png\"><img class=\"aligncenter size-medium wp-image-328\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Provisioning-500x420.png\" alt=\"App Store Provisioning\" width=\"500\" height=\"420\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Provisioning-500x420.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Provisioning-300x252.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Provisioning.png 721w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p style=\"text-align: left;\">Noticed it created one for the iPhone part of the app and another for the WatchKit extension. However, these provisioning profiles are for development, not distribution. So back in you <em>Certificates, Identifiers &amp; Profiles<\/em> section in you <em>Apple Developer &gt; Member Center<\/em> area, click on <em>&#8220;Provisioning Profiles&#8221;<\/em> and click the <em>&#8220;+&#8221;<\/em> sign to add a new one. Be sure to select <em>Distribution &gt; &#8220;App Store&#8221;<\/em>:<\/p>\n<p style=\"text-align: left;\"><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store.png\"><img class=\"aligncenter size-medium wp-image-336\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store-500x454.png\" alt=\"Provisioning Profile App Store\" width=\"500\" height=\"454\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store-500x454.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store-300x272.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store.png 726w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p style=\"text-align: left;\">Go through the wizard and select the App ID that Xcode created for you:<\/p>\n<p style=\"text-align: left;\"><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store-2.png\"><img class=\"aligncenter size-medium wp-image-337\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store-2-500x386.png\" alt=\"Provisioning Profile App Store 2\" width=\"500\" height=\"386\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store-2-500x386.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store-2-300x232.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Provisioning-Profile-App-Store-2.png 719w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p style=\"text-align: left;\">For the profile name in the <em>&#8220;Generate&#8221;<\/em> section of the wizard, this can be any name but I suggest adding something like <em>&#8220;Unit Watch App Store&#8221;<\/em> so you know this provision is for the App Store and not for development. At the final step, download the generated provisioning profile and double-click it. It will open Xcode; although it doesn&#8217;t seem like it did anything, it added the entry to your list of provisioning profiles so you can adjust build settings later.<\/p>\n<p style=\"text-align: left;\">Do this whole step again but for the App ID with the <em>.watchkitextension<\/em> suffix, and name this profile something like <em>&#8220;Unit Watch WatchKit App Store&#8221;<\/em>.<\/p>\n<h3 style=\"text-align: left;\">Step 6:\u00a0Adjust the Build Settings<\/h3>\n<p>You&#8217;re almost there. Now it&#8217;s time to take what Xcode created for you in your developer account and apply it to your project. In the folder list in Xcode, highlight your root project, then in the middle highlight the project, then click on <em>Build Settings<\/em>. Make sure <em>&#8220;All&#8221;<\/em> is selected. Then go to the <em>&#8220;Code Signing&#8221;<\/em> section. From there, under <em>&#8220;Provisioning Profile&#8221;<\/em>, select the one that applies to this project (without the <em>&#8220;.watchkitextension&#8221;<\/em> suffix). Then select <em>&#8220;Automatic&#8221;<\/em> for all the other sections in that section. Your screen should look something like this:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-2.png\"><img class=\"aligncenter size-medium wp-image-338\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-2-500x183.png\" alt=\"Xcode Build Setting Code Signing\" width=\"500\" height=\"183\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-2-500x183.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-2-1024x374.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-2-300x110.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Now do the same for the iPhone target:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-iPhone-2.png\"><img class=\"aligncenter size-medium wp-image-339\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-iPhone-2-500x184.png\" alt=\"Xcode Build Setting Code Signing - iPhone\" width=\"500\" height=\"184\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-iPhone-2-500x184.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-iPhone-2-1024x377.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-iPhone-2-300x110.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>And now for the <em>Tests<\/em> project, but this will be a bit different. Select <em>&#8220;Automatic&#8221;<\/em>\u00a0for the provisioning profile, then <em>&#8220;iOS Developer&#8221;<\/em> for the rest:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-Tests.png\"><img class=\"aligncenter size-medium wp-image-332\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-Tests-500x181.png\" alt=\"Xcode Build Setting Code Signing - Tests\" width=\"500\" height=\"181\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-Tests-500x181.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-Tests-1024x370.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-Tests-300x108.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Then for the WatchKit target, select the provisioning profile with the <em>.watchkitextension<\/em> suffix and select <em>&#8220;Automatic&#8221;<\/em> for everything else:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-2.png\"><img class=\"aligncenter size-medium wp-image-340\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-2-500x181.png\" alt=\"Xcode Build Setting Code Signing - WatchKit\" width=\"500\" height=\"181\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-2-500x181.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-2-1024x371.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-2-300x109.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>And one more time for the WatchKit App target, except choose <em>&#8220;Automatic&#8221;<\/em> for the <em>&#8220;Provisioning Profile&#8221;<\/em> and <em>&#8220;iOS Distribution&#8221;<\/em> all the other fields:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-App.png\"><img class=\"aligncenter size-medium wp-image-335\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-App-500x181.png\" alt=\"Xcode Build Setting Code Signing - WatchKit App\" width=\"500\" height=\"181\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-App-500x181.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-App-1024x371.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Build-Setting-Code-Signing-WatchKit-App-300x109.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Finally, update the <em>Info.plist<\/em> file in the iPhone target to have the actual <em>Bundle identifier<\/em> (which is actually the value you entered when you created the project in Xcode):<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Bundle-Identifier.png\"><img class=\"aligncenter size-medium wp-image-334\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Bundle-Identifier-500x223.png\" alt=\"Xcode Bundle Identifier\" width=\"500\" height=\"223\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Bundle-Identifier-500x223.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Bundle-Identifier-1024x456.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Bundle-Identifier-300x134.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Bundle-Identifier.png 1512w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<h3 style=\"text-align: left;\">Step 7: Preparing your build<\/h3>\n<p style=\"text-align: left;\">Now we are ready to package it up to prepare it for the store. Change the build scheme to <em>&#8220;iOS Device&#8221;:<\/em><\/p>\n<p style=\"text-align: left;\"><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Scheme-for-App-Store.png\"><img class=\"aligncenter size-medium wp-image-326\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Scheme-for-App-Store-500x363.png\" alt=\"Scheme for App Store\" width=\"500\" height=\"363\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Scheme-for-App-Store-500x363.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Scheme-for-App-Store-1024x744.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Scheme-for-App-Store-300x218.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Scheme-for-App-Store.png 1267w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Now in the top Xcode menu (where there is <em>File, Edit, View, Find, etc<\/em>), go to <em>Product &gt; Archive<\/em>. This will create a new build package for the App Store for submission. You should get a new window with your archive with some options:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Archive.png\"><img class=\"aligncenter size-medium wp-image-327\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Archive-500x241.png\" alt=\"App Store Archive\" width=\"500\" height=\"241\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Archive-500x241.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Archive-1024x493.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Archive-300x145.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<h3>Step 8: Create your iTunes Connect App<\/h3>\n<p>Before we can validate, we&#8217;ll need to create the app in iTunes Connect. This is where you manage all your App Store products. Go to\u00a0<a href=\"https:\/\/itunesconnect.apple.com\" target=\"_blank\">https:\/\/itunesconnect.apple.com<\/a>\u00a0and click on <em>&#8220;My Apps&#8221;<\/em>.<\/p>\n<p>Click on the <em>&#8220;+&#8221;<\/em> sign and create your new iOS App and select the right bundle ID without the <em>.watchkitextension<\/em>. The version must match the version in your <em>Info.plist<\/em> and the <em>SKU<\/em> can be anything you want, but I use the bundle identifier since I know it is unique.<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/New-iOS-App.png\"><img class=\"aligncenter size-medium wp-image-341\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/New-iOS-App-500x237.png\" alt=\"New iOS App\" width=\"500\" height=\"237\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/New-iOS-App-500x237.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/New-iOS-App-300x142.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/New-iOS-App.png 782w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<h3>Step 9: Validate your build<\/h3>\n<p>Now comes the moment of truth. Go back to Xcode and click on validate in the archive window. You should get this popup, click <em>&#8220;Validate&#8221;<\/em>.<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Build-Validation.png\"><img class=\"aligncenter size-medium wp-image-343\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Build-Validation-500x293.png\" alt=\"App Store Build Validation\" width=\"500\" height=\"293\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Build-Validation-500x293.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Build-Validation-1024x601.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Build-Validation-300x176.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Build-Validation.png 1472w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Wait for butterflies to tickle your stomach, then <em>WHAAMMMM!!!<\/em> Hopefully you should get this soothing screen:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Validation-Success.png\"><img class=\"aligncenter size-medium wp-image-344\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Validation-Success-500x289.png\" alt=\"App Store Validation Success\" width=\"500\" height=\"289\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Validation-Success-500x289.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Validation-Success-1024x592.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Validation-Success-300x173.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/App-Store-Validation-Success.png 1142w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Congrats for an awesome achievement. If you didn&#8217;t get this far, no worries, it&#8217;s a grueling process! Just search the web for the error message and you may find a way out.<\/p>\n<h3>Step 10: Submit to App Store<\/h3>\n<p>What&#8217;s nice about these steps is I usually do this with a fresh new project, before\u00a0even writing a line of code. That way, everything is ready for me after I code the app.\u00a0When your app is finally ready, just go back to\u00a0<em>Product &gt; Archive<\/em> and generate a new build, then validate, then\u00a0<em>&#8220;Submit to the App Store&#8221;<\/em>.<\/p>\n<p>Now in iTunes Connect where\u00a0your app details page is, look for the\u00a0<em>&#8220;Build&#8221;<\/em> section. Click on the <em>&#8220;+&#8221;<\/em> sign to add the build you just uploaded. Also, be sure to\u00a0fill in all the blanks like description, keywords, etc, especially the new Apple Watch section that you have to put some icons in:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-iTunes-Connect.png\"><img class=\"aligncenter size-medium wp-image-345\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-iTunes-Connect-500x153.png\" alt=\"Apple Watch iTunes Connect\" width=\"500\" height=\"153\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-iTunes-Connect-500x153.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-iTunes-Connect-1024x313.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-iTunes-Connect-300x92.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-iTunes-Connect.png 1109w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Click save and then <em>&#8220;Submit for Review&#8221;<\/em>. Now await for the approval process which, at this point, only took me 3 days. It seems they&#8217;ve put a high priority on watch apps for the time being or maybe the watch app submissions haven&#8217;t poured in yet.<\/p>\n<p>Stay tuned for more WatchKit posts&#8230;<\/p>\n<p><strong><em>HAPPY\u00a0CODING!!<\/em><\/strong><\/p>\n","link":"https:\/\/basememara.com\/submitting-apple-watch-apps-to-the-app-store\/","comment_count":4,"author":2,"featured_media":346,"terms":[48,64,4,49,47],"meta":{"_series_part":""},"created":"2015-04-20T21:47:23","modified":"2016-05-12T22:46:50"},{"id":460,"title":"How to create a CocoaPod with Swift","slug":"how-to-create-a-cocoapod-with-swift","type":"post","excerpt":"CocoaPods are the de facto way of sharing and distributing iOS and OS X code. It manages third-party dependencies in a easy, fast, and safe way. There are thousands of CocoaPods available, but almost all of them are in Objective-C. Today I'd like to show you how to create a CocoaPods in Swift.","content":"<p><a href=\"https:\/\/cocoapods.org\" target=\"_blank\">CocoaPods<\/a> are the de facto\u00a0way of sharing and distributing iOS and OS X code. It\u00a0manages third-party dependencies in a easy, fast, and safe way. It&#8217;s much like <a href=\"https:\/\/www.nuget.org\">NuGet<\/a> for .NET, <a href=\"http:\/\/bower.io\" target=\"_blank\">Bower<\/a> for JavaScript, and <a href=\"http:\/\/npmjs.org\/\" target=\"_blank\">npm<\/a>\u00a0for Node. There are thousands of CocoaPods available, but almost all of them are in Objective-C. Today I&#8217;d like to show you how to create CocoaPods in Swift.<\/p>\n<h2>CocoaPod 0.36 and Beyond!&#8230;<\/h2>\n<p>Version 0.36 marks a new milestone in CocoaPods. This was when <a href=\"http:\/\/blog.cocoapods.org\/CocoaPods-0.36\/\" target=\"_blank\">CocoaPods announced official support for Swift<\/a>. Now we will see a new wave of CocoaPods that have been created in Swift. So first thing&#8217;s first, update your CocoaPods to take advantage:\u00a0<em>gem install cocoapods<\/em><\/p>\n<h2>Dude, Where&#8217;s My Swift?!<\/h2>\n<p>Although\u00a0CocoaPods officially supports Swift, many\u00a0of the commands and templates associated with creating a new pod is only available in Objective-C (at the time of this writing at least). So we can&#8217;t use <em>&#8220;pod lib create&#8221;<\/em> to let CocoaPods automatically set up your pod structure. No Swift shortcuts yet.<\/p>\n<h2>Show Me the Steps!<\/h2>\n<p>We will have to create out CocoaPod the manual way for Swift. Here are steps to create your Swift pod:<\/p>\n<ol>\n<li>Create a GitHub repository that will store your CocoaPod.\u00a0There are ways to do this with a private repo if needed, but let&#8217;s stick to open source. Once you create the repo, clone the repo to your local machine.<\/li>\n<li>Now create a Xcode workspace in the folder where\u00a0you\u00a0cloned your repo. You do this in Xcode by going to <em>File &gt; New &gt; Workspace<\/em>. This workspace will be used to house your pod source code, examples, tests, etc.<\/li>\n<li>Create a new <em>PodSpec<\/em> file by navigating to your workspace directory and typing the following command:\u00a0<em>pod spec create YOUR_POD_NAME<\/em>. Open your new spec file and modify it according to your pod. Here is an example of one for a Swift pod:\n<pre class=\"lang:ruby decode:true\">Pod::Spec.new do |s|\r\n\r\n  s.name         = \"MySwiftPod\"\r\n  s.version      = \"0.1\"\r\n  s.summary      = \"This is my amazing Swift CocoaPod!\"\r\n\r\n  s.description  = &lt;&lt;-DESC\r\n                   This is my long description here... yada, yada.\r\n                   DESC\r\n\r\n  s.homepage     = \"https:\/\/basememara.com\"\r\n  # s.screenshots  = \"www.example.com\/screenshots_1.gif\", \"www.example.com\/screenshots_2.gif\"\r\n  s.license      = { :type =&gt; \"MIT\", :file =&gt; \"LICENSE\" }\r\n  s.author             = { \"Basem Emara\" =&gt; \"contact@basememara.com\" }\r\n  s.social_media_url   = \"https:\/\/twitter.com\/basememara\"\r\n  s.platform     = :ios, \"8.0\"\r\n  s.source       = { :git =&gt; \"https:\/\/github.com\/basememara\/cocoapods-swift-sample.git\", :tag =&gt; s.version }\r\n  s.source_files  = \"MySwiftPod\/MySwiftPod\/*.swift\"\r\n\r\nend\r\n<\/pre>\n<p>All the instructions are in comments when you create the spec file, but hopefully my sample above helps. Notice the last line for <em>&#8220;s.source_files&#8221;<\/em> leads somewhere, but I will get to that in a minute.<\/li>\n<li>Add a new iOS project which will be used to test our CocoaPod. To do this in Xcode, right-click on the left panel in the\u00a0workspace\u00a0and select <em>&#8220;New Project&#8221;<\/em>. Choose a <em>&#8220;Single View Application&#8221;<\/em>\u00a0under <em>iOS &gt; Application<\/em> section, or any project type you like. Be sure to call it <em>&#8220;Example&#8221;<\/em> for consistency with other CocoaPods convention.<\/li>\n<li>Add a new Swift framework by right-clicking in the left-pane again and select <em>&#8220;New Project&#8221;<\/em>. This time, we will select <em>iOS &gt; Framework &amp; Library &gt; Cocoa Touch<\/em>. After clicking next, it is really important to select the right name for your CococaPod, which will be used as a namespace for any project consuming this pod. Also, make sure it is added to the workspace, not the example project:<br \/>\n<a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-CocoaPod.png\"><img class=\"aligncenter size-medium wp-image-461\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-CocoaPod-500x116.png\" alt=\"Swift CocoaPod\" width=\"500\" height=\"116\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-CocoaPod-500x116.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-CocoaPod-300x69.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-CocoaPod.png 778w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/li>\n<li>Let&#8217;s create a sample Swift file to test things out later. In your new framework folder, add a Swift file called <em>MySwiftPodManager<\/em> or anything you like. Add a function to it to test out. Here&#8217;s how my file looks like:\n<pre class=\"lang:swift decode:true\">import Foundation\r\n\r\npublic class MySwiftPodManager: NSObject {\r\n    \r\n    public func getMyTest(value: String) -&gt; String {\r\n        return \"Hello \\(value)\"\r\n    }\r\n    \r\n}<\/pre>\n<\/li>\n<li>To use this in your example project, you will have to add your framework\u00a0as a dependency to your <em>Example<\/em> project. To do this, drag your Swift framework&#8217;s <em>.xcodeproj<\/em> file and add it the <em>Example<\/em> project root. Your file system in Xcode should look something like this:<a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-CocoaPod.png\"><img class=\"aligncenter wp-image-462\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-CocoaPod-435x800.png\" alt=\"Swift Framework CocoaPod\" width=\"300\" height=\"552\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-CocoaPod-435x800.png 435w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-CocoaPod-300x552.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-CocoaPod.png 448w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a>We&#8217;re still not done adding the Swift framework as a dependency. Click on the root of your Example project and go to <em>&#8220;Build Phases&#8221;<\/em>\u00a0then add your Swift\u00a0framework to <em>&#8220;Target Dependencies&#8221;<\/em>\u00a0and <em>&#8220;Link Binary With Libraries&#8221;<\/em>. When you click the &#8220;+&#8221; sign, you should see your Swift framework in the list (that&#8217;s why we had to copy the <em>.xcodeproj<\/em> file).\u00a0Still in <em>&#8220;Build Phases&#8221;<\/em>, click on the + button at the top left of the panel and select <em>&#8220;New Copy Files Phase&#8221;<\/em>. Rename this new phase to <em>&#8220;Copy Frameworks&#8221;<\/em>, set the <em>&#8220;Destination&#8221;<\/em> to <em>&#8220;Frameworks&#8221;<\/em>, and add your Swift framework again here. Your entire <em>&#8220;Build Phases&#8221;<\/em> should look something like this:<br \/>\n<img class=\"aligncenter size-medium wp-image-463\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-Dependency-500x480.png\" alt=\"Swift Framework Dependency\" width=\"500\" height=\"480\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-Dependency-500x480.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-Dependency-1024x983.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-Dependency-300x288.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Swift-Framework-Dependency.png 1444w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/>To test out this works, go to your <em>Example<\/em> project&#8217;s <em>ViewController<\/em> and add the <em>&#8220;import YOUR_FRAMEWORK_NAME&#8221;<\/em> statement at the top and try using your new manager in the <em>&#8220;viewDidLoad&#8221;<\/em> for example. You may have to build a could times to kick the dependencies into gear, but after that if should not have any errors.<\/li>\n<li>Validate your <em>PodSpec<\/em> file by going into terminal and changing to your workspace, then typing:\u00a0<em>pod spec lint MySwiftPod.podspec<\/em>. At this point, you will probably get this error:\u00a0<em>fatal: Remote branch 0.1 not found in upstream origin<\/em><\/li>\n<li>Commit all your changes to your git repository (I like using <a href=\"https:\/\/www.sourcetreeapp.com\" target=\"_blank\">SourceTree<\/a> for this). Once you have committed and pushed your changes, type this into the terminal to create the tag the pod spec validator is complaining about:\n<pre class=\"lang:vim decode:true\">git tag -a 0.1 -m \"Tagged version 0.1\"\r\ngit tag\r\ngit push --tags<\/pre>\n<p>Now run the spec validator again and it should now pass validation.<\/li>\n<li>That&#8217;s it! It is now time to test out your new CocoaPod. You can do this before releasing\u00a0it out\u00a0into the wild. Make sure you have everything committed so the latest is in your repo. Close down your project and create a fresh new iOS project for testing. Create a new Pod file by going into Terminal and changing to its directory, then type:\u00a0<em>touch Podfile<\/em>. In this file, add the following:\n<pre class=\"lang:ruby decode:true\">use_frameworks!\r\n\r\npod 'MySwiftPod', :git =&gt; 'https:\/\/github.com\/basememara\/cocoapods-swift-sample.git'<\/pre>\n<p>Notice the <em>&#8220;use_frameworks!&#8221;<\/em> directive at the top. This is telling CocoaPods to enable Swift framework support. Next line is adding a pod to your project, but it is doing so from an arbitrary git repo, not the public CocoaPods directory. This allows you to test your pod without submitting it into the public directory. Save the file and go back to Terminal and type: <em>pod install<\/em>. This will install the CocoaPod to your project and create a workspace to use going forward. Close your project and open the workspace it created for you. Test that you have access to your CocoaPod by\u00a0going to your project&#8217;s\u00a0<em>ViewController<\/em>\u00a0and add the\u00a0<em>&#8220;import YOUR_POD_NAME&#8221;<\/em>\u00a0statement at the top and try using the\u00a0manager you created in your CocoaPod in the\u00a0<em>&#8220;viewDidLoad&#8221;<\/em>\u00a0for example. You may have to build a could times to kick the dependencies into gear, but after that if should not have any errors (sound familiar :).<\/li>\n<li>If everything worked as expected, it&#8217;s time to release your CocoaPod to the world. To do this, you need to register at CocoaPods and go through their steps in submitting it to them. Follow their <a href=\"https:\/\/guides.cocoapods.org\/making\/getting-setup-with-trunk\" target=\"_blank\">getting started with trunk<\/a> guide to deploy to the public.<\/li>\n<\/ol>\n<p>Congratulations, you are now ready to share your Swift code between your projects and the world!<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n<hr \/>\n<p><em>Official documentation on creating CocoaPods in Swift is slim at this point. In addition,\u00a0there are <a href=\"https:\/\/github.com\/CocoaPods\/pod-template\/issues\/88\" target=\"_blank\">no CocoaPods\u00a0templates for Swift<\/a>\u00a0yet either.\u00a0Please leave your comments and feedback below to help improve and evolve this initiative.<\/em><\/p>\n<hr \/>\n<p><em><strong>UPDATE, JUNE 2, 2015: Swift and framework support added to version 0.37.2 using\u00a0&#8220;pod lib create&#8221;. WOOHOO!! See <a href=\"https:\/\/guides.cocoapods.org\/making\/using-pod-lib-create.html\" target=\"_blank\">docs<\/a> for more details.<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/how-to-create-a-cocoapod-with-swift\/","comment_count":1,"author":2,"featured_media":464,"terms":[52,64,4,50,55,47],"meta":{"_series_part":""},"created":"2015-05-07T13:00:18","modified":"2016-05-12T22:46:19"},{"id":508,"title":"Top 10 Swift-friendly CocoaPods","slug":"top-10-swift-friendly-cocoapods","type":"post","excerpt":"CocoaPods are a must for any serious iOS project. Why reinvent the wheel when the community has produced robust and feature-rich plugins? In this post, I'd like to highlight the best CocoaPods I've used in real-world project that are also Swift-friendly.","content":"<p><a href=\"https:\/\/cocoapods.org\" target=\"_blank\">CocoaPods<\/a> are a must for any serious iOS project. Why reinvent the wheel when the community has produced robust and feature-rich plugins? However, one can get easily overwhelmed with the amount of choices out there. So in this post, I&#8217;d like to highlight the best CocoaPods I&#8217;ve used in real-world project that are also Swift-friendly. By that I mean, they are either pure-Swift or at least Objective-C pods\u00a0that have been updated to be compatible with Swift. Here we go&#8230;<\/p>\n<ol>\n<li><strong><a href=\"https:\/\/github.com\/Alamofire\/Alamofire\" target=\"_blank\">Alamofire<\/a><\/strong> &#8211; You won&#8217;t find a <em>&#8220;top CocoaPods list&#8221;<\/em> without this pod on there. It allows you to easily consume web services and do other HTTP network tasks. The API is much sweeter and elegant than Apple&#8217;s rigid and verbose `NSURLConnection` (although Alamofire is just a wrapper to it).<\/li>\n<li><strong><a href=\"https:\/\/github.com\/SwiftyJSON\/SwiftyJSON\">SwiftyJSON<\/a><\/strong> &#8211; Another heavy-hitter\u00a0in the Swift CocoaPods world. Parse JSON with ease instead of using Apple&#8217;s verbose `NSJSONSerialization` syntax.<\/li>\n<li><strong><a href=\"https:\/\/github.com\/naoty\/Timepiece\" target=\"_blank\">Timepiece<\/a><\/strong> &#8211; Working with dates in Objective-C is such a boring task. The trend continues in Swift unfortunately. This is where Timepiece comes in. Working with dates feels natural, such as comparing dates using arithmetic symbols,\u00a0or\u00a0format with ease instead of using Apple&#8217;s verbose `NSDateFormatter` API. Apple just loves verbose syntax don&#8217;t they!<\/li>\n<li><strong><a href=\"https:\/\/github.com\/ealeksandrov\/EAIntroView\" target=\"_blank\">EAIntroView<\/a><\/strong> &#8211; Ever wanted to create a tutorial for your iOS app? Sure you can create a `UIPageControl` and wire everything up. This pod makes things easier though. Just a few lines of code in your `ViewController` and you&#8217;ve got a beautiful tutorial!<\/li>\n<li><strong><a href=\"https:\/\/github.com\/mineschan\/MZTimerLabel\" target=\"_blank\">MZTimerLabel<\/a><\/strong> &#8211; When working with Apple WatchKit, one thing I really liked that was\u00a0missing in\u00a0iOS was <a href=\"https:\/\/developer.apple.com\/library\/prerelease\/ios\/documentation\/WatchKit\/Reference\/WKInterfaceTimer_class\/\" target=\"_blank\">WKInterfaceTimer<\/a>, or a countdown label. To get a countdown or timer working in iOS, you could get messy with <a href=\"https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Reference\/Foundation\/Classes\/NSTimer_Class\/\" target=\"_blank\">NSTimer<\/a>, yes verbose again! That&#8217;s where this pod comes in. Just instantiate with any label as a constructor parameter and you&#8217;ve instantly got a timer API around it. Beware though, when your app goes in the background, the timer goes stale or acts funny. I don&#8217;t fault this as a bug, but just the way the iOS architecture works to manage resources. I&#8217;ve posted a workaround in a <a href=\"https:\/\/github.com\/mineschan\/MZTimerLabel\/issues\/5\" target=\"_blank\">GitHub issue<\/a>\u00a0to resolve this and still let iOS manage its resources properly.<\/li>\n<li><strong><a href=\"https:\/\/github.com\/Alecrim\/AlecrimCoreData\" target=\"_blank\">AlecrimCoreData<\/a><\/strong> &#8211; You want to talk verbose, try working with the raw <a href=\"https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Conceptual\/CoreData\/cdProgrammingGuide.html\" target=\"_blank\">CoreData<\/a>\u00a0syntax\u00a0from Apple. Yuck!! AlecrimCoreData wraps the CoreData API\u00a0and produces an elegant framework\u00a0on top. Sorting, filtering, querying &#8211; no problem! Since its purely written in Swift, it follows the Swift closure philosophy and makes working with CoreData actually fun and fast! I&#8217;ve looked into\u00a0other wrappers such as <a href=\"https:\/\/github.com\/magicalpanda\/MagicalRecord\" target=\"_blank\">MagicalRecord<\/a> and <a href=\"https:\/\/github.com\/QueryKit\/QueryKit\" target=\"_blank\">QueryKit<\/a>, but they\u00a0didn&#8217;t seem so elegant or fluid. Although those other projects helped inspire AlecrimCoreData, what really sets it\u00a0apart are\u00a0its extended `FetchedResultsController` and a class object generator. AlecrimCoreData is the underdog here and I&#8217;m hoping this one takes the crown!<\/li>\n<li><strong><a href=\"https:\/\/github.com\/AndreyLunevich\/DLImageLoader-iOS\" target=\"_blank\">DLImageLoader<\/a><\/strong> &#8211; There are a ton of async-loading, caching image handlers. Getting one is a must since scrolling your UICollectionView or UITableView will lag like no tomorrow. It&#8217;s really something that should be built right into the <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UIImageView_Class\/\" target=\"_blank\">UIImageView<\/a> class. So there are so many to choose from, such as\u00a0<a href=\"https:\/\/github.com\/rs\/SDWebImage\" target=\"_blank\">SDWebImage<\/a> and <a href=\"https:\/\/github.com\/Haneke\/HanekeSwift\" target=\"_blank\">Haneke<\/a>, but I chose this one because it seemed light-weight and works great!<\/li>\n<li><strong><a href=\"https:\/\/github.com\/icanzilb\/SwiftSpinner\" target=\"_blank\">SwiftSpinner<\/a><\/strong> &#8211; Many times, the native <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UIActivityIndicatorView_Class\/\" target=\"_blank\">UIActivityIndicatorView<\/a> seems so mediocre. SwiftSpinner generates a modern-looking\u00a0spinner that keeps the user hypnotized until your app loads its data.<\/li>\n<li><strong><a href=\"https:\/\/github.com\/JaviSoto\/JSBadgeView\" target=\"_blank\">JSBadgeView<\/a><\/strong> &#8211; Adding badges on tab bar buttons is a breeze and comes out-of-the-box, but that&#8217;s where it stops. Adding badges to buttons, navigation items, segmented controls, and other elements doesn&#8217;t come with <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UIKit_Framework\/\" target=\"_blank\">UIKit<\/a>. That&#8217;s where this pod comes in. Add badges to <em>ANY<\/em> control that descends from <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/UIKit\/Reference\/UIView_Class\/index.html\" target=\"_blank\">UIView<\/a>, which is\u00a0just about everything, but a workaround is available even for non-UIView controls.<\/li>\n<li><strong><a href=\"https:\/\/github.com\/dzenbot\/DZNEmptyDataSet\" target=\"_blank\">DZNEmptyDataSet<\/a><\/strong> &#8211; Why there isn&#8217;t a property on UITableView or UICollectionView to display an empty message is absurd. This pod does so when you have an empty data set, but it takes it one step further by allowing you to compose an entire view for the empty display.<\/li>\n<\/ol>\n<p>I hope you\u00a0enjoy! Do you have any Swift-friendly favorites?<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n<hr \/>\n<p><strong>***BONUS***<\/strong><\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/nvzqz\/FileKit\" target=\"_blank\">FileKit<\/a> &#8211;\u00a0A\u00a0Swift 2 framework that allows for simple and expressive file management.<\/li>\n<li><a href=\"https:\/\/github.com\/AliSoftware\/SwiftGen\" target=\"_blank\">SwiftGen<\/a> &#8211;\u00a0A collection of Swift tools to generate Swift code (enums for your assets, storyboards, Localizable.strings, \u2026).<\/li>\n<li><a href=\"https:\/\/github.com\/nickoneill\/PermissionScope\" target=\"_blank\">PermissionScope<\/a> &#8211;\u00a0Intelligent iOS permissions UI and unified API.<\/li>\n<li><a href=\"https:\/\/github.com\/radex\/SwiftyUserDefaults\" target=\"_blank\">SwiftyUserDefaults<\/a>\u00a0&#8211; Modern Swift API for NSUserDefaults.<\/li>\n<li><a href=\"https:\/\/github.com\/radex\/SwiftyTimer\" target=\"_blank\">SwiftyTimer<\/a> &#8211;\u00a0Swifty API for NSTimer.<\/li>\n<li><a href=\"https:\/\/github.com\/delba\/JASON\" target=\"_blank\">JASON<\/a> &#8211;\u00a0Fast JSON parsing for Swift.<\/li>\n<li><a href=\"https:\/\/github.com\/xmartlabs\/Eureka\" target=\"_blank\">Eureka<\/a> &#8211;\u00a0Elegant iOS form builder in Swift 2.<\/li>\n<li><a href=\"https:\/\/github.com\/soffes\/RateLimit\" target=\"_blank\">RateLimit<\/a> &#8211;\u00a0Simple utility for only executing code every so often.<\/li>\n<li><a href=\"https:\/\/github.com\/onevcat\/Kingfisher\" target=\"_blank\">Kingfisher<\/a> &#8211;\u00a0A lightweight and pure Swift implemented library for downloading and caching image from the web.<\/li>\n<li><a href=\"https:\/\/github.com\/duemunk\/Async\" target=\"_blank\">Async<\/a> &#8211;\u00a0Syntactic sugar in Swift for asynchronous dispatches in Grand Central Dispatch.<\/li>\n<\/ul>\n<p><em>PS &#8212; Use <a href=\"https:\/\/github.com\/Carthage\/Carthage\" target=\"_blank\">Carthage<\/a>! The concept is forward-compatible with <a href=\"https:\/\/swift.org\/package-manager\/\" target=\"_blank\">Swift Package Manager<\/a> and doesn&#8217;t mangle up your Xcode project files like CocoaPods \ud83d\ude09<\/em><\/p>\n","link":"https:\/\/basememara.com\/top-10-swift-friendly-cocoapods\/","comment_count":1,"author":2,"featured_media":536,"terms":[52,64,53,4,50,55],"meta":{"_series_part":""},"created":"2015-06-23T14:22:37","modified":"2016-05-12T22:46:03"},{"id":649,"title":"Reading values from any plist file or bundle in Swift","slug":"reading-values-plist-bundle-swift","type":"post","excerpt":"It is convenient to keep your settings or default values in a `.plist` file or settings bundle for your project. In this post, we will explore how to attach an extension off the NSBundle class this make it super easy to read those values.","content":"<p>It is super convenient to keep your settings or default values in a <em>.plist<\/em> file for your project. It allows you to keep your code the same across various apps while differences only residing in a\u00a0configuration\u00a0file. It becomes more sophisticated when you create a <em>Settings.bundle<\/em>\u00a0and store your preferences there. This makes it easy to distribute settings across multiple apps.<\/p>\n<p>This is all nice and dandy until you actually need to read values out of the <em>.plist<\/em> or bundle. Take the below example of a <em>.plist<\/em>\u00a0file containing values\u00a0you would like available for\u00a0your app:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/plist-values-500x386.png\" alt=\"plist-values\" width=\"500\" height=\"386\" class=\"aligncenter size-medium wp-image-650\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/plist-values-500x386.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/plist-values-768x593.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/plist-values-1024x791.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/plist-values.png 1124w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>To extract these values into a `[String: AnyObject]`, you&#8217;ll have to call some awkward\u00a0API&#8217;s from Apple. For convenience, below you&#8217;ll find an extension I created off the <a href=\"https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Reference\/Foundation\/Classes\/NSBundle_Class\/\" target=\"_blank\">NSBundle class<\/a>\u00a0so you can easily get those values from any <em>.plist<\/em> file or bundle:<\/p>\n<pre class=\"lang:js decode:true\">public extension NSBundle {\r\n    \r\n    \/**\r\n     Gets the contents of the specified plist file.\r\n     \r\n     - parameter plistName: property list where defaults are declared\r\n     - parameter bundle: bundle where defaults reside\r\n     \r\n     - returns: dictionary of values\r\n     *\/\r\n    public static func contentsOfFile(plistName: String, bundle: NSBundle? = nil) -&gt; [String : AnyObject] {\r\n        let fileParts = plistName.componentsSeparatedByString(\".\")\r\n        \r\n        guard fileParts.count == 2,\r\n            let resourcePath = (bundle ?? NSBundle.mainBundle()).pathForResource(fileParts[0], ofType: fileParts[1]),\r\n            let contents = NSDictionary(contentsOfFile: resourcePath) as? [String : AnyObject]\r\n            else { return [:] }\r\n        \r\n        return contents\r\n    }\r\n    \r\n    \/**\r\n     Gets the contents of the specified bundle URL.\r\n     \r\n     - parameter bundleURL: bundle URL where defaults reside\r\n     - parameter plistName: property list where defaults are declared\r\n     \r\n     - returns: dictionary of values\r\n     *\/\r\n    public static func contentsOfFile(bundleURL bundleURL: NSURL, plistName: String = \"Root.plist\") -&gt; [String : AnyObject] {\r\n        \/\/ Extract plist file from bundle\r\n        guard let contents = NSDictionary(contentsOfURL: bundleURL.URLByAppendingPathComponent(plistName))\r\n            else { return [:] }\r\n        \r\n        \/\/ Collect default values\r\n        guard let preferences = contents.valueForKey(\"PreferenceSpecifiers\") as? [String: AnyObject]\r\n            else { return [:] }\r\n        \r\n        return preferences\r\n    }\r\n    \r\n    \/**\r\n     Gets the contents of the specified bundle name.\r\n     \r\n     - parameter bundleName: bundle name where defaults reside\r\n     - parameter plistName: property list where defaults are declared\r\n     \r\n     - returns: dictionary of values\r\n     *\/\r\n    public static func contentsOfFile(bundleName bundleName: String, plistName: String = \"Root.plist\") -&gt; [String : AnyObject] {\r\n        guard let bundleURL = NSBundle.mainBundle().URLForResource(bundleName, withExtension: \"bundle\")\r\n            else { return [:] }\r\n        \r\n        return contentsOfFile(bundleURL: bundleURL, plistName: plistName)\r\n    }\r\n    \r\n    \/**\r\n     Gets the contents of the specified bundle.\r\n     \r\n     - parameter bundle: bundle where defaults reside\r\n     - parameter bundleName: bundle name where defaults reside\r\n     - parameter plistName: property list where defaults are declared\r\n     \r\n     - returns: dictionary of values\r\n     *\/\r\n    public static func contentsOfFile(bundle bundle: NSBundle, bundleName: String = \"Settings\", plistName: String = \"Root.plist\") -&gt; [String : AnyObject] {\r\n        guard let bundleURL = bundle.URLForResource(bundleName, withExtension: \"bundle\")\r\n            else { return [:] }\r\n        \r\n        return contentsOfFile(bundleURL: bundleURL, plistName: plistName)\r\n    }\r\n    \r\n}<\/pre>\n<p>I provided several overloaded functions to read from any <em>.plist<\/em> file or bundle. Note that if you would like to use a <em>Settings.bundle<\/em>, open up the <em>&#8220;Root.plist&#8221;<\/em> file, then right-click in the contents pane, go to <em>&#8220;Property List Type&#8221;<\/em>, and select <em>&#8220;Info.plist&#8221;<\/em>. This will allow to add a dictionary of values into the <em>&#8220;Root.plist&#8221;<\/em> file.<\/p>\n<p>Now with the above extension in place, you can simply use it like this:<\/p>\n<pre class=\"lang:swift decode:true\">let values = NSBundle.contentsOfFile(\"Settings.plist\")\r\nprint(values[\"MyString1\"]) \/\/ My string value 1.<\/pre>\n<p>The dictionary in the previous screenshot was displaying values from a file called <em>&#8220;Settings.plist&#8221;<\/em>. The above code snippet retrieves those values and puts them into a dictionary in one line with all the safe guards in place. Enjoy \ud83d\ude42<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/reading-values-plist-bundle-swift\/","comment_count":4,"author":2,"featured_media":650,"terms":[50,55,47],"meta":{"_series_part":""},"created":"2016-03-08T13:00:30","modified":"2016-03-05T05:07:33"},{"id":629,"title":"Unit Testing in Swift, Xcode, and Beyond","slug":"unit-testing-in-swift-xcode-and-beyond","type":"post","excerpt":"","content":"<p>Unit testing has\u00a0a stigma of slowing you down while you&#8217;re trying to rock some code. The truth is unit testing doesn&#8217;t have to be so dry. Once you\u00a0start flipping the script, unit testing can be\u00a0an opportunity for\u00a0refactoring, refreshing, and finding bugs.\u00a0Besides, who wouldn&#8217;t\u00a0want to see a bunch of green checkmarks next to\u00a0their code?:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Unit_Testing_Successes-364x800.png\" alt=\"Unit Testing Successes\" width=\"364\" height=\"800\" class=\"aligncenter size-medium wp-image-630\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Unit_Testing_Successes-364x800.png 364w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Unit_Testing_Successes-466x1024.png 466w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Unit_Testing_Successes.png 646w\" sizes=\"(max-width: 364px) 100vw, 364px\" \/><\/p>\n<p>A beauty isn&#8217;t it? This is telling me\u00a0that my\u00a0code works, in the midsts of all the changing versions of platforms, frameworks, libraries, SDK&#8217;s, etc&#8230; it&#8217;s a miracle really. These unit test passes\u00a0brings a new sense of confidence\u00a0to the code and overall applications that depend on it.<\/p>\n<h2>Getting Started<\/h2>\n<p>So you&#8217;re convinced that unit testing can actually be fun. Check out how quick it is to set up.<\/p>\n<ol>\n<li>Add unit testing to any new or existing project. When creating a new project, ensure the <em>&#8220;Include Unit Tests&#8221;<\/em> is checked. For an existing project, highlight\u00a0your project file in Xcode and you will see the\u00a0project and targets pane. Click\u00a0the <em>&#8220;Add a target&#8221;<\/em> button with the plus icon, or find it in the menu under <em>File &gt; New &gt; Target<\/em>.<img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_267-500x487.png\" alt=\"Unit Testing - Add a target\" width=\"500\" height=\"487\" class=\"aligncenter size-medium wp-image-631\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_267-500x487.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_267-768x748.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_267-1024x997.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_267.png 1050w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/li>\n<li>Choose <em>&#8220;iOS Unit Testing Bundle&#8221;<\/em> from the <em>iOS &gt; Test<\/em> templates. You can select a test target from another platform\u00a0&#8211;\u00a0just ensure it matches the project platform you are testing against (where your code is).<img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_268-500x351.png\" alt=\"Unit Testing - iOS Test Bundle\" width=\"500\" height=\"351\" class=\"aligncenter size-medium wp-image-632\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_268-500x351.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_268-768x539.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_268-1024x718.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_268.png 1446w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/li>\n<li>On the next screen, you will name your test project. The important thing here is to select the right target to be tested (again, where your code to test resides).<img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_269-500x350.png\" alt=\"Unit Testing - Xcode\" width=\"500\" height=\"350\" class=\"aligncenter size-medium wp-image-633\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_269-500x350.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_269-768x537.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_269-1024x716.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_269.png 1436w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/li>\n<li>Xcode will create a sample test class for you to try:<img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_270-500x426.png\" alt=\"Unit Testing - Xcode Sample\" width=\"500\" height=\"426\" class=\"aligncenter size-medium wp-image-634\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_270-500x426.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_270-768x654.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_270-1024x871.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_270.png 1356w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/li>\n<li>Click on the diamond icons in the code gutter next to the whole class or an individual function:<br \/>\n<img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_271-500x386.png\" alt=\"Unit Testing - Xcode Successes\" width=\"500\" height=\"386\" class=\"aligncenter size-medium wp-image-635\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_271-500x386.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_271-768x593.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_271-1024x790.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_271.png 1366w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/>Booom! Take a look at those soothing, green icons\u00a0&#8211;\u00a0this indicates all you&#8217;re unit tests were successful. Congratulations, you&#8217;ve just run unit testing in Swift and Xcode!<\/li>\n<\/ol>\n<h2>Breaking It Down<\/h2>\n<p>There is some convention to get out the way\u00a0that\u00a0seem simple and straight-forward. Unit test classes inherit from <em>XCTestCase<\/em>. This base class has overridable <em>setUp<\/em> and <em>tearDown<\/em> functions which will run before and after <strong>EACH<\/strong> test (not each instance of <em>XCTestCase<\/em>). <em>setUp<\/em>\u00a0is where you create instances, load data, set up cache, etc; then in <em>tearDown<\/em> you destroy instances if needed, clear data, clear cache, etc.<\/p>\n<p>Functions that are prefixed with the word <em>&#8220;test&#8221;<\/em> is considered a unit test, then gets those nifty diamond icons to run the test. Feel free to create properties or functions in your test class to facilitate your unit testing &#8211; just don&#8217;t prefix them with <em>&#8220;test&#8221;<\/em> unless it is a unit test.<\/p>\n<h2>Show Me the Code!!<\/h2>\n<p>Real code and logic will paint the whole picture so let&#8217;s jump right in. Say we have this super uber utility helper that we\u00a0would like to test:<\/p>\n<pre class=\"lang:js decode:true\">public struct WebHelper {\r\n    \r\n    \/**\r\n     Add, update, or remove a query string parameter from the URL\r\n     \r\n     - parameter url:   the URL\r\n     - parameter key:   the key of the query string parameter\r\n     - parameter value: the value to replace the query string parameter, nil will remove item\r\n     \r\n     - returns: the URL with the mutated query string\r\n     *\/\r\n    public func addOrUpdateQueryStringParameter(url: String, key: String, value: String?) -&gt; String {\r\n        if let components = NSURLComponents(string: url),\r\n            var queryItems: [NSURLQueryItem] = (components.queryItems ?? []) {\r\n                for (index, item) in queryItems.enumerate() {\r\n                    \/\/ Match query string key and update\r\n                    if item.name.lowercaseString == key.lowercaseString {\r\n                        if let v = value {\r\n                            queryItems[index] = NSURLQueryItem(name: key, value: v)\r\n                        } else {\r\n                            queryItems.removeAtIndex(index)\r\n                        }\r\n                        components.queryItems = queryItems.count &gt; 0\r\n                            ? queryItems : nil\r\n                        return components.string!\r\n                    }\r\n                }\r\n                \r\n                \/\/ Key doesn't exist if reaches here\r\n                if let v = value {\r\n                    \/\/ Add key to URL query string\r\n                    queryItems.append(NSURLQueryItem(name: key, value: v))\r\n                    components.queryItems = queryItems\r\n                    return components.string!\r\n                }\r\n        }\r\n        \r\n        return url\r\n    }\r\n    \r\n    \/**\r\n     Removes a query string parameter from the URL\r\n     \r\n     - parameter url:   the URL\r\n     - parameter key:   the key of the query string parameter\r\n     \r\n     - returns: the URL with the mutated query string\r\n     *\/\r\n    public func removeQueryStringParameter(url: String, key: String) -&gt; String {\r\n        return addOrUpdateQueryStringParameter(url, key: key, value: nil)\r\n    }\r\n    \r\n}<\/pre>\n<p>The code is not the point, but it is to illustrate real world logic for context. This particular function <a href=\"http:\/\/basememara.com\/updating-query-string-parameters-in-swift\/\" target=\"_blank\">adds and removes query string parameters from a given URL string<\/a>.<\/p>\n<p>Now let&#8217;s unit test this!!!<\/p>\n<h2>The\u00a0Real Unit Test<\/h2>\n<p>In your unit test target, add a new Swift file. For convention, I like to keep the unit test class in the same folder structure as what I&#8217;m testing and append the word <em>&#8220;Tests&#8221;<\/em> at the end of the class name. Also, be sure the target membership is marked for your unit test target.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_273-500x296.png\" alt=\"Unit Testing - Xcode Code Panes\" width=\"500\" height=\"296\" class=\"aligncenter size-medium wp-image-638\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_273-500x296.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_273-768x455.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_273-1024x607.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Here&#8217;s what the unit test\u00a0code\u00a0can look like for my corresponding\u00a0<em>WebHelper<\/em> class:<\/p>\n<pre class=\"lang:swift decode:true\">import Foundation\r\nimport XCTest\r\n\r\nclass WebTimeHelperTests: XCTestCase {\r\n    \r\n    var webHelper: WebHelper!\r\n    \r\n    override func setUp() {\r\n        super.setUp()\r\n        \r\n        webHelper = WebHelper()\r\n    }\r\n    \r\n    func testAddOrUpdateQueryStringParameter() {\r\n        let value = \"https:\/\/example.com?abc=123&amp;lmn=tuv&amp;xyz=987\"\r\n        \r\n        let newValue = webHelper.addOrUpdateQueryStringParameter(value, key: \"aBc\", value: \"555\")\r\n        let expectedValue = \"https:\/\/example.com?aBc=555&amp;lmn=tuv&amp;xyz=987\"\r\n        \r\n        XCTAssertEqual(newValue, expectedValue,\r\n            \"String should be \\(expectedValue)\")\r\n    }\r\n    \r\n    func testRemoveQueryStringParameter() {\r\n        let value = \"https:\/\/example.com?abc=123&amp;lmn=tuv&amp;xyz=987\"\r\n        \r\n        let newValue = webHelper.removeQueryStringParameter(value, key: \"xyz\")\r\n        let expectedValue = \"https:\/\/example.com?abc=123&amp;lmn=tuv\"\r\n        \r\n        XCTAssertEqual(newValue, expectedValue,\r\n            \"String should be \\(expectedValue)\")\r\n    }\r\n    \r\n    func testAddOrUpdateQueryStringParameterForAdd() {\r\n        let value = \"https:\/\/example.com?abc=123&amp;lmn=tuv&amp;xyz=987\"\r\n        \r\n        let newValue = webHelper.addOrUpdateQueryStringParameter(value, key: \"def\", value: \"456\")\r\n        let expectedValue = \"https:\/\/example.com?abc=123&amp;lmn=tuv&amp;xyz=987&amp;def=456\"\r\n        \r\n        XCTAssertEqual(newValue, expectedValue,\r\n            \"String should be \\(expectedValue)\")\r\n    }\r\n}<\/pre>\n<p>In each test function, I&#8217;m calling my web helper API, such as <em>addOrUpdateQueryStringParameter<\/em>, with sample data to see if it is indeed adding or removing query string parameters from the URL value. I&#8217;m doing this\u00a0by storing the result in a variable. Then I am comparing them to hard-coded results that I know are true &#8211; using <em>XCTAssert<\/em>. That&#8217;s all there is to it!<\/p>\n<p>It all\u00a0comes down to\u00a0<em>XCTAssert<\/em> and it&#8217;s variations, which takes on a boolean as a parameter value:\u00a0<em>XCTAssert(expression,&#8230;)<\/em>. If the parameter is true, the unit test\u00a0passes; if the parameter\u00a0is false, then it fails. In my\u00a0case, I&#8217;m using\u00a0<em>XCTAssertEqual<\/em>, which compares two values and passes if they match.<\/p>\n<h2>Tip and Tricks<\/h2>\n<p>It&#8217;s good to note that you can see a hierarchical view of all your tests and run them at once from the <em>&#8220;Test Navigator&#8221;<\/em> with the button with the diamond with the line in the middle:<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_272-500x328.png\" alt=\"Unit Tests - Xcode Test Navigator\" width=\"500\" height=\"328\" class=\"aligncenter size-medium wp-image-636\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_272-500x328.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_272-768x503.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_272-1024x671.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/CapturFiles_272.png 1090w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Right-click and enable if the unit tests are\u00a0grayed out. Then you can run the unit tests globally from here instead of in the code editor.<\/p>\n<p>Also, if you get any build errors with the unit tests, they won&#8217;t show up as normal with the other build errors. You must look at them from the <em>&#8220;Report Navigator&#8221;<\/em> pane.<\/p>\n<p>Another thing is in the <em>&#8220;Breakpoint Navigator&#8221;<\/em> pane. Click the plus sign in the bottom left corner and select <em>&#8220;Add Test Failure Breakpoint&#8221;<\/em>. You will get a test failure breakpoint that will always stop the debugger if any of your unit tests fail.\u00a0Very convenient so you can see the live values of the variables during\u00a0the point of failure and step through it from there.<\/p>\n<p><img src=\"http:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Screen-Shot-2016-01-22-at-12.24.34-AM-500x513.png\" alt=\"Unit Tests - Test Failure Breakpoint\" width=\"500\" height=\"513\" class=\"aligncenter size-medium wp-image-637\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Screen-Shot-2016-01-22-at-12.24.34-AM-500x513.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Screen-Shot-2016-01-22-at-12.24.34-AM-768x789.png 768w, https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Screen-Shot-2016-01-22-at-12.24.34-AM.png 818w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Feel free to add other breakpoints in your project code and they will be hit as normal too!<\/p>\n<h2>Conclusion<\/h2>\n<p>There&#8217;s really no excuse for skipping\u00a0unit testing for any solution.\u00a0It is easy to set up and the peace of mind goes a long way. More importantly, your code is now bug-free,\u00a0well almost \ud83d\ude09<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n<hr \/>\n<p><em>To download the sample, check out the <a href=\"https:\/\/github.com\/ZamzamInc\/XcodeUnitTesting-Swift\" target=\"_blank\">Github project<\/a>\u00a0and try for yourself.<\/em><\/p>\n","link":"https:\/\/basememara.com\/unit-testing-in-swift-xcode-and-beyond\/","comment_count":1,"author":2,"featured_media":630,"terms":[50,55,60,47],"meta":{"_series_part":""},"created":"2016-01-22T06:06:07","modified":"2016-01-22T06:16:50"},{"id":476,"title":"Sharing Data Between Apple Watch and iPhone in Swift","slug":"sharing-data-between-apple-watch-and-iphone-in-swift","type":"post","excerpt":"There are various ways to persist data in the Apple ecosystem. They range from simple to complex. In this post, learn how easy it is to use App Groups and NSUserDefaults to share data between Apple Watch WatchKit and iPhone iOS using Swift.","content":"<p>There are various ways to persist data in the Apple ecosystem. They range from simple to complex, depending on the type and amount of data saved. On the more complex end of the spectrum, you have SQLite for traditional relational data storage, <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/Cocoa\/Conceptual\/CoreData\/cdProgrammingGuide.html\" target=\"_blank\">Core Data<\/a> for modern object persistance,\u00a0and\u00a0iCloud for device synchronization. In the middle, you have <a href=\"https:\/\/developer.apple.com\/library\/ios\/documentation\/Cocoa\/Reference\/Foundation\/Classes\/NSCoder_Class\/index.html\" target=\"_blank\">NSCoder<\/a> and\u00a0<a href=\"https:\/\/developer.apple.com\/library\/prerelease\/ios\/documentation\/Cocoa\/Reference\/Foundation\/Classes\/NSKeyedArchiver_Class\/index.html\" target=\"_blank\">NSKeyedArchiver<\/a>\u00a0for serializing classes to local document files. And finally, you have the simplest type of storage, which is\u00a0<a href=\"https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Reference\/Foundation\/Classes\/NSUserDefaults_Class\/\" target=\"_blank\">NSUserDefaults<\/a>\u00a0that allows you to store simple things like strings and numbers. In this post, I&#8217;d like to focus on NSUserDefaults and how to share it between devices.<\/p>\n<h2>The Scoop\u00a0on NSUserDefaults<\/h2>\n<p>NSUserDefaults\u00a0allows you\u00a0save settings and properties related to application or user data, even if the user exits the app and comes back later. It is usually seen as the quick and dirty way to persist data. The reason I say <em>&#8220;quick and dirty&#8221;<\/em> is because it is dead simple, but sometimes easily abused. The types of data that can stored are the following:<\/p>\n<ul>\n<li>Strings<\/li>\n<li>Numbers<\/li>\n<li>Booleans<\/li>\n<li>Dates<\/li>\n<li>Arrays<\/li>\n<li>Dictionaries<\/li>\n<li>NSData<\/li>\n<\/ul>\n<p>As you can see, it is only simple data that can be stored in NSUserDefaults, with the exception of <a href=\"https:\/\/developer.apple.com\/library\/mac\/documentation\/Cocoa\/Reference\/Foundation\/Classes\/NSData_Class\/\" target=\"_blank\">NSData<\/a>\u00a0which actually serializes data to get around the limitations, but even that has limitations. If you need to persist data any more complex than these, such as collections of custom objects or object relationships, better look at the other storage methods like Core Data.<\/p>\n<h2>Show Me the Code!!<\/h2>\n<p>To actually store data using NSUserDefaults, it is super simple:<\/p>\n<pre class=\"lang:swift decode:true\">let userDefaults = NSUserDefaults.standardUserDefaults()\r\nuserDefaults.setObject(true, forKey: \"isDarkModeEnabled\")<\/pre>\n<p>That&#8217;s it!<\/p>\n<p>Ok, but the post title says how to share data between Apple Watch or iPhone. The above code will only save the data to the local device.<\/p>\n<h2>Enter App Groups<\/h2>\n<p>App Groups were introduced in iOS8. It can be thought of as a container of data in the cloud that multiple apps and widgets can share. They are synchronized to the device so they become available offline, but sync up when online. Bless the souls who had to share data prior to iOS8.<\/p>\n<p>To start using App Groups, you must enable it for each target in your Xcode project that will need to use it:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/iOS-App-Groups.png\"><img class=\"aligncenter size-medium wp-image-477\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/iOS-App-Groups-500x242.png\" alt=\"iOS App Groups\" width=\"500\" height=\"242\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/iOS-App-Groups-500x242.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/iOS-App-Groups-1024x496.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/iOS-App-Groups-300x145.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/iOS-App-Groups.png 1246w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>When you hit the <em>&#8220;+&#8221;<\/em> button, you will create your\u00a0container ID that all targets and apps will use.\u00a0An app group container ID begins with <em>&#8220;group.&#8221;<\/em>\u00a0followed by a string in reverse DNS notation. An example is: <em>group.com.example.My-App<\/em>. Xcode will actually make the change to your App ID in your developer account automatically.<\/p>\n<p>To use App Groups, it&#8217;s not that different or difficult to use than NSUserDefaults:<\/p>\n<pre class=\"lang:swift decode:true\">var userDefaults = NSUserDefaults(suiteName: \"group.com.example.My-App\")\r\nuserDefaults.setObject(true, forKey: \"isDarkModeEnabled\")\r\nuserDefaults.synchronize()<\/pre>\n<p>The only differences here are\u00a0how NSUserDefaults is instantiated and calling <em>synchronize<\/em> at the end. You feed it the container ID to the constructor parameter called <em>&#8220;suiteName&#8221;<\/em>, then call <em>&#8220;synchronize()&#8221;<\/em>, and your data flies to the cloud for other apps and devices to consume.<\/p>\n<p>Although I titled this post how to share data between Apple Watch and iPhone, this can be used with any device in the Apple ecosystem, including OS X and iPads.<\/p>\n<h2>Taking It to the Next Level<\/h2>\n<p>You can take this one step further by creating a class for your app and abstract the underlying storage for your properties. Here&#8217;s an example:<\/p>\n<pre class=\"lang:swift decode:true\">public class ConfigurationModel: NSObject {\r\n\r\n  public static let storageKey = \"group.com.example.My-App\"\r\n  public let userStorage = NSUserDefaults(suiteName: storageKey)\r\n    \r\n  public var isDarkModeEnabled: Bool {\r\n    get {\r\n      \/\/ Get setting from storage or default\r\n      if userStorage?.objectForKey(\"isDarkModeEnabled\") == nil {\r\n        userStorage?.setObject(false, forKey: \"isDarkModeEnabled\")\r\n        userStorage?.synchronize()\r\n      }\r\n        \r\n      return userStorage?.objectForKey(\"isDarkModeEnabled\")\r\n  }\r\n\r\n  set {\r\n    \/\/ Set new value in storage\r\n    userStorage?.setObject(newValue, forKey: \"isDarkModeEnabled\")\r\n    userStorage?.synchronize()\r\n  }\r\n}<\/pre>\n<p>At the top of the class, I am declaring my group container ID and creating the NSUserDefault object out of it. Then my properties for the class have getters and setters to store the data to the App Group. If the key doesn&#8217;t exist, it creates it with a default value and synchronizes it. Using the class from this point forward is simple:<\/p>\n<pre class=\"lang:swift decode:true\">var configModel = ConfigurationModel()\r\nconfigModel.isDarkModeEnabled = true<\/pre>\n<p>This property is stored in the cloud! Everything is abstracted away for you. You don&#8217;t have to be bothered about\u00a0storing and synchronizing it into the App Group. It&#8217;s all done automatically for you in the getters and setters!<\/p>\n<p>The true power of this becomes realized when you put this class in <a href=\"http:\/\/basememara.com\/creating-a-framework-in-swift\/\">a Swift framework<\/a> and start sharing it between targets and even projects.<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/sharing-data-between-apple-watch-and-iphone-in-swift\/","comment_count":2,"author":2,"featured_media":569,"terms":[54,53,4,50,55,49,47],"meta":{"_series_part":""},"created":"2015-05-14T16:04:15","modified":"2015-08-15T15:36:35"},{"id":386,"title":"Adding WatchKit Table Lists in Apple Watch","slug":"adding-watchkit-table-lists-in-apple-watch","type":"post","excerpt":"Displaying a list of records to users is one of the most common needs for any application. We see this from grids on the web, to table list views on iPhones, and now the trend should continue in Apple Watch. In this post, I'd like to show you how to add a table to your Apple Watch app.","content":"<p>Displaying a list of records to users is one of the most common needs for any application. We see this from grids on the web, to list views on smart phones, and now the trend should continue on in smart watches. In this post, I&#8217;d like to show you how to add a table to your Apple Watch app.<\/p>\n<h2>The Interface Table<\/h2>\n<p>The easy part is to drag and drop a table control to your storyboard:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag.png\"><img class=\"aligncenter wp-image-387 size-medium\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-500x266.png\" alt=\"WatchKit Table Drag\" width=\"500\" height=\"266\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-500x266.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-1024x544.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-300x159.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag.png 1084w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>What&#8217;s not so obvious is what to do from here. The table row that is displayed is a template that will be used for all the rows\u00a0and acts\u00a0like a group container. In it, you will drag and drop other controls into it. For this example, let us simply add an image and a label:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Controls.png\"><img class=\"aligncenter wp-image-388 size-medium\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Controls-500x442.png\" alt=\"WatchKit Table Controls\" width=\"500\" height=\"442\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Controls-500x442.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Controls-1024x905.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Controls-300x265.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Controls.png 1068w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Notice that the controls are placed side-to-side in the table. Again, it acts like the group control. Let&#8217;s size it right so the image takes up 25% and the label takes up 75% of the width. See the size section in the above screenshot: 0.25 of the relative to container size.<\/p>\n<h2>Dude, Where&#8217;s My Rows?!<\/h2>\n<p>How do you populate the rows with your records though? This takes a few steps. First, let&#8217;s create an outlet for our table onto our interface class. We do this by <em>Control+dragging<\/em> the table onto the class in split view. I called it <em>currentTable<\/em> and we will use this later:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-2.png\"><img class=\"aligncenter size-medium wp-image-394\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-2-500x213.png\" alt=\"WatchKit Table Drag 2\" width=\"500\" height=\"213\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-2-500x213.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-2-1024x435.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-2-300x128.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Drag-2.png 1164w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Next,\u00a0we will need to create a class for our table row controller. What this means is that the row needs to have a reference in code so each record can update the row components programatically.<\/p>\n<p>To do this, let&#8217;s add a fresh Swift class into our project like this:<\/p>\n<pre class=\"lang:swift decode:true\">class CategoryRowView: NSObject {\r\n    \r\n}<\/pre>\n<p>It&#8217;s just a blank class for now, but the interesting part is how we are going to wire that up to our table row. In the storyboard, show the document outline so you can see the control hierarchy of your interface, then highlight the <em>&#8220;Table Row Controller&#8221;<\/em>:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Doc-Outline.png\"><img class=\"aligncenter size-medium wp-image-389\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Doc-Outline-500x421.png\" alt=\"WatchKit Table Doc Outline\" width=\"500\" height=\"421\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Doc-Outline-500x421.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Doc-Outline-1024x863.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Doc-Outline-300x253.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Doc-Outline.png 1068w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Then in the right pane, we are going to adjust the properties for the table row. In the newspaper-looking icon is the identity inspector of the table row. Here we are going to assign our <em>&#8220;CategoryRowView&#8221;<\/em> class we created to wire it together:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Custom-Class.png\"><img class=\"aligncenter wp-image-390\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Custom-Class-500x395.png\" alt=\"WatchKit Table Custom Class\" width=\"300\" height=\"237\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Custom-Class-500x395.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Custom-Class-300x237.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Custom-Class.png 514w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p>Also for sanity, I&#8217;ve also gave the table row a custom identifier, it can be called anything but will manifest later how it is used:<\/p>\n<p><img class=\"aligncenter wp-image-391\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Custom-Identifier-500x319.png\" alt=\"WatchKit Table Custom Identifier\" width=\"300\" height=\"191\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Custom-Identifier-500x319.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Custom-Identifier-300x191.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Custom-Identifier.png 518w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p>Now let&#8217;s start creating references to the row controls. We do this like any other interface item in our storyboard. Open the split view and start <em>Control+dragging<\/em> the components form the interface to the class:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Drag.png\"><img class=\"aligncenter size-medium wp-image-392\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Drag-500x297.png\" alt=\"WatchKit Table Row Drag\" width=\"500\" height=\"297\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Drag-500x297.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Drag-1024x608.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Drag-300x178.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Drag.png 1219w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>I did this for the label and the image. You can call the variables anything you like:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Connect.png\"><img class=\"aligncenter size-medium wp-image-393\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Connect-500x253.png\" alt=\"WatchKit Table Row Connect\" width=\"500\" height=\"253\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Connect-500x253.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Connect-300x152.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Table-Row-Connect.png 862w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Sweet, now we can update the row programmatically through the class properties!\u00a0Our class should look like this:<\/p>\n<pre class=\"lang:swift decode:true \">class CategoryRowView: NSObject {\r\n    \r\n    @IBOutlet var itemLabel: WKInterfaceLabel!\r\n    @IBOutlet var itemImage: WKInterfaceImage!\r\n    \r\n}<\/pre>\n<h2>Show Me the Code!<\/h2>\n<p>We are ready to populate the table. We do this by letting the app know how many rows this table will have, then loop through it and update the row programmatically:<\/p>\n<pre class=\"lang:swift decode:true\">override func willActivate() {\r\n    \/\/ This method is called when watch view controller is about to be visible to user\r\n    super.willActivate()\r\n    \r\n    \/\/ Initialize table\r\n    currentTable.setNumberOfRows(10, withRowType: \"categoryRow\")\r\n    \r\n    \/\/ Populate the table\r\n    for index in 0...9 {\r\n        var row = currentTable.rowControllerAtIndex(index) as! CategoryRowView\r\n        row.itemLabel.setText(\"Item \\(index)\")\r\n        row.itemImage.setImageNamed(\"white_apple\")\r\n    }\r\n}<\/pre>\n<p>Notice I am using the same identifier name set in the properties when calling <em>&#8220;currentTable.setNumberOfRows&#8221;<\/em>. Also, I am casting the row to our class &#8220;CategoryRowView&#8221; in each iteration of the loop. This way, I can update the row outlets.<\/p>\n<p>Another thing worth mentioning is I populated the table\u00a0in the <em>&#8220;willActivate&#8221;<\/em> event, but this will also work in the <em>&#8220;awakeWithContext&#8221;<\/em> event. It depends on how dynamic your table will be. If the table data is constantly changing, load the table in the <em>&#8220;willActivate&#8221;<\/em> event so every time the user loads that page, it will query fresh data. Otherwise, the data will be stale and only load when the app loads the first time. It depends on the scenario really and balancing that with performance.<\/p>\n<h2>The Demo<\/h2>\n<p>Your WatchKit app should look something like this:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-Table-Demo-2.png\"><img class=\"aligncenter size-medium wp-image-395\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-Table-Demo-2-500x650.png\" alt=\"Watchkit Table Demo 2\" width=\"500\" height=\"650\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-Table-Demo-2-500x650.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-Table-Demo-2-300x390.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-Table-Demo-2.png 622w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>It populated each row using the row controller of the table. The key was to assign a class to it, create outlets to the row components, and loop through the table to assign the values.<\/p>\n<p>To handle the click event for each row, <em>override<\/em> the table function in your controller with the\u00a0<em>didSelectRowAtIndex<\/em> parameter:<\/p>\n<pre class=\"lang:swift decode:true\">override func table(table: WKInterfaceTable, didSelectRowAtIndex rowIndex: Int) {\r\n    \/\/ Redirect to controller with unit instance\r\n    self.pushControllerWithName(\"anotherController\", context: rowIndex))\r\n}<\/pre>\n<p>This event will get triggered when a table row was selected, along with the index of that row.<\/p>\n<p><strong><em>HAPPY CODING!!<\/em><\/strong><\/p>\n","link":"https:\/\/basememara.com\/adding-watchkit-table-lists-in-apple-watch\/","comment_count":0,"author":2,"featured_media":434,"terms":[4,50,49,47],"meta":{"_series_part":""},"created":"2015-04-28T09:00:49","modified":"2015-08-04T03:07:50"},{"id":529,"title":"Multidimensional Typed Arrays in Android Resources","slug":"storing-multidimensional-resource-arrays-in-android","type":"post","excerpt":"Android has a convenient XML-based resources architecture that allows you to define strings, booleans, colors, dimensions, ID's, integers, integer arrays, and typed arrays. Take this one step further by storing multidimensional arrays for complex objects.","content":"<p>Android has a convenient <a href=\"http:\/\/developer.android.com\/guide\/topics\/resources\/more-resources.html#TypedArray\" target=\"_blank\">XML-based resources<\/a> architecture that allows you to define strings, booleans, colors, dimensions, ID&#8217;s, integers, integer arrays, and typed arrays. These XML files are stored <em>and<\/em> merged from\u00a0`res\/values` and look like this:<\/p>\n<pre class=\"lang:xhtml decode:true \">&lt;resources&gt;\r\n    &lt;string name=\"menu_settings\"&gt;Settings&lt;\/string&gt;\r\n    &lt;string name=\"share\"&gt;Share&lt;\/string&gt;\r\n    &lt;string name=\"favorite\"&gt;Favorite&lt;\/string&gt;\r\n    &lt;string name=\"comment\"&gt;Comment&lt;\/string&gt;\r\n&lt;\/resources&gt;<\/pre>\n<p>Now you can access these throughout your code base using `R.string.menu_settings` or `R.string.share`, etc. And as an added bonus, localizing is simple from here&#8230; but we aren&#8217;t here to talk about localization. We are here to talk about taking array of types once step further!<\/p>\n<h2>What the Hack?<\/h2>\n<p>Unfortunately, the array of types fall short in allowing you to store an array of complex types. You can simply store array of primitive types like this:<\/p>\n<pre class=\"lang:xhtml decode:true \">&lt;resources&gt;\r\n    &lt;array name=\"categories\"&gt;\r\n        &lt;item&gt;Food&lt;\/item&gt;\r\n        &lt;item&gt;Health&lt;\/item&gt;\r\n        &lt;item&gt;Garden&lt;\/item&gt;\r\n    &lt;\/array&gt;\r\n&lt;\/resources&gt;<\/pre>\n<p>Ok, although I sincerely do appreciate it, it falls short and many real-world scenarios. For example, what if I wanted to store the ID of the categories above? Now I&#8217;m pushed away\u00a0from using an extremely simple, out-of-the-box solution, to a complex solution that uses\u00a0<a href=\"http:\/\/developer.android.com\/reference\/android\/content\/res\/XmlResourceParser.html\" target=\"_blank\">XmlResourceParser<\/a> on nested XML.<\/p>\n<p>Here&#8217;s a clever alternative&#8230; you can store your complex objects as an array, then suffix the name with an incremental integer. Loop through them and create a list of strongly-typed objects from there if needed.<\/p>\n<h2>What?! Show Me the Code!!<\/h2>\n<p>Ok here&#8217;s what I mean&#8230; maintain your XML as so:<\/p>\n<pre class=\"lang:xhtml decode:true \">&lt;resources&gt;\r\n    &lt;array name=\"categories_0\"&gt;\r\n        &lt;item&gt;1&lt;\/item&gt;\r\n        &lt;item&gt;Food&lt;\/item&gt;\r\n    &lt;\/array&gt;\r\n    &lt;array name=\"categories_1\"&gt;\r\n        &lt;item&gt;2&lt;\/item&gt;\r\n        &lt;item&gt;Health&lt;\/item&gt;\r\n    &lt;\/array&gt;\r\n    &lt;array name=\"categories_2\"&gt;\r\n        &lt;item&gt;3&lt;\/item&gt;\r\n        &lt;item&gt;Garden&lt;\/item&gt;\r\n    &lt;\/array&gt;\r\n&lt;resources&gt;<\/pre>\n<p>Now each category is an array with a key\/value pair for it&#8217;s properties. What ties it with other categories is the integer suffix. Now we can use this dandy static method to grab them:<\/p>\n<pre class=\"lang:java decode:true \">public class ResourceHelper {\r\n\r\n    public static List&lt;TypedArray&gt; getMultiTypedArray(Context context, String key) {\r\n        List&lt;TypedArray&gt; array = new ArrayList&lt;&gt;();\r\n\r\n        try {\r\n            Class&lt;R.array&gt; res = R.array.class;\r\n            Field field;\r\n            int counter = 0;\r\n\r\n            do {\r\n                field = res.getField(key + \"_\" + counter);\r\n                array.add(context.getResources().obtainTypedArray(field.getInt(null)));\r\n                counter++;\r\n            } while (field != null);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            return array;\r\n        }\r\n    }\r\n}<\/pre>\n<p>This is dynamically retrieving the resources programmatically, with an incremented counter to find the next object until there isn&#8217;t one left.\u00a0Now this can be consumed throughout your code base like this:<\/p>\n<pre class=\"lang:java mark:1 decode:true\">for (TypedArray item : ResourceHelper.getMultiTypedArray(this, \"categories\")) {\r\n    Category category = new Category();\r\n    category.ID = item.getInt(0, 0);\r\n    category.title = item.getString(1);\r\n    mCategories.add(category);\r\n}<\/pre>\n<p>I&#8217;m looping through the array of `TypedArray&#8217;s` and binding them to a class, and still maintaining the resources easily from the XML.\u00a0Enjoy!<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n<hr \/>\n<h3>References:<\/h3>\n<ul>\n<li><a href=\"http:\/\/joerg-richter.fuyosoft.com\/?p=100\" target=\"_blank\">Multidimensional resource arrays in Android<\/a><\/li>\n<li><a href=\"http:\/\/daniel-codes.blogspot.ca\/2009\/12\/dynamically-retrieving-resources-in.html\" target=\"_blank\">Dynamically Retrieving Resources in Android<\/a><\/li>\n<li><a href=\"http:\/\/developer.android.com\/guide\/topics\/resources\/more-resources.html\" target=\"_blank\">Android: More Resource Types<\/a><\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n","link":"https:\/\/basememara.com\/storing-multidimensional-resource-arrays-in-android\/","comment_count":3,"author":2,"featured_media":531,"terms":[56,57,4],"meta":{"_series_part":""},"created":"2015-07-27T19:48:52","modified":"2015-07-27T19:52:23"},{"id":421,"title":"WatchKit Apps Released for the Apple Watch Launch","slug":"watchkit-apps-released-for-the-apple-watch-launch","type":"post","excerpt":"The Apple Watch was launched today and I am delighted to announce that I have released 2 WatchKits apps for the new device! It is exciting to be among the first and I look forward to contributing to this space. The next era of the mobile revolution has arrived and invite you to join me in this journey. Check out the following apps.","content":"<p>The <a href=\"https:\/\/www.apple.com\/watch\/\" target=\"_blank\">Apple Watch<\/a> was launched today and I am delighted\u00a0to announce that I have released 2 WatchKits apps for the new device! It is exciting to be among the first and I look forward to contributing to this space. The next era of the mobile revolution has arrived and invite you to join me in this journey. Check out the following apps:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Icon-29@2x.png\"><img class=\" size-full wp-image-472 alignleft\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Icon-29@2x.png\" alt=\"Icon-29@2x\" width=\"58\" height=\"58\" \/><\/a><a href=\"https:\/\/itunes.apple.com\/us\/app\/tip-watch\/id983145255?ls=1&amp;mt=8\" target=\"_blank\">Tip Watch<\/a>:\u00a0Swiftly calculate tips with a minimal interface designed exclusively for the Apple Watch. Tip Watch provides a single screen with all your calculations displayed right in front of you. Tap the +\/- buttons for small adjustments, or tap the bill to get a number pad for entering more precise amounts. Quick, easy, and convenient workflow designed for your wrist!<\/p>\n<p><img class=\"aligncenter wp-image-423\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Tip-Calculator-Apple-Watch.jpg\" alt=\"Tip Calculator - Apple Watch\" width=\"250\" height=\"313\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Tip-Calculator-Apple-Watch.jpg 312w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Tip-Calculator-Apple-Watch-300x375.jpg 300w\" sizes=\"(max-width: 250px) 100vw, 250px\" \/><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Tip-Calculator-Apple-Watch-7.jpg\"><br \/>\n<img class=\"aligncenter wp-image-474\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Tip-Calculator-Apple-Watch-7.jpg\" alt=\"Tip Calculator - Apple Watch 7\" width=\"250\" height=\"313\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Tip-Calculator-Apple-Watch-7.jpg 312w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Tip-Calculator-Apple-Watch-7-300x375.jpg 300w\" sizes=\"(max-width: 250px) 100vw, 250px\" \/><\/a><\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Icon-29@2x1.png\"><img class=\" size-full wp-image-473 alignleft\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Icon-29@2x1.png\" alt=\"Icon-29@2x\" width=\"58\" height=\"58\" \/><\/a><a href=\"https:\/\/itunes.apple.com\/us\/app\/unit-watch\/id987565167?mt=8\" target=\"_blank\">Unit Watch<\/a>:\u00a0Swiftly convert units with a minimal interface designed exclusively for the Apple Watch. Unit Watch provides a single screen with all your conversions displayed right in front of you. Tap a unit and watch it float to the top with conversions beneath. Tap it again and get a number pad for entering specific amounts. Quick, easy, and convenient workflow designed for your wrist. It is a handy utility for anyone, including travelers, students, teachers, and practitioners in engineering, physics, sciences, and technical subjects.<\/p>\n<p><img class=\"aligncenter size-medium wp-image-424\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Unit-Watch-Screenshot-500x307.png\" alt=\"Unit Watch Screenshot\" width=\"500\" height=\"307\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Unit-Watch-Screenshot-500x307.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Unit-Watch-Screenshot-1024x629.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Unit-Watch-Screenshot-300x184.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Unit-Watch-Screenshot.png 1336w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>I have several other Apple Watch apps in the pipeline and I&#8217;m looking forward to their release. Also, I have been documenting and sharing the process through my blog posts, which include tutorials\u00a0on <a href=\"https:\/\/developer.apple.com\/watchkit\/\" target=\"_blank\">WatchKit<\/a>, <a href=\"https:\/\/developer.apple.com\/swift\/\" target=\"_blank\">Swift<\/a>, <a href=\"https:\/\/developer.apple.com\/xcode\/\" target=\"_blank\">Xcode<\/a>, and so much more. Stay tuned for <a href=\"https:\/\/itunes.apple.com\/us\/artist\/zamzam-inc.\/id983145254\" target=\"_blank\">more\u00a0apps<\/a> and <a href=\"http:\/\/basememara.com\">posts<\/a>!<\/p>\n","link":"https:\/\/basememara.com\/watchkit-apps-released-for-the-apple-watch-launch\/","comment_count":0,"author":2,"featured_media":426,"terms":[48,4,49],"meta":{"_series_part":""},"created":"2015-04-24T14:10:57","modified":"2015-05-14T13:49:48"},{"id":444,"title":"Cracking the Code to Apple Watch Design","slug":"cracking-the-code-to-apple-watch-design","type":"post","excerpt":"There are many design aspects for the Apple Watch, but today I'd to simply look at themes for this new market to discover why Apple chose a dark theme for the new Apple Watch App Store.","content":"<p>There are many design aspects for\u00a0the Apple Watch, but today I&#8217;d to simply look at themes for this new market. First of all, the Apple Watch interface has a black background since it&#8217;s easy on the eyes and battery consumption:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/modular-apple-watch-face.jpg\"><img class=\"aligncenter size-full wp-image-451\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/modular-apple-watch-face.jpg\" alt=\"modular-apple-watch-face\" width=\"312\" height=\"340\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/modular-apple-watch-face.jpg 312w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/modular-apple-watch-face-300x327.jpg 300w\" sizes=\"(max-width: 312px) 100vw, 312px\" \/><\/a><\/p>\n<p>This, I believe, is the foundation to all themes emerging from the Apple Watch world. Even when thinking about companion iPhone apps for the Apple Watch, following a consistent look and feel is important. Take a look at Apple&#8217;s new\u00a0activity app for the iPhone, a companion app for the Apple Watch:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/apple-watch-activity-app-iphone.png\"><img class=\"aligncenter size-full wp-image-453\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/apple-watch-activity-app-iphone.png\" alt=\"apple-watch-activity-app-iphone\" width=\"368\" height=\"307\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/apple-watch-activity-app-iphone.png 368w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/apple-watch-activity-app-iphone-300x250.png 300w\" sizes=\"(max-width: 368px) 100vw, 368px\" \/><\/a><\/p>\n<p>It follows the same dark backgrounds and high contrasts as the Apple Watch. There&#8217;s something more to this..<\/p>\n<h2>The Da Vinci Code<\/h2>\n<p>The features and interfaces that come from Apple are very intentional\u00a0and\u00a0have proven to be\u00a0very innovative and trends-setting, both technically and artistically. Today, I&#8217;d like to point your attention to the new Apple Watch App Store\u00a0you see on your iPhone:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-app-store.png\"><img class=\"aligncenter size-medium wp-image-446\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-app-store-450x800.png\" alt=\"Apple Watch app store\" width=\"450\" height=\"800\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-app-store-450x800.png 450w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-app-store-576x1024.png 576w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-app-store-300x534.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-app-store.png 750w\" sizes=\"(max-width: 450px) 100vw, 450px\" \/><\/a><\/p>\n<p>It&#8217;s interesting that Apple would break away from their traditional theme and pick a dark theme. It makes sense though because of the watch interface being dark backgrounds with high contrast icons, images, etc.<\/p>\n<p>Now here&#8217;s the amazing part&#8230; On your iPhone,\u00a0go to the accessibility options and select inverse colors in: <em>Settings &gt; General &gt; Accessibility &gt; Invert Colors<\/em>. Here&#8217;s what you get:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Invert-Colors1.png\"><img class=\"aligncenter size-medium wp-image-448\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Invert-Colors1-450x800.png\" alt=\"iPhone Invert Colors\" width=\"450\" height=\"800\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Invert-Colors1.png 450w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Invert-Colors1-300x533.png 300w\" sizes=\"(max-width: 450px) 100vw, 450px\" \/><\/a><\/p>\n<p>It&#8217;s the same theme as the Apple Watch App Store!! Apple chose the exact inverse colors of the iPhone theme to derive theme guidelines for the Apple Watch companion apps. Knowing this fact acts as a guideline for creating iPhone companion apps for me. I&#8217;ve <a href=\"http:\/\/basememara.com\/watchkit-apps-released-for-the-apple-watch-launch\/\">submitted 2 Apple Watch apps to the App Store<\/a> and currently working on my third one using this same guidelines for themes going forward:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Pray-Watch-screenshot.png\"><img class=\"aligncenter size-medium wp-image-449\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Pray-Watch-screenshot-460x800.png\" alt=\"Pray Watch screenshot\" width=\"460\" height=\"800\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Pray-Watch-screenshot-460x800.png 460w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Pray-Watch-screenshot-589x1024.png 589w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Pray-Watch-screenshot-300x522.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Pray-Watch-screenshot.png 747w\" sizes=\"(max-width: 460px) 100vw, 460px\" \/><\/a><\/p>\n<p>I hope you like \ud83d\ude42<\/p>\n<p><em><strong>ENJOY!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/cracking-the-code-to-apple-watch-design\/","comment_count":0,"author":2,"featured_media":451,"terms":[51,4],"meta":{"_series_part":""},"created":"2015-05-01T09:00:00","modified":"2015-04-30T16:12:04"},{"id":400,"title":"Creating a Number Keypad for Apple Watch","slug":"creating-a-number-keypad-for-apple-watch","type":"post","excerpt":"The user interface for smart watches is vastly different than what we're used to. We are entering a new era of UX that involves creative thinking on how we can use the ridiculously small screen real estate, while still giving the user enough power to interact with it. One thing that comes to mind is how do we enter numbers into smart watches. In this post, I would like to show you how to create a number keypad for Apple Watch.","content":"<p>The user interface for\u00a0smart watches is vastly different than what we&#8217;re used to. We are entering a new era of UX that involves creative thinking on how we can use the ridiculously small screen real estate, while still giving the user enough power to interact with it. One thing that comes to mind is how do we enter numbers into smart watches. In this post,\u00a0I would like to show you how to create a number keypad for Apple Watch.<\/p>\n<h2>The Storyboard<\/h2>\n<p>First thing is we will create a dedicated interface controller that will manage the number keypad. We can use the group container to split the screen up for the buttons. Here&#8217;s how the storyboard will look:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad.png\"><img class=\"aligncenter size-medium wp-image-401\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-500x499.png\" alt=\"WatchKit Number Keypad\" width=\"500\" height=\"499\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-500x499.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-150x150.png 150w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-300x299.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad.png 786w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>I have five\u00a0groups stacked on top of each other. In each group, I have three buttons side-by-side. I did this by dragging the group control onto the interface, then adding one button at a time, and finally assigning each one to take up 33% of the screen width. These are the properties of the group, notice the <em>relative to container<\/em> width and <em>fixed<\/em> height in the size section:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group.png\"><img class=\"aligncenter wp-image-402 size-medium\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group-396x800.png\" alt=\"WatchKit Number Keypad Group\" width=\"396\" height=\"800\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group-396x800.png 396w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group-507x1024.png 507w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group-300x606.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group.png 510w\" sizes=\"(max-width: 396px) 100vw, 396px\" \/><\/a><\/p>\n<p>For each button, I am setting the properties as so:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Button.png\"><img class=\"aligncenter size-medium wp-image-403\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Button-400x800.png\" alt=\"WatchKit Number Keypad Button\" width=\"400\" height=\"800\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Button-400x800.png 400w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Button.png 512w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Button-300x600.png 300w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><\/a><\/p>\n<p>A couple of exceptions though. First is that five groups on top of each other will fit fine on the <em>42mm<\/em> Apple Watch, but will scroll on the <em>38mm<\/em> version. So only for the first and last group, we will assign an explicit height for the <em>38mm<\/em> watch:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group-2.png\"><img class=\"aligncenter size-medium wp-image-404\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group-2-500x253.png\" alt=\"WatchKit Number Keypad Group 2\" width=\"500\" height=\"253\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group-2-500x253.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group-2-300x152.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Group-2.png 966w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>The other exception is the size for the label in the first group of course, which\u00a0will take up 75% of the width.<\/p>\n<h2>The Interface Controller<\/h2>\n<p>Now that we got our interface set up, let&#8217;s wire up a class to it so we can listen to events. Right-click in the target and add a new <em>Cocoa Class<\/em>\u00a0file. On the next screen, be sure to make it a subclass of <em>WKInterfaceController<\/em>:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-NumberPad-Controller-Create.png\"><img class=\"aligncenter size-medium wp-image-405\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-NumberPad-Controller-Create-500x288.png\" alt=\"WatchKit NumberPad Controller Create\" width=\"500\" height=\"288\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-NumberPad-Controller-Create-500x288.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-NumberPad-Controller-Create-1024x591.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-NumberPad-Controller-Create-332x190.png 332w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-NumberPad-Controller-Create-300x173.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-NumberPad-Controller-Create.png 1442w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Once you have the class in your file list, we can now add it as a custom class to the interface controller we created in the storyboard. To do this, click on the interface controller in the storyboard, then on the left pane, go to the <em>&#8220;Identity inspector&#8221;<\/em>. From there, type or find your class in the list to assign it:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Identity-Inspector.png\"><img class=\"aligncenter wp-image-406 size-medium\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Identity-Inspector-500x588.png\" alt=\"WatchKit Number Keypad Identity Inspector\" width=\"500\" height=\"588\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Identity-Inspector-500x588.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Identity-Inspector-300x353.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Identity-Inspector.png 514w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>While we&#8217;re here, give the interface an identifier so it can be called with the\u00a0<em>presentControllerWithName<\/em> function later, and also give it a title of <em>&#8220;Done&#8221;<\/em>, which will will stick on the top left corner of the number keypad to close the keypad.<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Number-Keypad-Controller-Properties-2.png\"><img class=\"aligncenter wp-image-417 size-full\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Number-Keypad-Controller-Properties-2.png\" alt=\"Number Keypad Controller Properties 2\" width=\"254\" height=\"138\" \/><\/a><\/p>\n<p>Now that the interface is glued to the Swift class, you can now create outlets and actions for\u00a0the labels and buttons. To do this, hold down\u00a0the <em>Control<\/em> key and drag each of the components onto your Swift class:<\/p>\n<p><img class=\"aligncenter size-medium wp-image-407\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Action-500x346.png\" alt=\"WatchKit Number Keypad Action\" width=\"500\" height=\"346\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Action-500x346.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Action-300x207.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Action.png 742w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/p>\n<p>Remember, you will need these to be actions so you can respond to the tap. Do these for all the buttons. The label will just be an outlet so we can display what the user is entering.<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Action-2.png\"><img class=\"aligncenter size-medium wp-image-408\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Action-2-500x206.png\" alt=\"WatchKit Number Keypad Action 2\" width=\"500\" height=\"206\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Action-2-500x206.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Action-2-300x123.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Action-2.png 686w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Cool, now you have a bunch of empty actions in your class and an outlet for the label.<\/p>\n<h2>Show Me the Code!<\/h2>\n<p>The actions for these buttons will simply append the number to the label, like how a calculator works. There are some special cases we need to handle, such as decimals and zeros, but let&#8217;s wrap it up in a function so it can be shared across the number buttons like this:<\/p>\n<pre class=\"lang:swift decode:true\">var isDecimalAppended = false\r\nvar isPointZeroAppended = false\r\n\r\n@IBOutlet var amountLabel: WKInterfaceLabel!\r\n\r\nfunc appendValue(value: Int) {\r\n    let newValue = \"\\(value)\"\r\n    var currentValue = getDisplayAmount(sourceController.amount, round: false)\r\n    \r\n    \/\/ Handle appending new number\r\n    if currentValue == \"0\" &amp;&amp; !isDecimalAppended {\r\n        \/\/ New start of entry\r\n        currentValue = newValue\r\n    }\r\n    else {\r\n        \/\/ Handle point zero because of rounding\r\n        if isPointZeroAppended {\r\n            currentValue += currentValue.rangeOfString(\".\") != nil\r\n                ? \"0\" : \".0\"\r\n            isPointZeroAppended = false\r\n        }\r\n        \r\n        \/\/ Handle intended decimal if applicable\r\n        if isDecimalAppended {\r\n            currentValue += \".\"\r\n            isDecimalAppended = false\r\n        }\r\n        \r\n        \/\/ Handle point zero because of rounding\r\n        if value == 0 &amp;&amp; currentValue.rangeOfString(\".\") != nil {\r\n            isPointZeroAppended = true\r\n        }\r\n        \r\n        \/\/ Concatenate intended value\r\n        currentValue += newValue\r\n    }\r\n    \r\n    amountLabel.setText(currentValue)\r\n}\r\n\r\n@IBAction func oneTapped() {\r\n    appendValue(1)\r\n}\r\n\r\n@IBAction func twoTapped() {\r\n    appendValue(2)\r\n}\r\n\r\n@IBAction func threeTapped() {\r\n    appendValue(3)\r\n}\r\n\r\n@IBAction func fourTapped() {\r\n    appendValue(4)\r\n}\r\n\r\n@IBAction func fiveTapped() {\r\n    appendValue(5)\r\n}\r\n\r\n@IBAction func sixTapped() {\r\n    appendValue(6)\r\n}\r\n\r\n@IBAction func sevenTapped() {\r\n    appendValue(7)\r\n}\r\n\r\n@IBAction func eightTapped() {\r\n    appendValue(8)\r\n}\r\n\r\n@IBAction func nineTapped() {\r\n    appendValue(9)\r\n}\r\n\r\n@IBAction func zeroTapped() {\r\n    appendValue(0)\r\n}\r\n\r\nfunc getDisplayAmount(value: Double, round: Bool = true) -&gt; String {\r\n    \/\/ Truncate decimal if whole number\r\n    return value % 1 == 0\r\n        ? \"\\(Int(value))\"\r\n        : (round ? String(format: \"%.5f\", value) : \"\\(value)\")\r\n}<\/pre>\n<p>The <em>appendValue<\/em> function handles the appending of numbers as the user taps on the buttons. If the value is zero, it will overwrite it, signifying it&#8217;s a fresh start. The <em>isDecimalAppend<\/em> is an indicator if the user type a decimal place previously so it can append it before the new number. The <em>isPointZeroAppended<\/em> is a tricky scenario if the user\u00a0types a zero after a decimal place. It will keep rounding off the zero because of <em>getDisplayAmount<\/em>, so this flag adds the zero back in before adding the new number. We haven&#8217;t talked about what the\u00a0<em>sourceController<\/em> variable is yet, but we will cover that in just a bit. First, let&#8217;s handle the <em>clear<\/em>, <em>decimal<\/em>, and <em>positive\/negative<\/em> buttons:<\/p>\n<pre class=\"lang:swift decode:true \">@IBAction func clearTapped() {\r\n    amountLabel.setText(\"0\")\r\n    isDecimalAppended = false\r\n}\r\n\r\n@IBAction func positiveNegativeTapped() {\r\n    sourceController.amount = sourceController.amount * -1\r\n    amountLabel.setText(\"\\(getDisplayAmount(sourceController.amount))\")\r\n}\r\n\r\n@IBAction func decimalTapped() {\r\n    var currentValue = getDisplayAmount(sourceController.amount)\r\n    \r\n    if currentValue.rangeOfString(\".\") == nil {\r\n        currentValue += \".\"\r\n        amountLabel.setText(currentValue)\r\n        isDecimalAppended = true\r\n    }\r\n}<\/pre>\n<h2>Using the Number Keypad<\/h2>\n<p>Now that we have our number keypad working, it&#8217;s time for another controller to make use of it.\u00a0In your main controller, add a variable called <em>&#8220;amount&#8221;<\/em>, which is\u00a0the value the\u00a0number keypad will update. This is what the <em>sourceController<\/em> variable was referring to in the number keypad controller. Then add a button and create an action for it, which will popup the number keypad. It makes sense to make the keypad open as a modal so it doesn&#8217;t inject itself into the page history for the back button. Here&#8217;s what the code looks like:<\/p>\n<pre class=\"lang:swift decode:true\">var amount = Double(0)\r\n...\r\n@IBAction func buttonTapped() {\r\n    \/\/ Redirect to number pad\r\n    self.presentControllerWithName(\"numberPadController\", context: self)\r\n}<\/pre>\n<p>Notice in the <em>presentControllerWithName<\/em>, it is passing the whole main controller object into the context. That way, the number keypad controller will be able to update the previous screen (to get to the <em>amount<\/em> variable).<\/p>\n<h2>Putting It All Together<\/h2>\n<p>The main interface controller is relatively simple. It&#8217;s just a label and a button. The button will open up the number keypad to update the label. Here is what the interface looks like:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Source-Controller-Number-Keypad.png\"><img class=\"aligncenter size-medium wp-image-409\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Source-Controller-Number-Keypad-500x462.png\" alt=\"Source Controller Number Keypad\" width=\"500\" height=\"462\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Source-Controller-Number-Keypad-500x462.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Source-Controller-Number-Keypad-300x277.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Source-Controller-Number-Keypad.png 546w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>The interface class will have an <em>amount<\/em> variable that will keep track of the current value of the interface. This will be updated later by the number keypad&#8217;s controller. The <em>loadData<\/em> function is placed in the <em>willActivate<\/em> event so that the <em>amountLabel<\/em> is updated with the latest amount when this screen is shown again. The <em>getDisplayAmount<\/em> will do just display the amount in a friendly way. And finally, the <em>buttonTapped<\/em> will call the number keypad screen and pass the whole controller\u00a0as the context so it can be updated in the remote number keypad controller. Here&#8217;s the full interface code!<\/p>\n<pre class=\"lang:swift decode:true \">class InterfaceController: WKInterfaceController {\r\n    \r\n    var amount = Double(0)\r\n    \r\n    @IBOutlet var amountLabel: WKInterfaceLabel!\r\n    \r\n    override func awakeWithContext(context: AnyObject?) {\r\n        super.awakeWithContext(context)\r\n        \r\n        \/\/ Configure interface objects here.\r\n    }\r\n\r\n    override func willActivate() {\r\n        \/\/ This method is called when watch view controller is about to be visible to user\r\n        super.willActivate()\r\n        loadData()\r\n    }\r\n\r\n    override func didDeactivate() {\r\n        \/\/ This method is called when watch view controller is no longer visible\r\n        super.didDeactivate()\r\n    }\r\n    \r\n    func loadData() {\r\n        amountLabel.setText(getDisplayAmount(amount))\r\n    }\r\n    \r\n    func getDisplayAmount(value: Double, round: Bool = true) -&gt; String {\r\n        \/\/ Truncate decimal if whole number\r\n        return value % 1 == 0\r\n            ? \"\\(Int(value))\"\r\n            : (round ? String(format: \"%.5f\", value) : \"\\(value)\")\r\n    }\r\n\r\n    @IBAction func buttonTapped() {\r\n        \/\/ Redirect to number pad\r\n        self.presentControllerWithName(\"numberPadController\", context: self)\r\n    }\r\n}<\/pre>\n<p>For the number keypad controller, the trick is to store the previous controller context in a variable in the <em>awakeWithContext<\/em> event. That way, the number keypad controller always has a reference to the previous screen to update the <em>amount<\/em> variable. Here&#8217;s the full number keypad controller code!<\/p>\n<pre class=\"lang:swift decode:true \">class NumberPadController: WKInterfaceController {\r\n    \r\n    var sourceController: InterfaceController!\r\n    var isDecimalAppended = false\r\n    var isPointZeroAppended = false\r\n\r\n    @IBOutlet var amountLabel: WKInterfaceLabel!\r\n\r\n    override func awakeWithContext(context: AnyObject?) {\r\n        super.awakeWithContext(context)\r\n        \r\n        \/\/ Configure interface objects here.\r\n        sourceController = context as! InterfaceController\r\n        amountLabel.setText(\"\\(sourceController.getDisplayAmount(sourceController.amount))\")\r\n    }\r\n\r\n    override func willActivate() {\r\n        \/\/ This method is called when watch view controller is about to be visible to user\r\n        super.willActivate()\r\n    }\r\n\r\n    override func didDeactivate() {\r\n        \/\/ This method is called when watch view controller is no longer visible\r\n        super.didDeactivate()\r\n    }\r\n\r\n    func appendValue(value: Int) {\r\n        let newValue = \"\\(value)\"\r\n        var currentValue = sourceController.getDisplayAmount(sourceController.amount, round: false)\r\n        \r\n        \/\/ Handle appending new number\r\n        if currentValue == \"0\" &amp;&amp; !isDecimalAppended {\r\n            \/\/ New start of entry\r\n            currentValue = newValue\r\n        }\r\n        else {\r\n            \/\/ Handle point zero because of rounding\r\n            if isPointZeroAppended {\r\n                currentValue += currentValue.rangeOfString(\".\") != nil\r\n                    ? \"0\" : \".0\"\r\n                isPointZeroAppended = false\r\n            }\r\n            \r\n            \/\/ Handle intended decimal if applicable\r\n            if isDecimalAppended {\r\n                currentValue += \".\"\r\n                isDecimalAppended = false\r\n            }\r\n            \r\n            \/\/ Handle point zero because of rounding\r\n            if value == 0 &amp;&amp; currentValue.rangeOfString(\".\") != nil {\r\n                isPointZeroAppended = true\r\n            }\r\n            \r\n            \/\/ Concatenate intended value\r\n            currentValue += newValue\r\n        }\r\n        \r\n        sourceController.amount = (currentValue as NSString).doubleValue\r\n        amountLabel.setText(currentValue)\r\n    }\r\n\r\n    @IBAction func clearTapped() {\r\n        sourceController.amount = 0.0\r\n        amountLabel.setText(\"0\")\r\n        isDecimalAppended = false\r\n    }\r\n\r\n    @IBAction func positiveNegativeTapped() {\r\n        sourceController.amount = sourceController.amount * -1\r\n        amountLabel.setText(\"\\(sourceController.getDisplayAmount(sourceController.amount))\")\r\n    }\r\n\r\n    @IBAction func decimalTapped() {\r\n        var currentValue = sourceController.getDisplayAmount(sourceController.amount)\r\n        \r\n        if currentValue.rangeOfString(\".\") == nil {\r\n            currentValue += \".\"\r\n            amountLabel.setText(currentValue)\r\n            isDecimalAppended = true\r\n        }\r\n    }\r\n\r\n    @IBAction func oneTapped() {\r\n        appendValue(1)\r\n    }\r\n\r\n    @IBAction func twoTapped() {\r\n        appendValue(2)\r\n    }\r\n\r\n    @IBAction func threeTapped() {\r\n        appendValue(3)\r\n    }\r\n\r\n    @IBAction func fourTapped() {\r\n        appendValue(4)\r\n    }\r\n\r\n    @IBAction func fiveTapped() {\r\n        appendValue(5)\r\n    }\r\n\r\n    @IBAction func sixTapped() {\r\n        appendValue(6)\r\n    }\r\n\r\n    @IBAction func sevenTapped() {\r\n        appendValue(7)\r\n    }\r\n\r\n    @IBAction func eightTapped() {\r\n        appendValue(8)\r\n    }\r\n\r\n    @IBAction func nineTapped() {\r\n        appendValue(9)\r\n    }\r\n\r\n    @IBAction func zeroTapped() {\r\n        appendValue(0)\r\n    }\r\n    \r\n}<\/pre>\n<p>Below is what the screens should look and behave like in the emulator. First tap\u00a0on the <em>&#8220;Enter Value&#8221;<\/em> button:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo.png\"><img class=\"aligncenter wp-image-410\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-500x652.png\" alt=\"WatchKit Number Keypad Demo\" width=\"300\" height=\"391\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-500x652.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-300x391.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo.png 624w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p>Type in the numbers in the number keypad, then tap <em>&#8220;Done&#8221;<\/em>:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-2.png\"><img class=\"aligncenter wp-image-411\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-2-500x654.png\" alt=\"WatchKit Number Keypad Demo 2\" width=\"300\" height=\"392\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-2-500x654.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-2-300x392.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-2.png 624w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p>That will return you to the original controller with the new value:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-3.png\"><img class=\"aligncenter wp-image-412\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-3-500x635.png\" alt=\"WatchKit Number Keypad Demo 3\" width=\"300\" height=\"381\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-3-500x635.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-3-300x381.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-3.png 620w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>There you have it, a number keypad for the Apple Watch! Keep in mind that the end game is voice recognition, but until then this will have many uses \ud83d\ude09<\/p>\n<p>Enjoy the <a href=\"https:\/\/github.com\/basememara\/apple-watchkit-number-keypad\" target=\"_blank\">source code here<\/a>.<\/p>\n<p><strong><em>HAPPY CODING!!<\/em><\/strong><\/p>\n<hr \/>\n<p><em> Thanks to <a href=\"http:\/\/www.noodlewerk.com\/blog\/calculator-apple-watch-tutorial\/\" target=\"_blank\">needlework for some of the code and inspiration<\/a>!<\/em><\/p>\n","link":"https:\/\/basememara.com\/creating-a-number-keypad-for-apple-watch\/","comment_count":3,"author":2,"featured_media":411,"terms":[4,50,49],"meta":{"_series_part":""},"created":"2015-04-30T10:00:21","modified":"2015-04-22T20:16:42"},{"id":352,"title":"Building an Apple Watch App","slug":"building-an-apple-watch-app","type":"post","excerpt":"Smart watches are a new approach, a new way of thinking, a new way of designing, and it's on your freaking body! Smart watches will change the way we interact with our devices unlike any time before. And Apple has the track record to lead the mobile revolution forward. In this post, I will show you how to create your first Apple Watch app.","content":"<p>We are faced with a new breed\u00a0of mobile devices. Smart watches are clearly the next step forward in\u00a0the mobile revolution. Tablets were ok when they first hit the scene, but its implications of\u00a0how it affects our lives\u00a0are\u00a0not as significant as smart watches. Smart watches are\u00a0a new approach, a new way of thinking, a new way of designing, and it&#8217;s on your freaking body! Smart watches will change the way we interact\u00a0with our devices unlike any time before. And Apple has the track record to lead the mobile revolution forward. In this post, I will show you how to create your first Apple Watch app.<\/p>\n<h2>Getting Started<\/h2>\n<p>Although UX and design is vastly different in\u00a0the realm of\u00a0watch apps, development for it is not that much different than developing for an iPhone. As a matter of fact, Apple Watch apps are actually iPhone apps that have a <a href=\"https:\/\/developer.apple.com\/watchkit\/\" target=\"_blank\">WatchKit<\/a> extension in the same project. So the first step is to create an iPhone app as\u00a0you normally would:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App.png\"><img class=\"aligncenter size-medium wp-image-353\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-500x290.png\" alt=\"iPhone Xcode App\" width=\"500\" height=\"290\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-500x290.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-1024x594.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-300x174.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App.png 1452w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>For the next screen, give your app a name and close <em>&#8220;iPhone&#8221;<\/em> for <em>&#8220;Devices&#8221;<\/em>. Also please choose <em>&#8220;Swift&#8221;<\/em> for the language if you want to remain friends ;). It&#8217;s a beautiful language that I plan to cover in other posts. Finally, I always enable <em>&#8220;Use Core Data&#8221;<\/em> for good practice, which is a more sophisticated way of storing data and entities (its Xcode&#8217;s version of an ORM tool).<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-Options.png\"><img class=\"aligncenter size-medium wp-image-354\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-Options-500x290.png\" alt=\"iPhone Xcode App Options\" width=\"500\" height=\"290\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-Options-500x290.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-Options-1024x593.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-Options-300x174.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/iPhone-Xcode-App-Options.png 1450w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>When you choose a\u00a0location on your machine to save it, I highly suggest you enable <em>&#8220;Create Git repository&#8221;<\/em>. Even if you are a one-dev show, it&#8217;s important to version code and view the history, whether it be remotely in the cloud like <a href=\"https:\/\/github.com\" target=\"_blank\">GitHub<\/a> or on you local machine.<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-git-repository.png\"><img class=\"aligncenter size-medium wp-image-355\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-git-repository-500x64.png\" alt=\"Xcode git repository\" width=\"500\" height=\"64\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-git-repository-500x64.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-git-repository-1024x130.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-git-repository-300x38.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-git-repository.png 1038w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Noticed we haven&#8217;t done anything regarding the watch part of the app yet. Now in Xcode, click on <em>File &gt; New &gt; Target<\/em>, then choose <em>iOS &gt; Apple Watch &gt; WatchKit App<\/em>:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-WatchKit-App.png\"><img class=\"aligncenter size-medium wp-image-356\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-WatchKit-App-500x294.png\" alt=\"Xcode WatchKit App\" width=\"500\" height=\"294\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-WatchKit-App-500x294.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-WatchKit-App-1024x602.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-WatchKit-App-300x176.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-WatchKit-App.png 1452w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>On the next screen, the defaults are fine, but you can remove <em>&#8220;Include Notification Scene&#8221;<\/em> and <em>&#8220;Include Glance Scene&#8221;<\/em> which I will cover in separate posts:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Options.png\"><img class=\"aligncenter size-medium wp-image-357\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Options-500x288.png\" alt=\"WatchKit Xcode App Options\" width=\"500\" height=\"288\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Options-500x288.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Options-1024x590.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Options-332x190.png 332w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Options-300x173.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Options.png 1438w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Once you hit finish, click finish and now\u00a0this creats a new target in the project for the Apple Watch. This is what your files list should look like:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Files.png\"><img class=\"aligncenter wp-image-358\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Files-500x727.png\" alt=\"WatchKit Xcode App Files\" width=\"300\" height=\"436\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Files-500x727.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Files-300x436.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Xcode-App-Files.png 502w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<h2>Anatomy of a\u00a0WatchKit App<\/h2>\n<p>You are ready to rock and roll with your watch app, but\u00a0some explaining is needed here though. In the project, there are three areas you will be working with:<\/p>\n<ol>\n<li>The iPhone app labeled here as <em>&#8220;My First Watch App&#8221;<\/em>. At the time of this writing, there is no way around this; you need an iPhone app for every Apple Watch app! If you are racking your brain what the iPhone app will do,\u00a0make it a simple configuration page for your watch app.<\/li>\n<li>The WatchKit extension labeled here as <em>&#8220;My First Watch App WatchKit Extension App&#8221;<\/em>. This where most of the code for your watch app will be, such as interface controller classes. What&#8217;s interesting to note is that this area will actually be executed on the iPhone via bluetooth or wifi, not on the Apple Watch. This is to remove burden and power consumption from the watch.<\/li>\n<li>The WatchKit app labeled here as <em>&#8220;My First Watch App&#8221;<\/em>. This is everything that will be stored on the Apple Watch itself, such as storyboards, images, etc.<\/li>\n<\/ol>\n<h2>Show Me the App!<\/h2>\n<p>Are you ready to see the app? Tada:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App.png\"><img class=\"aligncenter size-medium wp-image-359\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-500x340.png\" alt=\"WatchKit App\" width=\"500\" height=\"340\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-500x340.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-1024x696.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-300x204.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App.png 1106w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>The storyboard starts off as a blank black screen. In the top of Xcode, click the play button to make sure it runs before going any further:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Debug.png\"><img class=\"aligncenter size-medium wp-image-360\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Debug-500x124.png\" alt=\"WatchKit App Debug\" width=\"500\" height=\"124\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Debug-500x124.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Debug-300x74.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Debug.png 864w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>The emulator for the iPhone and the Apple Watch should spring up:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Emulator.png\"><img class=\"aligncenter size-medium wp-image-361\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Emulator-500x418.png\" alt=\"WatchKit App Emulator\" width=\"500\" height=\"418\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Emulator-500x418.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Emulator-1024x857.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Emulator-300x251.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>The Apple Watch should be a blank black screen if there were no errors. Also, on the iPhone emulator you will see the app associated with your watch app. Clicking it will bring up a blank white screen on the iPhone. Just add some labels, textbooks, etc to house the configurations for you watch app if you can&#8217;t think of anything. Apple will reject your app if your iPhone app doesn&#8217;t do anything.<\/p>\n<p>Ok, now let&#8217;s do something a bit more interesting. Drag a few components onto your WatchKit storyboard, such as a label, button, switch, slider, etc:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-App-Demo.png\"><img class=\"aligncenter size-medium wp-image-362\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-App-Demo-500x275.png\" alt=\"Watchkit App Demo\" width=\"500\" height=\"275\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-App-Demo-500x275.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-App-Demo-1024x563.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-App-Demo-300x165.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Watchkit-App-Demo.png 1204w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Press play again on the debugger and see the beauty:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-2.png\"><img class=\"aligncenter size-medium wp-image-363\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-2-500x452.png\" alt=\"WatchKit App Demo 2\" width=\"500\" height=\"452\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-2-500x452.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-2-1024x926.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-2-300x271.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-2.png 1582w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Notice if you put more controls onto the storyboard, it just expands vertically. This will just manifest as scrolling on the actual device.<\/p>\n<h2>Show Me the Code!<\/h2>\n<p>The interface controller in your storyboard has an associated\u00a0<em>WKInterfaceController<\/em> class:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code.png\"><img class=\"aligncenter size-medium wp-image-364\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-500x263.png\" alt=\"WatchKit App Code\" width=\"500\" height=\"263\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-500x263.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-1024x539.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-300x158.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>There are events in the interface controller already created for you:<\/p>\n<ol>\n<li><em>&#8220;awakeWithContext&#8221;<\/em> is the initialize or constructor of this screen. It will only be triggered once.<\/li>\n<li><em>&#8220;willActivate&#8221;<\/em> is the event that will get triggered when this screen is viewed, which can be multiple times.<\/li>\n<li><em>&#8220;didDeactivate&#8221;<\/em> is the event that will get triggered when the user leaves this screen, which can also be multiple times.<\/li>\n<\/ol>\n<h2>Gluing the Interface to the Code<\/h2>\n<p>Now comes time for a little interactivity. In Xcode, show the assistant editor to create a split screen: left side will be the storyboard and right side will be the code. Hold down on the <em>Control<\/em> button and drag the label from the storyboard onto the controller class:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-2.png\"><img class=\"aligncenter size-medium wp-image-365\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-2-500x268.png\" alt=\"WatchKit App Code 2\" width=\"500\" height=\"268\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-2-500x268.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-2-1024x549.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-2-300x161.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>This will create an <em>&#8220;Outlet&#8221;<\/em>, which is a reference to the control in code. Name it anything you like then\u00a0you can modify the control via code going forward:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-3.png\"><img class=\"aligncenter size-medium wp-image-366\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-3-500x385.png\" alt=\"WatchKit App Code 3\" width=\"500\" height=\"385\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-3-500x385.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-3-300x231.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-3.png 832w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>To test this out, in the <em>&#8220;awakeWithContext&#8221;<\/em> method, add this line of code then run the debugger:\u00a0<em>myLabel.setText(&#8220;This is my test!&#8221;)<\/em>. It should look like this:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-4.png\"><img class=\"aligncenter size-medium wp-image-367\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-4-500x319.png\" alt=\"WatchKit App Code 4\" width=\"500\" height=\"319\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-4-500x319.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-4-1024x654.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-4-300x192.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-4.png 1560w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>Let&#8217;s take this a step further ad update the label when the button is clicked. To do this, <em>Control+drag<\/em> the button from the storyboard to the class, except this time, choose <em>&#8220;Action&#8221;<\/em> in the popup:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-5.png\"><img class=\"aligncenter size-medium wp-image-368\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-5-500x284.png\" alt=\"WatchKit App Code 5\" width=\"500\" height=\"284\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-5-500x284.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-5-1024x583.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-5-332x190.png 332w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-5-300x171.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Code-5.png 1030w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<p>This will create a new method that will be triggered when the button is tapped. In this method, add this line of code to update the label:\u00a0<em>myLabel.setText(&#8220;\\(NSDate())&#8221;)<\/em>. This will update the label with the current time each time the button is tapped:<\/p>\n<p><a href=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-6.png\"><img class=\"aligncenter size-medium wp-image-369\" src=\"http:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-6-500x337.png\" alt=\"WatchKit App Demo 6\" width=\"500\" height=\"337\" srcset=\"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-6-500x337.png 500w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-6-1024x690.png 1024w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-6-300x202.png 300w, https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-6.png 1466w\" sizes=\"(max-width: 500px) 100vw, 500px\" \/><\/a><\/p>\n<h2>Conclusion<\/h2>\n<p>Congratulations and welcome to the next phase in the mobile revolution; you&#8217;ve just created your first Apple Watch app! This is just scratching the surface. Stay tuned for more WatchKit posts.<\/p>\n<p><em><strong>HAPPY CODING!!<\/strong><\/em><\/p>\n","link":"https:\/\/basememara.com\/building-an-apple-watch-app\/","comment_count":2,"author":2,"featured_media":363,"terms":[4,50,49,47],"meta":{"_series_part":""},"created":"2015-04-21T09:00:24","modified":"2015-04-20T22:22:17"},{"id":228,"title":"Building a Javascript MVC App using Sencha Ext JS","slug":"building-a-javascript-mvc-app-using-sencha-ext-js","type":"post","excerpt":"With mobile getting all the love lately, I thought I would give back to the desktop community. I showed how to build a mobile web app using Sencha Touch 2 and MVC. Now I will do the same with a desktop web app using Ext JS.","content":"<p>With mobile getting all the love lately, I thought I would give back to the desktop community. I showed how to\u00a0<a href=\"http:\/\/blog.falafel.com\/building-a-mobile-web-app-using-sencha-touch-2-and-mvc\" target=\"_blank\">build a mobile web app using Sencha Touch 2 and MVC<\/a>. Now I will do the same with a desktop web app using\u00a0<a href=\"http:\/\/docs.sencha.com\/ext-js\/4-0\/\">Ext JS<\/a>&#8230; <a href=\"http:\/\/blog.falafel.com\/building-a-javascript-mvc-app-using-sencha-ext-js\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/building-a-javascript-mvc-app-using-sencha-ext-js\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,40,17,29],"meta":{"_series_part":""},"created":"2012-03-12T16:11:20","modified":"2015-03-06T16:12:57"},{"id":158,"title":"HTML5 Template Tags, Data-Binding, and Standards","slug":"html5-template-tags-data-binding-and-standards","type":"post","excerpt":"Did you know there's a shiny new &lt;template&gt; tag making it to a browser near you? It's true! For years, web developers have been coming up with awkward and clever hacks to do client-side templating. With the new Web Component specs, the templates piece is now included natively!","content":"<p>Did you know there&#8217;s a shiny new &lt;template&gt; tag making it to a browser near you? It&#8217;s true! For years, web developers have been coming up with awkward and clever hacks to do client-side templating. With the new Web Component specs, the templates piece is now included natively!&#8230; <a href=\"http:\/\/blog.falafel.com\/html5-template-tags-data-binding-and-standards\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/html5-template-tags-data-binding-and-standards\/","comment_count":0,"author":2,"featured_media":null,"terms":[23,42,7,24],"meta":{"_series_part":""},"created":"2014-05-28T02:55:36","modified":"2015-03-06T16:10:36"},{"id":225,"title":"Looking Ahead to HTML5","slug":"looking-ahead-to-html5","type":"post","excerpt":"Now that Internet Explorer 9 has cooled off the press, we can alas rejoice that all new PC's and mobile devices are supporting HTML5! This brings a new era that aims to refactor the web in a whole new way. As you will see, HTML5 provides us code slimming techniques that make our HTML source code much more easier and functional.","content":"<p>Now that Internet Explorer 9 has cooled off the press, we can alas rejoice that all new PC&#8217;s and mobile devices are supporting HTML5! This brings a new era that aims to refactor the web in a whole new way. As you will see, HTML5 provides us code slimming techniques that make our HTML source code much more easier and functional&#8230; <a href=\"http:\/\/blog.falafel.com\/looking-ahead-to-html5\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/looking-ahead-to-html5\/","comment_count":0,"author":2,"featured_media":226,"terms":[42,7],"meta":{"_series_part":""},"created":"2012-03-15T16:06:23","modified":"2015-03-06T16:09:55"},{"id":223,"title":"Building an HTML5 Mobile App using jQuery Mobile and ASP.NET MVC","slug":"building-an-html5-mobile-app-using-jquery-mobile-and-asp-net-mvc","type":"post","excerpt":"The mobile revolution has created a plethora of new platforms and languages. It\r\nis rare to see old technologies successfully reaching new grounds together. A good\r\nexample of this is .NET MVC and jQueryMobile. The blends of Razor, HTML, CSS, and jQuery make mobile a very familiar territory, a package that makes things quick, easy, and beautiful!","content":"<p>The mobile revolution has created a plethora of new platforms and languages. It<br \/>\nis rare to see old technologies successfully reaching new grounds together. A good<br \/>\nexample of this is .NET MVC and\u00a0<a href=\"http:\/\/jquerymobile.com\/\" target=\"_blank\">jQuery\u00a0Mobile<\/a>. The blends of Razor, HTML, CSS, and jQuery make mobile a very familiar\u00a0territory, a package that makes things quick, easy, and beautiful!&#8230; <a href=\"http:\/\/blog.falafel.com\/building-an-html5-mobile-app-using-jquery-mobile-and-asp-net-mvc\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/building-an-html5-mobile-app-using-jquery-mobile-and-asp-net-mvc\/","comment_count":0,"author":2,"featured_media":null,"terms":[2,11,3,13,4],"meta":{"_series_part":""},"created":"2012-03-15T16:03:34","modified":"2015-03-06T16:06:03"},{"id":215,"title":"Convert a C# Object to JavaScript in MVC Razor","slug":"convert-a-c-object-to-javascript-in-mvc-razor","type":"post","excerpt":"Creating a JavaScript application on top of ASP.NET MVC is becoming more common these days. Rightfully so, especially with the new Web API addition to MVC 4. The clear separation between client-side and server-side is an elegant architecture indeed!","content":"<p>Creating a JavaScript application on top of ASP.NET MVC is becoming more common these days. Rightfully so, especially with the new Web API addition to MVC 4. The clear separation between client-side and server-side is an elegant architecture indeed! <a href=\"http:\/\/blog.falafel.com\/convert-a-c-object-to-javascript-in-mvc-razor\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/convert-a-c-object-to-javascript-in-mvc-razor\/","comment_count":0,"author":2,"featured_media":null,"terms":[2,11,41],"meta":{"_series_part":""},"created":"2012-05-16T15:52:59","modified":"2015-03-06T16:03:18"},{"id":219,"title":"Building a Mobile Web App using Sencha Touch 2 and MVC","slug":"building-a-mobile-web-app-using-sencha-touch-2-and-mvc","type":"post","excerpt":"In my previous post, I showed how to build a mobile web app using jQuery Mobile. Its use of HTML5 data attributes and CSS classes made it pretty straightforward, especially if you are used to building regular websites. The architecture of your mobile website would have to be based on the server-side though, whether this be ASP.NET MVC, PHP, Ruby, etc. Then I came across Sencha Touch which changes this mentality to a more progressive approach\u2026 client-side applications!","content":"<p>In my previous post, I showed how to\u00a0<a href=\"http:\/\/blog.falafel.com\/building-an-html5-mobile-app-using-jquery-mobile-and-asp-net-mvc\" target=\"_blank\">build a mobile web app using jQuery Mobile<\/a>. Its use of HTML5 data attributes and CSS classes made it pretty straightforward, especially if you are used to building regular websites. The architecture of your mobile website would have to be based on the server-side though, whether this be ASP.NET MVC, PHP, Ruby, etc. Then I came across\u00a0<a href=\"http:\/\/www.sencha.com\/products\/touch\/\">Sencha Touch<\/a>\u00a0which changes this mentality to a more progressive approach\u2026 client-side applications!&#8230; <a href=\"http:\/\/blog.falafel.com\/building-a-mobile-web-app-using-sencha-touch-2-and-mvc\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/building-a-mobile-web-app-using-sencha-touch-2-and-mvc\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,4,40,17],"meta":{"_series_part":""},"created":"2012-03-15T15:57:26","modified":"2015-03-06T15:59:17"},{"id":217,"title":"How to Post Sitefinity Forms to Paypal","slug":"how-to-post-sitefinity-forms-to-paypal","type":"post","excerpt":"The task at hand is more complicated than it sounds. Normally you would just generate a button in Paypal and paste the form code to your website. If it were only that easy. Try doing this in any ASP.NET website and you will run into a big problem... no nested forms allowed!","content":"<p>The task at hand is more complicated than it sounds. Normally you would just generate a button in Paypal and paste the form code to your website. If it were only that easy. Try doing this in any ASP.NET website and you will run into a big problem&#8230; no nested forms allowed!&#8230; <a href=\"http:\/\/blog.falafel.com\/how-to-post-sitefinity-forms-to-paypal\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/how-to-post-sitefinity-forms-to-paypal\/","comment_count":0,"author":2,"featured_media":null,"terms":[2,16,10],"meta":{"_series_part":""},"created":"2012-03-15T15:55:09","modified":"2015-03-06T15:57:09"},{"id":213,"title":"Polling AJAX Requests in JavaScript","slug":"polling-ajax-requests-in-javascript","type":"post","excerpt":"Polling AJAX is tricky. If the next interval triggers before the last AJAX request is complete, your app is doomed!! This creates a domino effect where your queue for requests fill up faster then it can complete. Your queue will NEVER finish... similar to an infinite loop.","content":"<p>Polling AJAX is tricky. If the next interval triggers before the last AJAX request is complete, your app is doomed!! This creates a domino effect where your queue for requests fill up faster then it can complete. Your queue will NEVER finish&#8230; similar to an infinite loop&#8230; <a href=\"http:\/\/blog.falafel.com\/polling-ajax-requests-in-javascript\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/polling-ajax-requests-in-javascript\/","comment_count":0,"author":2,"featured_media":null,"terms":[31,3],"meta":{"_series_part":""},"created":"2012-06-06T15:51:06","modified":"2015-03-06T15:52:45"},{"id":209,"title":"Relative paths in MVC Razor","slug":"relative-paths-in-mvc-razor","type":"post","excerpt":"Did you know in Razor markup can auto-resolve paths? Take a look at this gem built into MVC 4.","content":"<p>Did you know in Razor markup can auto-resolve paths?&#8230; <a href=\"http:\/\/blog.falafel.com\/relative-paths-in-mvc-razor\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/relative-paths-in-mvc-razor\/","comment_count":0,"author":2,"featured_media":null,"terms":[2,11],"meta":{"_series_part":""},"created":"2012-09-14T15:46:32","modified":"2015-03-06T15:48:35"},{"id":203,"title":"Building Single Page Applications with CanJS and RequireJS","slug":"building-single-page-applications-with-canjs-and-requirejs","type":"post","excerpt":"The web users of today expect a modern experience that only a single page application can deliver. Page refreshes are a thing of the past. Waiting for anything longer than 2 seconds without a \"cool effect\" is not acceptable. Responsive design for tablets and smartphones should just work. These demands of the new era have spawned new ways to develop JavaScript applications. For modern, scalable, and extensible JavaScript applications, two techniques are on the forefront: MVC patterns and AMD design. For this demo, we will be using RequireJS for AMD modular design and CanJS for MVC.","content":"<p>The web users of today expect a modern experience that only a single page application can deliver. Page refreshes are a thing of the past. Waiting for anything longer than 2 seconds without a &#8220;cool effect&#8221; is not acceptable. Responsive design for tablets and smartphones should just work.<\/p>\n<p>These demands of the new era have spawned new ways to develop JavaScript applications. For modern, scalable, and extensible JavaScript applications, two techniques are on the forefront: MVC patterns and AMD design. For this demo, we will be using\u00a0<a href=\"http:\/\/requirejs.org\" target=\"_blank\">RequireJS<\/a>\u00a0for AMD modular design and\u00a0<a href=\"http:\/\/canjs.us\" target=\"_blank\">CanJS<\/a>\u00a0for MVC&#8230; <a href=\"http:\/\/blog.falafel.com\/building-single-page-applications-with-canjs-and-requirejs\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/building-single-page-applications-with-canjs-and-requirejs\/","comment_count":0,"author":2,"featured_media":null,"terms":[39,3,40,9,29],"meta":{"_series_part":""},"created":"2013-01-07T15:38:49","modified":"2015-03-06T15:46:09"},{"id":207,"title":"Building JavaScript Apps using Modular and MVC Patterns","slug":"building-javascript-apps-using-modular-and-mvc-patterns","type":"post","excerpt":"In this post, I would like to open your eyes to a new way of developing JavaScript applications. We will be building modular JavaScript code on an MVC architecture while also handling dependencies. With these techniques, you can join a new era of web development and stop coding like it's 1999!","content":"<p>In this post, I would like to open your eyes to a new way of developing JavaScript applications. We will be building modular JavaScript code on an MVC architecture while also handling dependencies. With these techniques, you can join a new era of web development and stop coding like it&#8217;s 1999!&#8230; <a href=\"http:\/\/blog.falafel.com\/building-javascript-apps-using-modular-and-mvc-patterns\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/building-javascript-apps-using-modular-and-mvc-patterns\/","comment_count":0,"author":2,"featured_media":null,"terms":[39,3,40,9,29],"meta":{"_series_part":""},"created":"2012-09-18T15:43:20","modified":"2015-03-06T15:45:28"},{"id":205,"title":"Sending Request Headers via jQuery AJAX","slug":"sending-request-headers-via-jquery-ajax","type":"post","excerpt":"Ever wanted to send request headers from jQuery instead of the \"code-behind\"? You can easily tweak the ajaxSetup object to do this.","content":"<p>Ever wanted to send request headers from jQuery instead of the &#8220;code-behind&#8221;? You can easily tweak the ajaxSetup object to do this&#8230; <a href=\"http:\/\/blog.falafel.com\/sending-request-headers-via-jquery-ajax\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/sending-request-headers-via-jquery-ajax\/","comment_count":0,"author":2,"featured_media":null,"terms":[31,3,30],"meta":{"_series_part":""},"created":"2012-12-19T15:41:27","modified":"2015-03-06T15:42:48"},{"id":199,"title":"Enable SSL in Development with IIS Express","slug":"enable-ssl-in-development-with-iis-express","type":"post","excerpt":"While developing web applications, it is common that you must test the site in SSL mode. Normally, this would be a pain and would require you to set up the site in IIS manually. From then on, you must attach the debugger in Visual Studio to the application pool process. There's an easier way!","content":"<p>While developing web applications, it is common that you must test the site in SSL mode. Normally, this would be a pain and would require you to set up the site in IIS manually. From then on, you must attach the debugger in Visual Studio to the application pool process. There&#8217;s an easier way!&#8230; <a href=\"http:\/\/blog.falafel.com\/enable-ssl-in-development-with-iis-express\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/enable-ssl-in-development-with-iis-express\/","comment_count":0,"author":2,"featured_media":null,"terms":[2,35,34,36,7],"meta":{"_series_part":""},"created":"2013-02-23T15:34:59","modified":"2015-03-06T15:36:12"},{"id":197,"title":"How to avoid loading jQuery twice with RequireJS","slug":"how-to-avoid-loading-jquery-twice-with-requirejs","type":"post","excerpt":"When working with existing sites or content management systems, you have little say on where and when jQuery is loaded. To complicate matters, some pages may have jQuery auto-loaded, and others may not (yay for performance boosts, nay for client-side plugins). Do you bite the bullet and write unmanageable scripts? Or do you believe in RequireJS and dodge the bullet matrix-style?","content":"<p>When working with existing sites or content management systems, you have little say on where and when jQuery is loaded. To complicate matters, some pages may have jQuery auto-loaded, and others may not (yay for performance boosts, nay for client-side plugins). Do you bite the bullet and write\u00a0unmanageable\u00a0scripts? Or do you\u00a0<em>believe<\/em>\u00a0in RequireJS and dodge the bullet matrix-style?&#8230; <a href=\"http:\/\/blog.falafel.com\/how-to-avoid-loading-jquery-twice-with-requirejs\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/how-to-avoid-loading-jquery-twice-with-requirejs\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,30,9],"meta":{"_series_part":""},"created":"2013-02-27T15:33:22","modified":"2015-03-06T15:34:44"},{"id":195,"title":"Using Kendo UI template engine with RequireJS","slug":"using-kendo-ui-template-engine-with-requirejs","type":"post","excerpt":"If you are a big believer in Kendo UI, then you will be glad to know there is a built-in template engine as well. The problem was that you have to load the entire kendo.web.min.js file just to render a simple template (~0.5MB). Kendo is now AMD-complaint and can be used with RequireJS! I can now use Kendo UI's as my new favorite template engine. Why not if I plan to use other parts of the Kendo suite later or on other pages.","content":"<p>If you are a big believer in\u00a0<a href=\"http:\/\/www.kendoui.com\" target=\"_blank\">Kendo UI<\/a>, then you will be glad to know there is a\u00a0<a href=\"http:\/\/docs.kendoui.com\/getting-started\/framework\/templates\/overview\" target=\"_blank\">built-in template engine<\/a>\u00a0as well. The problem\u00a0<em>was\u00a0<\/em>that you have to load the entire\u00a0<em>kendo.web.min.js<\/em>\u00a0file just to render a simple template (~0.5MB). Kendo is now AMD-complaint and\u00a0<a href=\"http:\/\/docs.kendoui.com\/getting-started\/using-kendo-with\/using-kendo-with-requirejs\" target=\"_blank\">can be used with RequireJS<\/a>!\u00a0<span style=\"line-height: 1.5;\">I can now use Kendo UI&#8217;s as my new favorite template engine. Why not if I plan to use other parts of the Kendo suite later or on other pages&#8230; <a href=\"http:\/\/blog.falafel.com\/using-kendo-ui-template-engine-with-requirejs\/\" target=\"_blank\">Continued here<\/a><\/span><\/p>\n","link":"https:\/\/basememara.com\/using-kendo-ui-template-engine-with-requirejs\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,8,9,33],"meta":{"_series_part":""},"created":"2013-05-02T15:31:29","modified":"2015-03-06T15:33:07"},{"id":193,"title":"Avoid IE Hacks with Kendo UI's Browser Detection","slug":"avoid-ie-hacks-with-kendo-uis-browser-detection","type":"post","excerpt":"Cross-browser compatibility can be a major pain. The philosophy for most web developers is to code against a standard-complaint browser (Chrome), then apply CSS hacks later for other browsers that need to play catch up (Internet Explorer). In other words, it is better to make your code forward-compatible and apply backward-compatible hacks instead of the other way around.","content":"<p>Cross-browser compatibility can be a major pain. The philosophy for most web developers is to code against a standard-complaint browser (<em>Chrome<\/em>), then apply CSS hacks later for other browsers that need to play catch up (<em>Internet Explorer<\/em>). In other words, it is better to make your code forward-compatible and apply backward-compatible hacks instead of the other way around&#8230; <a href=\"http:\/\/blog.falafel.com\/avoid-ie-hacks-with-kendo-uis-browser-detection\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/avoid-ie-hacks-with-kendo-uis-browser-detection\/","comment_count":0,"author":2,"featured_media":null,"terms":[32,3,8],"meta":{"_series_part":""},"created":"2013-05-09T15:29:53","modified":"2015-03-06T15:31:17"},{"id":189,"title":"Using Kendo UI Mobile with RequireJS","slug":"using-kendo-ui-mobile-with-requirejs","type":"post","excerpt":"Are you thirsty for some scalable, elegant Kendo Mobile architecture? We all have been! The reason is because everything is globally scoped and seems to work much smoother if you jumble all your JavaScript on a single page. Fear no more though, RequireJS to the rescue!","content":"<p>Are you thirsty for some\u00a0<em>scalable, elegant<\/em>\u00a0<a href=\"http:\/\/www.kendoui.com\/mobile.aspx\" target=\"_blank\">Kendo Mobile<\/a>\u00a0architecture? We all have been! The reason is because everything is globally scoped and seems to work much smoother if you jumble all your JavaScript on a single page. Fear no more though,\u00a0<a href=\"http:\/\/requirejs.org\/\" target=\"_blank\">RequireJS<\/a>\u00a0to the rescue!&#8230; <a href=\"http:\/\/blog.falafel.com\/using-kendo-ui-mobile-with-requirejs\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/using-kendo-ui-mobile-with-requirejs\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,8,4,9],"meta":{"_series_part":""},"created":"2013-08-15T15:25:57","modified":"2015-03-06T15:27:17"},{"id":185,"title":"Create Custom Kendo MVVM Widgets","slug":"create-custom-kendo-mvvm-widgets","type":"post","excerpt":"Kendo UI is more than just interface-candy. There is an elegant, underlying framework at play that makes things work. Is it easy to extend though? YES - Kendo is also framework-candy!","content":"<p><a href=\"http:\/\/kendoui.com\" target=\"_blank\">Kendo UI<\/a>\u00a0is more than just interface-candy. There is an elegant, underlying framework at play that makes things work. Is it easy to extend though?\u00a0<strong style=\"font-style: italic;\">YES\u00a0<\/strong>&#8211;\u00a0Kendo is also framework-candy!&#8230; <a href=\"http:\/\/blog.falafel.com\/create-custom-kendo-mvvm-widgets\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/create-custom-kendo-mvvm-widgets\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,8,14],"meta":{"_series_part":""},"created":"2013-12-14T15:22:37","modified":"2015-03-06T15:23:52"},{"id":183,"title":"Getting Started with Web Components","slug":"getting-started-with-web-components","type":"post","excerpt":"With HTML5 came the introduction of semantic tags. Content could now be wrapped within much more appropriately named tags such as: <article>, <section>, <video>, <footer>. Web Components take this a step further and allow YOU to create your own CUSTOM tags. That's right, you can create new elements such as <carousel>, <tabs>, <my-widget>, or <any-thing>! The same API's browser vendors had access to for all these years for rendering tags, such as <img> and <button>, have now been extended for web developers to use via the W3C spec. It allows you to bundle and encapsulate markup, styles, and scripts into custom HTML elements. This results in HTML components being rendered as you intend and are safe from conflicts from outside components!","content":"<p>With HTML5 came the introduction of semantic tags. Content could now be wrapped within much more appropriately named tags such as:\u00a0<em>&lt;article&gt;, &lt;section&gt;, &lt;video&gt;, &lt;footer&gt;<\/em>. Web Components take this a step further and allow\u00a0<em>YOU<\/em>\u00a0to create your own\u00a0<em>CUSTOM<\/em>\u00a0tags. That&#8217;s right, you can create new elements such as\u00a0<em>&lt;carousel&gt;, &lt;tabs&gt;, &lt;my-widget&gt;<\/em>, or\u00a0<em>&lt;any-thing&gt;<\/em>! The same API&#8217;s browser vendors had access to for all these years for rendering tags, such as\u00a0<em>&lt;img&gt;<\/em>\u00a0and\u00a0<em>&lt;button&gt;<\/em>, have now been extended for web developers to use via the\u00a0<a href=\"http:\/\/www.w3.org\/TR\/components-intro\" target=\"_blank\">W3C spec<\/a>. It allows you to bundle and encapsulate markup, styles, and scripts into custom HTML elements. This results in HTML components being rendered as you intend and are safe from conflicts from outside components!&#8230; <a href=\"http:\/\/blog.falafel.com\/getting-started-with-web-components\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/getting-started-with-web-components\/","comment_count":0,"author":2,"featured_media":null,"terms":[7,24],"meta":{"_series_part":""},"created":"2014-01-02T15:20:01","modified":"2015-03-06T15:22:27"},{"id":181,"title":"Promise To Use jQuery AJAX Correctly?","slug":"promise-to-use-jquery-ajax-correctly","type":"post","excerpt":"Callbacks are the cornerstone of JavaScript since it is single-threaded in nature. This can quickly turn into spaghetti code when handling multiple, dependent AJAX calls. Enter Promises! Deferred and promise are part of jQuery since version 1.5 and they help in handling asynchronous functions like AJAX.","content":"<p>Callbacks are the cornerstone of JavaScript since it is single-threaded in nature. This can quickly turn into spaghetti code when handling multiple, dependent AJAX calls.<\/p>\n<h2>Enter Promises<\/h2>\n<p>Deferred and promise are part of jQuery since version 1.5 and they help in handling asynchronous functions like AJAX&#8230; <a href=\"http:\/\/blog.falafel.com\/promise-to-use-jquery-ajax-correctly\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/promise-to-use-jquery-ajax-correctly\/","comment_count":0,"author":2,"featured_media":null,"terms":[31,3,30],"meta":{"_series_part":""},"created":"2014-01-30T15:17:19","modified":"2015-03-06T15:19:48"},{"id":179,"title":"Extend Native DOM Elements Using Web Components","slug":"extend-native-dom-elements-using-web-components","type":"post","excerpt":"Web developers love inheritance, don\u2019t you? Who would have thought you can inherit something so basic as an HTML element and extend it! Now you can do this using the new Web Components specifications.","content":"<p>Web developers love inheritance, don\u2019t you? Who would have thought you can inherit something so basic as an HTML element and extend it! Now you can do this using the new\u00a0<a href=\"http:\/\/www.w3.org\/TR\/components-intro\/\" target=\"_blank\">Web Components specifications<\/a>&#8230; <a href=\"http:\/\/blog.falafel.com\/extend-native-dom-elements-using-web-components\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/extend-native-dom-elements-using-web-components\/","comment_count":0,"author":2,"featured_media":null,"terms":[7,24],"meta":{"_series_part":""},"created":"2014-02-03T15:15:50","modified":"2015-03-06T15:17:04"},{"id":177,"title":"Kendo UI Web: Remote Views And Separate HTML Files","slug":"kendo-ui-web-remote-views-and-separate-html-files","type":"post","excerpt":"When working with Kendo's SPA implementation, you will soon realize that you can only create views out of existing elements on the page or feeding it raw HTML. What about remote views? Unfortunately, only Kendo UI Mobile gets to have remote views. In this post, I will show you how to extend Kendo UI Web's kendo.View to give it remote view capabilities just like mobile!","content":"<p>When working with\u00a0<a href=\"http:\/\/docs.telerik.com\/kendo-ui\/getting-started\/framework\/spa\/overview\" target=\"_blank\">Kendo&#8217;s SPA<\/a>\u00a0implementation, you will soon realize that you can only create views out of existing elements on the page or feeding it raw HTML. What about remote views? Unfortunately, only\u00a0<a href=\"http:\/\/blogs.telerik.com\/kendoui\/posts\/13-08-01\/kendo-ui-mobile-remote-views-and-separate-html-files\" target=\"_blank\">Kendo UI Mobile gets to have remote views<\/a>. In this post, I will show you how to extend Kendo UI Web&#8217;s\u00a0<a href=\"http:\/\/docs.telerik.com\/kendo-ui\/api\/framework\/view\" target=\"_blank\">kendo.View<\/a>\u00a0to give it remote view capabilities just like mobile!&#8230; <a href=\"http:\/\/blog.falafel.com\/kendo-ui-web-remote-views-and-separate-html-files\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/kendo-ui-web-remote-views-and-separate-html-files\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,8,29],"meta":{"_series_part":""},"created":"2014-02-10T15:13:16","modified":"2015-03-06T15:15:33"},{"id":175,"title":"The Lo-Dash on Underscore.js and Strings","slug":"the-lo-dash-on-underscore-js-and-strings","type":"post","excerpt":"If you are not using Underscore.js in your JavaScript development, then you are really missing out. It cuts out so much redundant functions you find yourself creating when dealing with collections, objects, and conditions, such as finding, filtering, plucking, and so much more. You will instantly see the power of Underscore.js by examining this example.","content":"<p>If you are not using\u00a0<a href=\"http:\/\/underscorejs.org\/\" target=\"_blank\">Underscore.js<\/a>\u00a0in your JavaScript development, then you are really missing out. It cuts out so much redundant functions you find yourself creating when dealing with collections, objects, and conditions, such as finding, filtering, plucking, and so much more. You will instantly see the power of Underscore.js by examining this example&#8230; <a href=\"http:\/\/blog.falafel.com\/the-lo-dash-on-underscorejs-and-strings\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/the-lo-dash-on-underscore-js-and-strings\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,28],"meta":{"_series_part":""},"created":"2014-02-17T04:21:32","modified":"2015-03-06T04:25:41"},{"id":173,"title":"View Context for Kendo UI Mobile and MVVM","slug":"view-context-for-kendo-ui-mobile-and-mvvm","type":"post","excerpt":"When using MVVM in Kendo UI Mobile, there are times where you will need the context of the view so you can make changes to it or read values from it. You can get the current view from the application's \"view()\" method, but sometimes your app is not in the global namespace if you architected it this way. Unfortunately, this does not come as a parameter for your observable functions. So here's the trick to finding the current view.","content":"<p>When using MVVM in Kendo UI Mobile, there are times where you will need the context of the view so you can make changes to it or read values from it. You can get the current view from the application&#8217;s &#8220;<a href=\"http:\/\/docs.telerik.com\/kendo-ui\/api\/mobile\/application#methods-view\" target=\"_blank\"><em>view()<\/em><\/a>&#8221; method, but sometimes your app is not in the global namespace if you architected it this way. Unfortunately, this does not come as a parameter for your observable functions. So here&#8217;s the trick to finding the current view&#8230; <a href=\"http:\/\/blog.falafel.com\/view-context-for-kendo-ui-mobile-and-mvvm\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/view-context-for-kendo-ui-mobile-and-mvvm\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,8,14],"meta":{"_series_part":""},"created":"2014-02-25T04:16:05","modified":"2015-03-06T04:20:09"},{"id":163,"title":"Include CSS and JavaScript Resources in Sitefinity MVC Widgets","slug":"include-css-and-javascript-resources-in-sitefinity-mvc-widgets","type":"post","excerpt":"Today on Sitefinity version 7, there still isn't a way of adding scripts and styles to MVC widgets, so I have come up with a workaround to do this... better late than never. I consider it a hack because this only works in hybrid mode and assumes the page is a Web Form. I created this as an HTML helper for MVC and can now do this on your views.","content":"<p>Today on Sitefinity version 7, there still isn&#8217;t a way of adding scripts and styles to MVC widgets, so I have come up with a workaround to do this&#8230; better late than never. I consider it a hack because this only works in hybrid mode and\u00a0<em>assumes\u00a0<\/em>the page is a Web Form. I created this as an HTML helper for MVC and can now do this on your views&#8230; <a href=\"http:\/\/blog.falafel.com\/include-css-and-javascript-resources-in-sitefinity-mvc-widgets\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/include-css-and-javascript-resources-in-sitefinity-mvc-widgets\/","comment_count":0,"author":2,"featured_media":null,"terms":[2,11,10,7],"meta":{"_series_part":""},"created":"2014-04-16T03:23:46","modified":"2015-03-06T03:36:49"},{"id":155,"title":"Kendo UI and Beyond: What We Learned from AngularJS","slug":"kendo-ui-and-beyond-what-we-learned-from-angularjs","type":"post","excerpt":"Kendo UI is probably the best JavaScript framework out there. I've used several other frameworks in the real world and toyed with others. Consistently, Kendo is able to hold up from architecture to UI for simple or very complex projects. From the framework side of things, one other library has changed the game and is worth examining: AngularJS.","content":"<p>Kendo UI is probably the best JavaScript framework out there. I&#8217;ve used several other frameworks in the real world and toyed with others. Consistently, Kendo is able to hold up from architecture to UI for simple or very complex projects. From the framework side of things, one other library has changed the game and is worth examining: AngularJS&#8230; <a href=\"http:\/\/blog.falafel.com\/kendo-ui-and-beyond-what-we-learned-from-angularjs\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/kendo-ui-and-beyond-what-we-learned-from-angularjs\/","comment_count":0,"author":2,"featured_media":132,"terms":[22,3,8],"meta":{"_series_part":""},"created":"2014-05-29T02:47:40","modified":"2015-03-06T02:52:36"},{"id":150,"title":"Best Adobe Brackets IDE Extensions","slug":"best-adobe-brackets-ide-extensions","type":"post","excerpt":"Brackets has been around for awhile. It is open source, backed by Adobe, and has an active community. Since these modern IDE's are intended to be light and extensible, some extensions are worth mentioning that will help you get geared up for development. Here are some of my favorite picks I would like to share.","content":"<p>Brackets has been around for awhile. It is open source, backed by Adobe, and has an active community.\u00a0Since these modern IDE&#8217;s are intended to be light and extensible, some extensions are worth mentioning that will help you get geared up for development. Here are some of my favorite picks I would like to share&#8230; <a href=\"http:\/\/blog.falafel.com\/best-adobe-brackets-ide-extensions\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/best-adobe-brackets-ide-extensions\/","comment_count":0,"author":2,"featured_media":151,"terms":[25,7],"meta":{"_series_part":""},"created":"2014-06-14T02:22:45","modified":"2015-03-06T02:39:33"},{"id":147,"title":"Encapsulating HTML with Shadow DOM","slug":"encapsulating-html-with-shadow-dom","type":"post","excerpt":"Encapsulation is a very welcomed feature for HTML. This has been made possible with the introduction of Shadow DOM. Conflicts will be reduced tremendously and 3rd party libraries will play nicely with each other. In this post, I would like to focus on Shadow DOM and what it can do.","content":"<p>Encapsulation is a very welcomed feature for HTML. This has been made possible with the introduction of Shadow DOM. Conflicts will be reduced tremendously and 3rd party libraries will play nicely with each other. In this post, I would like to focus on Shadow DOM and what it can do&#8230; <a href=\"http:\/\/blog.falafel.com\/encapsulating-html-with-shadow-dom\/\" target=\"_blank\">Continue here<\/a><\/p>\n","link":"https:\/\/basememara.com\/encapsulating-html-with-shadow-dom\/","comment_count":0,"author":2,"featured_media":148,"terms":[7,24],"meta":{"_series_part":""},"created":"2014-06-25T02:12:03","modified":"2015-03-06T02:21:55"},{"id":145,"title":"HTML Imports is the New Dependency Management for the Web","slug":"html-imports-is-the-new-dependency-management-for-the-web","type":"post","excerpt":"Managing dependencies is baked into many languages and is a cornerstone to creating modular architectures. Now, HTML joins the ranks and will also offer dependency management. Introducing HTML Imports!","content":"<p>Managing dependencies is baked into many languages and is a cornerstone to creating modular architectures. Now, HTML joins the ranks and will also offer dependency management. Introducing HTML Imports!.. <a href=\"http:\/\/blog.falafel.com\/html-imports-is-the-new-dependency-management-for-the-web\/\" target=\"_blank\">Continue here<\/a><\/p>\n","link":"https:\/\/basememara.com\/html-imports-is-the-new-dependency-management-for-the-web\/","comment_count":0,"author":2,"featured_media":null,"terms":[7,24],"meta":{"_series_part":""},"created":"2014-07-16T02:08:30","modified":"2015-03-06T02:11:49"},{"id":143,"title":"Kendo UI Mobile with MVVM and RequireJS","slug":"kendo-ui-mobile-with-mvvm-and-requirejs","type":"post","excerpt":"A potent mix for creating elegant mobile applications is Kendo UI Mobile with MVVM and RequireJS. Included is an online sandbox environment with code snippets that will highlight the concepts needed to create more advanced Kendo UI Mobile applications. This has been created using jsFiddle and acts as a starter template to update or fork as needed.","content":"<p>A potent mix for creating elegant mobile applications is Kendo UI Mobile with MVVM and RequireJS. Included is an online sandbox environment with code snippets that will highlight the concepts needed to create more advanced Kendo UI Mobile applications. This has been created using jsFiddle and acts as a starter template to update or fork as needed&#8230; <a href=\"http:\/\/blog.falafel.com\/kendo-ui-mobile-with-mvvm-and-requirejs\/\" target=\"_blank\">Continue here<\/a><\/p>\n","link":"https:\/\/basememara.com\/kendo-ui-mobile-with-mvvm-and-requirejs\/","comment_count":0,"author":2,"featured_media":null,"terms":[3,8,4,14,9],"meta":{"_series_part":""},"created":"2014-08-04T02:03:29","modified":"2015-03-06T02:07:23"},{"id":137,"title":"Web Components: A Shiny New You","slug":"web-components-a-shiny-new-you","type":"post","excerpt":"Web Components will completely change the way we code for the web. To demonstrate this, I will be creating a new HTML tag called \"&lt;basem-emara&gt;\" that will act as my own personal vCard.","content":"<p>Web Components will completely change the way we code for the web. To demonstrate this, I will be creating a new HTML tag called &#8220;&lt;basem-emara&gt;&#8221; that will act as my own personal vCard&#8230; <a href=\"http:\/\/blog.falafel.com\/web-components-shiny-new\/\" target=\"_blank\">Continue here<\/a><\/p>\n","link":"https:\/\/basememara.com\/web-components-a-shiny-new-you\/","comment_count":0,"author":2,"featured_media":138,"terms":[7,24],"meta":{"_series_part":""},"created":"2014-09-29T01:51:07","modified":"2015-03-06T01:54:32"},{"id":134,"title":"Creating Web Components with Google Polymer","slug":"creating-web-components-with-google-polymer","type":"post","excerpt":"Google Polymer is more than just a polyfill for Web Components. It has an ambitious agenda for pushing the Web Components specifications forward and lead the web development community in that area. In this post, we will explore what Google Polymer has to offer: polyfills, a framework, and pre-built elements. Although the polyfills portion will go away once browsers catch up to the Web Components spec, what is left behind is an interesting framework and suite of components.","content":"<p>Google Polymer is more than just a polyfill for Web Components. It has an ambitious agenda for pushing the Web Components specifications forward and lead the web development community in that area. In this post, we will explore what Google Polymer has to offer: polyfills, a framework, and pre-built elements. Although the polyfills portion will go away once browsers catch up to the Web Components spec, what is left behind is an interesting framework and suite of components&#8230; <a href=\"http:\/\/blog.falafel.com\/creating-web-components-with-google-polymer\/\" target=\"_blank\">Continue here<\/a><\/p>\n","link":"https:\/\/basememara.com\/creating-web-components-with-google-polymer\/","comment_count":0,"author":2,"featured_media":135,"terms":[23,7,24],"meta":{"_series_part":""},"created":"2014-09-30T01:45:40","modified":"2015-03-06T01:50:36"},{"id":131,"title":"Getting Started with DevExpress and AngularJS","slug":"getting-started-with-devexpress-and-angularjs","type":"post","excerpt":"The DevExtreme suite from DevExpress allows you to build cross-platform HTML5 and JavaScript tools for next-generation mobile and web development. In this post, we will use the AngularJS integration for MVVM.","content":"<p>The DevExtreme suite from DevExpress allows you to build cross-platform HTML5 and JavaScript tools for next-generation mobile and web development. In this post, we will use the AngularJS integration for MVVM&#8230; <a href=\"http:\/\/blog.falafel.com\/getting-started-with-devexpress-and-angularjs\/\" target=\"_blank\">Continue here<\/a><\/p>\n","link":"https:\/\/basememara.com\/getting-started-with-devexpress-and-angularjs\/","comment_count":1,"author":2,"featured_media":132,"terms":[22,21,3],"meta":{"_series_part":""},"created":"2014-11-15T01:41:12","modified":"2015-03-06T01:45:21"},{"id":128,"title":"Using Sitecore MVC for REST Services","slug":"using-sitecore-mvc-for-rest-services","type":"post","excerpt":"Your Sitecore data needs to reach a broad range of clients, including browsers and mobile devices that only RESTful applications can fulfill. Use Sitecore and MVC to build REST services for providing your customers and users with rich, interactive applications.","content":"<p>Your Sitecore data needs to reach a broad range of clients, including browsers and mobile devices that only RESTful applications can fulfill. Use Sitecore and MVC to build REST services for providing your customers and users with rich, interactive applications&#8230; <a href=\"http:\/\/blog.falafel.com\/using-sitecore-mvc-rest-services\/\" target=\"_blank\">Continue here<\/a><\/p>\n","link":"https:\/\/basememara.com\/using-sitecore-mvc-for-rest-services\/","comment_count":0,"author":2,"featured_media":129,"terms":[2,11,20,7],"meta":{"_series_part":""},"created":"2014-12-09T01:33:29","modified":"2015-03-06T01:40:29"},{"id":126,"title":"JavaScript classes with ECMAScript 6","slug":"javascript-classes-with-ecmascript-6","type":"post","excerpt":"JavaScript has been officially initiated as an object-oriented language with the introduction of classes in ECMAScript 6. Now that classes are baked into JavaScript, it changes the whole playing field!","content":"<p>JavaScript has been officially initiated as an object-oriented language with the introduction of classes in ECMAScript 6. Now that classes are baked into JavaScript, it changes the whole playing field!&#8230; <a href=\"http:\/\/blog.falafel.com\/javascript-classes-ecmascript-6\/\" target=\"_blank\">Continued here<\/a><\/p>\n","link":"https:\/\/basememara.com\/javascript-classes-with-ecmascript-6\/","comment_count":0,"author":2,"featured_media":123,"terms":[19,3],"meta":{"_series_part":""},"created":"2015-01-29T21:16:42","modified":"2015-03-05T21:18:15"}],"authors":[{"id":2,"name":"Basem Emara","link":"https:\/\/basememara.com","avatar":"https:\/\/secure.gravatar.com\/avatar\/8def0d36f56d3e6720a44e41bf6f9a71?s=96&d=mm&r=g","description":"Basem is a mobile and software IT professional with over 12 years of experience as an architect, developer, and consultant for dozens of projects that span over various industries for Fortune 500 enterprises, government agencies, and startups. In 2014, Basem brought his vast knowledge and experiences to Swift and helped pioneer the language to build scalable enterprise iOS &amp; watchOS apps, later providing mentorship courses at <a href=\"https:\/\/iosmentor.io\">https:\/\/iosmentor.io<\/a>.","created":"2015-02-02T03:39:52","modified":"2018-10-06T14:43:53"}],"media":[{"id":5281,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/02\/gcd_barrier.png","width":1907,"height":619,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/02\/gcd_barrier-500x162.png","thumbnail_width":500,"thumbnail_height":162},{"id":41287,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/swift-dependency-injection.jpg","width":3569,"height":2899,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/swift-dependency-injection-500x406.jpg","thumbnail_width":500,"thumbnail_height":406},{"id":41397,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/Theme-Screenshot.png","width":2194,"height":1554,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2018\/09\/Theme-Screenshot-500x354.png","thumbnail_width":500,"thumbnail_height":354},{"id":20745,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/localization.jpg","width":300,"height":284,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/localization.jpg","thumbnail_width":300,"thumbnail_height":284},{"id":41258,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/AppDelegate-Responsibilties.png","width":414,"height":306,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/AppDelegate-Responsibilties.png","thumbnail_width":414,"thumbnail_height":306},{"id":675,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_330.png","width":1218,"height":512,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/CapturFiles_330-500x210.png","thumbnail_width":500,"thumbnail_height":210},{"id":166,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/CapturFiles_35.png","width":438,"height":162,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/CapturFiles_35-300x111.png","thumbnail_width":300,"thumbnail_height":111},{"id":161,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/kendo-mobile-geo-170x300.png","width":170,"height":300,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/kendo-mobile-geo-170x300-170x300.png","thumbnail_width":170,"thumbnail_height":300},{"id":141,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/kendo-media-player-169x300.png","width":169,"height":300,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/kendo-media-player-169x300-169x300.png","thumbnail_width":169,"thumbnail_height":300},{"id":123,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/JS6_Logo-2.png","width":200,"height":200,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/JS6_Logo-2.png","thumbnail_width":200,"thumbnail_height":200},{"id":277,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/maxresdefault.jpg","width":1280,"height":800,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/maxresdefault-300x188.jpg","thumbnail_width":300,"thumbnail_height":188},{"id":1739,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_125.png","width":391,"height":508,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/01\/CapturFiles_125.png","thumbnail_width":391,"thumbnail_height":508},{"id":26240,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/Xcode-Storyboard-Feature-Based.png","width":442,"height":564,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/07\/Xcode-Storyboard-Feature-Based.png","thumbnail_width":442,"thumbnail_height":564},{"id":5576,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/03\/delegation1.jpg","width":573,"height":239,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/03\/delegation1-500x209.jpg","thumbnail_width":500,"thumbnail_height":209},{"id":792,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-10-home-app.jpg","width":800,"height":534,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/ios-10-home-app-500x334.jpg","thumbnail_width":500,"thumbnail_height":334},{"id":777,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_349.png","width":1428,"height":1060,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_349-500x371.png","thumbnail_width":500,"thumbnail_height":371},{"id":41346,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/Clean-Architecture-Cycle-2.png","width":500,"height":518,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2018\/04\/Clean-Architecture-Cycle-2-500x518.png","thumbnail_width":500,"thumbnail_height":518},{"id":554,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/08\/Internet1.jpg","width":1600,"height":1288,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/08\/Internet1-500x403.jpg","thumbnail_width":500,"thumbnail_height":403},{"id":5670,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/03\/mapkit-swift-tw.png","width":375,"height":304,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/03\/mapkit-swift-tw.png","thumbnail_width":375,"thumbnail_height":304},{"id":3225,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/02\/Threads.jpg","width":430,"height":260,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2017\/02\/Threads.jpg","thumbnail_width":430,"thumbnail_height":260},{"id":814,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/08\/grand-central-dispatch-gcd.jpg","width":600,"height":398,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/08\/grand-central-dispatch-gcd-500x332.jpg","thumbnail_width":500,"thumbnail_height":332},{"id":803,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/fYexU.png","width":1054,"height":987,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/06\/fYexU-500x468.png","thumbnail_width":500,"thumbnail_height":468},{"id":713,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/4214063-8384749033-52616.jpg","width":800,"height":327,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/4214063-8384749033-52616-500x204.jpg","thumbnail_width":500,"thumbnail_height":204},{"id":784,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_353.png","width":1050,"height":686,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/05\/CapturFiles_353-500x327.png","thumbnail_width":500,"thumbnail_height":327},{"id":485,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Apple-Watch-Notifications.png","width":372,"height":466,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/Apple-Watch-Notifications.png","thumbnail_width":372,"thumbnail_height":466},{"id":726,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/02\/thumb_IMG_0857_1024.jpg","width":896,"height":888,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/02\/thumb_IMG_0857_1024-500x496.jpg","thumbnail_width":500,"thumbnail_height":496},{"id":725,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/thumb_IMG_0856_1024.jpg","width":800,"height":450,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/thumb_IMG_0856_1024-500x281.jpg","thumbnail_width":500,"thumbnail_height":281},{"id":724,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/thumb_IMG_0855_1024.jpg","width":665,"height":1182,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/04\/thumb_IMG_0855_1024-450x800.jpg","thumbnail_width":450,"thumbnail_height":800},{"id":377,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Target.png","width":1452,"height":852,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Xcode-Swift-Framework-Target-500x293.png","thumbnail_width":500,"thumbnail_height":293},{"id":346,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-App-Store.png","width":1818,"height":1134,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Apple-Watch-App-Store-500x312.png","thumbnail_width":500,"thumbnail_height":312},{"id":464,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/0.jpeg","width":640,"height":425,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/0-500x332.jpeg","thumbnail_width":500,"thumbnail_height":332},{"id":536,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/06\/cocoapods-image.jpg","width":840,"height":450,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/06\/cocoapods-image-500x268.jpg","thumbnail_width":500,"thumbnail_height":268},{"id":650,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/plist-values.png","width":1124,"height":868,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/03\/plist-values-500x386.png","thumbnail_width":500,"thumbnail_height":386},{"id":630,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Unit_Testing_Successes.png","width":646,"height":1420,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2016\/01\/Unit_Testing_Successes-364x800.png","thumbnail_width":364,"thumbnail_height":800},{"id":569,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/WatchKit-App-Emulator.png","width":1664,"height":1392,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/05\/WatchKit-App-Emulator-500x418.png","thumbnail_width":500,"thumbnail_height":418},{"id":434,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Unit-Converter-Apple-Watch-1.jpg","width":312,"height":390,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/Unit-Converter-Apple-Watch-1.jpg","thumbnail_width":312,"thumbnail_height":390},{"id":531,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/07\/android_xml_parsing.jpg","width":672,"height":372,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/07\/android_xml_parsing-500x277.jpg","thumbnail_width":500,"thumbnail_height":277},{"id":426,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/watchkit1.jpg","width":653,"height":367,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/watchkit1-500x281.jpg","thumbnail_width":500,"thumbnail_height":281},{"id":451,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/modular-apple-watch-face.jpg","width":312,"height":340,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/modular-apple-watch-face.jpg","thumbnail_width":312,"thumbnail_height":340},{"id":411,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-2.png","width":624,"height":816,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-Number-Keypad-Demo-2-500x654.png","thumbnail_width":500,"thumbnail_height":654},{"id":363,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-2.png","width":1582,"height":1430,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/04\/WatchKit-App-Demo-2-500x452.png","thumbnail_width":500,"thumbnail_height":452},{"id":226,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/html5-logo.png","width":620,"height":541,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/html5-logo-300x262.png","thumbnail_width":300,"thumbnail_height":262},{"id":132,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/angularjs.png","width":128,"height":128,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/angularjs.png","thumbnail_width":128,"thumbnail_height":128},{"id":151,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/brackets-extensions-300x205.png","width":300,"height":205,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/brackets-extensions-300x205-300x205.png","thumbnail_width":300,"thumbnail_height":205},{"id":148,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/shadow-dom-widget-300x195.png","width":300,"height":195,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/shadow-dom-widget-300x195-300x195.png","thumbnail_width":300,"thumbnail_height":195},{"id":138,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/webcomponents-300x206.png","width":300,"height":206,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/webcomponents-300x206-300x206.png","thumbnail_width":300,"thumbnail_height":206},{"id":135,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/web-components-browsers.png","width":580,"height":158,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/web-components-browsers-300x82.png","thumbnail_width":300,"thumbnail_height":82},{"id":129,"link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/Screen-Shot-2014-12-08-at-8.46.15-PM-300x253.png","width":300,"height":253,"thumbnail_link":"https:\/\/basememara.com\/wp-content\/uploads\/2015\/03\/Screen-Shot-2014-12-08-at-8.46.15-PM-300x253-300x253.png","thumbnail_width":300,"thumbnail_height":253}],"terms":[{"id":70,"parent":0,"name":"gcd","slug":"gcd","taxonomy":"post_tag","count":3},{"id":50,"parent":0,"name":"swift","slug":"swift","taxonomy":"post_tag","count":37},{"id":55,"parent":0,"name":"Swift","slug":"swift","taxonomy":"category","count":29},{"id":71,"parent":0,"name":"Swift Utility Belt Series","slug":"swift-utility-belt-series","taxonomy":"series","count":5},{"id":73,"parent":0,"name":"threads","slug":"threads","taxonomy":"post_tag","count":4},{"id":80,"parent":0,"name":"Building a Scalable App","slug":"build-scalable-app","taxonomy":"series","count":8},{"id":62,"parent":0,"name":"protocol-oriented-programming","slug":"protocol-oriented-programming","taxonomy":"post_tag","count":9},{"id":53,"parent":0,"name":"ios","slug":"ios","taxonomy":"post_tag","count":19},{"id":81,"parent":0,"name":"uikit","slug":"uikit","taxonomy":"post_tag","count":1},{"id":77,"parent":0,"name":"localization","slug":"localization","taxonomy":"post_tag","count":1},{"id":47,"parent":0,"name":"xcode","slug":"xcode","taxonomy":"post_tag","count":18},{"id":56,"parent":0,"name":"android","slug":"android","taxonomy":"post_tag","count":5},{"id":61,"parent":0,"name":"carthage","slug":"carthage","taxonomy":"post_tag","count":4},{"id":52,"parent":0,"name":"cocoapods","slug":"cocoapods","taxonomy":"post_tag","count":4},{"id":64,"parent":0,"name":"Featured","slug":"featured","taxonomy":"category","count":6},{"id":2,"parent":0,"name":".NET","slug":"net","taxonomy":"category","count":11},{"id":41,"parent":0,"name":"c#","slug":"c","taxonomy":"post_tag","count":2},{"id":10,"parent":0,"name":"sitefinity","slug":"sitefinity","taxonomy":"post_tag","count":4},{"id":7,"parent":0,"name":"Web","slug":"web","taxonomy":"category","count":17},{"id":37,"parent":0,"name":"web-api","slug":"web-api","taxonomy":"post_tag","count":2},{"id":11,"parent":0,"name":"aspnet-mvc","slug":"aspnet-mvc","taxonomy":"post_tag","count":6},{"id":38,"parent":0,"name":"entity-framework","slug":"entity-framework","taxonomy":"post_tag","count":1},{"id":32,"parent":0,"name":"css","slug":"css","taxonomy":"post_tag","count":2},{"id":3,"parent":0,"name":"JavaScript","slug":"javascript","taxonomy":"category","count":37},{"id":8,"parent":0,"name":"kendo-ui","slug":"kendo-ui","taxonomy":"post_tag","count":16},{"id":27,"parent":0,"name":"node.js","slug":"node-js","taxonomy":"post_tag","count":1},{"id":26,"parent":0,"name":"geolocation","slug":"geolocation","taxonomy":"post_tag","count":4},{"id":12,"parent":0,"name":"google-map","slug":"google-map","taxonomy":"post_tag","count":3},{"id":4,"parent":0,"name":"Mobile","slug":"mobile","taxonomy":"category","count":33},{"id":9,"parent":0,"name":"requirejs","slug":"requirejs","taxonomy":"post_tag","count":9},{"id":15,"parent":0,"name":"responsive-design","slug":"responsive-design","taxonomy":"post_tag","count":2},{"id":14,"parent":0,"name":"mvvm","slug":"mvvm","taxonomy":"post_tag","count":7},{"id":19,"parent":0,"name":"ecmascript-6","slug":"ecmascript-6","taxonomy":"post_tag","count":4},{"id":22,"parent":0,"name":"angularjs","slug":"angularjs","taxonomy":"post_tag","count":3},{"id":44,"parent":0,"name":"typescript","slug":"typescript","taxonomy":"post_tag","count":1},{"id":72,"parent":0,"name":"wordpress","slug":"wordpress","taxonomy":"post_tag","count":2},{"id":78,"parent":0,"name":"router","slug":"router","taxonomy":"post_tag","count":1},{"id":74,"parent":0,"name":"delegates","slug":"delegates","taxonomy":"post_tag","count":1},{"id":76,"parent":0,"name":"Swifty Delegates","slug":"swifty-delegates","taxonomy":"series","count":2},{"id":68,"parent":0,"name":"ai","slug":"ai","taxonomy":"post_tag","count":1},{"id":67,"parent":0,"name":"iot","slug":"iot","taxonomy":"post_tag","count":1},{"id":66,"parent":0,"name":"memory","slug":"memory","taxonomy":"post_tag","count":1},{"id":79,"parent":0,"name":"clean-architecture","slug":"clean-architecture","taxonomy":"post_tag","count":2},{"id":58,"parent":0,"name":"universal-links","slug":"universal-links","taxonomy":"post_tag","count":1},{"id":75,"parent":0,"name":"corelocation","slug":"corelocation","taxonomy":"post_tag","count":1},{"id":49,"parent":0,"name":"watchkit","slug":"watchkit","taxonomy":"post_tag","count":14},{"id":69,"parent":0,"name":"auto-layout","slug":"auto-layout","taxonomy":"post_tag","count":1},{"id":63,"parent":0,"name":"extensions","slug":"extensions","taxonomy":"post_tag","count":1},{"id":48,"parent":0,"name":"app-store","slug":"app-store","taxonomy":"post_tag","count":8},{"id":60,"parent":0,"name":"unit-testing","slug":"unit-testing","taxonomy":"post_tag","count":1},{"id":54,"parent":0,"name":"cloud","slug":"cloud","taxonomy":"post_tag","count":1},{"id":57,"parent":0,"name":"java","slug":"java","taxonomy":"post_tag","count":1},{"id":51,"parent":0,"name":"design","slug":"design","taxonomy":"post_tag","count":1},{"id":40,"parent":0,"name":"mvc","slug":"mvc","taxonomy":"post_tag","count":5},{"id":17,"parent":0,"name":"sencha","slug":"sencha","taxonomy":"post_tag","count":2},{"id":29,"parent":0,"name":"single-page-application","slug":"single-page-application","taxonomy":"post_tag","count":4},{"id":23,"parent":0,"name":"google-polymer","slug":"google-polymer","taxonomy":"post_tag","count":3},{"id":42,"parent":0,"name":"html5","slug":"html5","taxonomy":"post_tag","count":4},{"id":24,"parent":0,"name":"web-components","slug":"web-components","taxonomy":"post_tag","count":8},{"id":13,"parent":0,"name":"jquery-mobile","slug":"jquery-mobile","taxonomy":"post_tag","count":1},{"id":16,"parent":0,"name":"paypal","slug":"paypal","taxonomy":"post_tag","count":1},{"id":31,"parent":0,"name":"ajax","slug":"ajax","taxonomy":"post_tag","count":4},{"id":39,"parent":0,"name":"canjs","slug":"canjs","taxonomy":"post_tag","count":2},{"id":30,"parent":0,"name":"jquery","slug":"jquery","taxonomy":"post_tag","count":3},{"id":35,"parent":0,"name":"iis","slug":"iis","taxonomy":"post_tag","count":1},{"id":34,"parent":0,"name":"ssl","slug":"ssl","taxonomy":"post_tag","count":2},{"id":36,"parent":0,"name":"visual-studio","slug":"visual-studio","taxonomy":"post_tag","count":1},{"id":33,"parent":0,"name":"template-engine","slug":"template-engine","taxonomy":"post_tag","count":1},{"id":28,"parent":0,"name":"underscore","slug":"underscore","taxonomy":"post_tag","count":1},{"id":25,"parent":0,"name":"brackets-ide","slug":"brackets-ide","taxonomy":"post_tag","count":1},{"id":21,"parent":0,"name":"devexpress","slug":"devexpress","taxonomy":"post_tag","count":1},{"id":20,"parent":0,"name":"sitecore","slug":"sitecore","taxonomy":"post_tag","count":1}]}
